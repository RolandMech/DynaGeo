<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0063)http://www.libpng.org/pub/png/spec/iso/index-object.html -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><HTML 
lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Portable Network 
Graphics (PNG) Specification (Second Edition)</TITLE>
<META content="text/html; charset=utf-8" http-equiv="Content-Type"><LINK rel="stylesheet" 
type="text/css" href="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/isostyle.css">
<STYLE type="text/css">
    /* remove annoying green color from definition terms */
    dt {color: black}
    </STYLE>
<LINK rel="stylesheet" type="text/css" href="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/W3C-REC.css" 
media="screen">
<META name="GENERATOR" content="MSHTML 9.00.8112.16441"></HEAD>
<BODY>
<DIV class="head">
<P><A href="http://www.w3.org/"><IMG alt="W3C" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/w3c_home.png" 
width="72" height="48"></A></P>
<H1 id="pagetitle">Portable Network Graphics (PNG) Specification (Second 
Edition)<BR class="xhtml">       Information technology — Computer graphics and 
image processing — Portable Network Graphics (PNG): Functional specification. 
ISO/IEC 15948:2003 (E)</H1><!--h2 id="pagesubtitle">W3C Recommendation 1 October 1996, revised 14 October 2003</h2-->
<H2 id="pagesubtitle">W3C Recommendation 10 November 2003</H2>
<DL>
  <DT>This version:</DT>
  <DD><A 
  href="http://www.w3.org/TR/2003/REC-PNG-20031110">http://www.w3.org/TR/2003/REC-PNG-20031110</A></DD>
  <DT>Latest version:</DT>
  <DD><A href="http://www.w3.org/TR/PNG">http://www.w3.org/TR/PNG</A></DD>
  <DT>Previous version:</DT>
  <DD><A 
  href="http://www.w3.org/TR/2003/PR-PNG-20030520">http://www.w3.org/TR/2003/PR-PNG-20030520</A></DD>
  <DT>Editor:</DT>
  <DD>David Duce, Oxford Brookes University (Second Edition)</DD>
  <DT>Authors:</DT>
  <DD>See <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-Relationship">author 
  list</A></DD></DL>
<P>Please refer to the <A href="http://www.w3.org/2003/11/REC-PNG-20031110-errata"><STRONG>errata</STRONG></A> 
for this document, which may include some normative corrections.</P><!--p>This document is also available in these non-normative
      packages: <a href="REC-SVG11-20030114.zip">zip archive of
      HTML</a> (without external dependencies) and <a
      href="REC-SVG11-20030114.pdf">PDF</a>.</p-->
<P>See also the <A 
href="http://www.w3.org/Consortium/Translation/">translations</A> of this 
document.</P>
<P class="copyright"><A href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright"> 
Copyright</A> © 2003 <A href="http://www.w3.org/"><ACRONYM title="World Wide Web Consortium">W3C</ACRONYM></A><SUP>®</SUP> 
(<A href="http://www.lcs.mit.edu/"><ACRONYM title="Massachusetts Institute of Technology">MIT</ACRONYM></A>, 
<A href="http://www.ercim.org/"><ACRONYM title="European Research Consortium for Informatics and Mathematics">ERCIM</ACRONYM></A>, 
<A href="http://www.keio.ac.jp/">Keio</A>), All Rights Reserved. W3C <A href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</A>, 
<A 
href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</A>, 
<A href="http://www.w3.org/Consortium/Legal/copyright-documents">document 
use</A> and <A 
href="http://www.w3.org/Consortium/Legal/copyright-software">software 
licensing</A> rules apply.</P></DIV>
<HR title="Separator from Header">

<H2 id="specabstract"><A id="abstract" name="abstract">Abstract</A></H2>
<P>This document describes PNG (Portable Network Graphics), an extensible file 
format for the lossless, portable, well-compressed storage of raster images. PNG 
provides a patent-free replacement for GIF and can also replace many common uses 
of TIFF. Indexed-color, grayscale, and truecolor images are supported, plus an 
optional alpha channel. Sample depths range from 1 to 16 bits.</P>
<P>PNG is designed to work well in online viewing applications, such as the 
World Wide Web, so it is fully streamable with a progressive display option. PNG 
is robust, providing both full file integrity checking and simple detection of 
common transmission errors. Also, PNG can store gamma and chromaticity data for 
improved color matching on heterogeneous platforms.</P>
<P>This specification defines an Internet Media Type image/png.</P>
<H2 id="status">Status of this document</H2>
<P><EM>This section describes the status of this document at the time of its 
publication. Other documents may supersede this document. A list of current W3C 
publications and the latest revision of this technical report can be found in 
the <A href="http://www.w3.org/TR/">W3C technical reports index</A> at 
http://www.w3.org/TR/.</EM></P>
<P>This document is the 14 October 2003 W3C    Recommendation of the PNG 
specification, second edition. It is also International Standard, ISO/IEC 
15948:2003. The two documents have exactly identical content except for cover 
page and boilerplate differences as appropriate to the two organisations.</P>
<P>This International Standard is strongly based on the W3C Recommendation 'PNG 
Specification Version 1.0' which was reviewed by W3C members, approved as a W3C 
Recommendation and published in October 1996. This second edition incorporates 
all known errata and clarifications. </P>
<P>A complete review of the document has been done by ISO/IEC/JTC 1/SC 24 in 
collaboration with W3C and the PNG development group (the original authors of 
the PNG 1.0 Recommendation) in order to transform that Recommendation into an 
ISO/IEC international standard. A major design goal during this review was to 
avoid changes that will invalidate existing files, editors, or viewers that 
conform to W3C Recommendation PNG Specification Version 1.0.</P>
<P>The PNG specification enjoys a good level of <A href="http://www.libpng.org/pub/png/pngstatus.html">implementation</A> 
 with good interoperability. At the time of this publication more than 180 <A 
href="http://www.libpng.org/pub/png/pngapvw.html">image viewers</A> could 
display PNG images and over 100 <A href="http://www.libpng.org/pub/png/pngaped.html">image 
editors</A> could read and write valid PNG files. Full support of PNG is  
required  for conforming <A href="http://www.libpng.org/Graphics/SVG">SVG</A> 
viewers; at the time of publication all eighteen <A href="http://www.libpng.org/Graphics/SVG/SVG-Implementations.htm8#viewer">SVG 
viewers</A> had PNG support. HTML has no required image formats, but over 60 <A 
href="http://www.libpng.org/pub/png/pngapbr.html">HTML browsers</A> had at least 
basic support of PNG images.</P>
<P>Public comments on this W3C Recommendation are welcome.     Please send them 
to the <A href="http://lists.w3.org/Archives/Public/png-group">archived</A> list 
<A href="mailto:png-group@w3.org">png-group@w3.org</A> .</P>
<P>The latest information regarding <A href="http://www.w3.org/Graphics/PNG/Disclosures" 
rel="disclosure">patent    disclosures</A> related to this document is available 
on the    Web. As of this publication, the PNG Group are not    aware of any 
royalty-bearing patents they believe to be    essential to PNG.</P>
<P>This document has been produced by ISO/IEC JTC1 SC24 and the PNG Group as 
part of the <A href="http://www.w3.org/Graphics/Activity">Graphics    
Activity</A> within the <A href="http://www.w3.org/Interaction/">W3C    
Interaction Domain</A>. </P><!-- removed p>A list of current W3C Recommendations and
    other technical documents can be found at <a
	href="http://www.w3.org/TR/">http://www.w3.org/TR/</a>.
	W3C  publications may be updated, replaced, or obsoleted by other 
  documents at any time.
    </p-->
<DIV>
<P><STRONG>Note:</STRONG> To provide the highest quality images, this 
specification uses SVG diagrams with a PNG fallback using the HTML object 
element. SVG-enabled browsers will see the SVG figures with selectable text, 
other browsers will display the raster PNG version.</P>
<P>W3C is aware that there is a <A href="http://bugzilla.mozilla.org/show_bug.cgi?id=133567">known 
incompatibility</A> between the unsupported beta of Adobe SVG plugin for Linux 
and Mozilla versions greater than 0.9.9 due to changes in the plug-in API, 
causing a browser crash. Therefore, a normative <A href="http://www.libpng.org/pub/png/spec/iso/index-noobject.html">PNG-only 
alternative version</A> is available that does not use an object element. The 
two versions are otherwise identical.</P></DIV>
<H3 id="AvailableLanguages">Available languages</H3>
<P>The English version of this specification is the only    normative version. 
However, for translations in other languages    see <A href="http://www.w3.org/Consortium/Translation/"> 
   http://www.w3.org/Consortium/Translation/</A>.</P>
<DIV class="toc">
<H2><A id="minitoc" name="minitoc">Table of Contents</A></H2>
<UL class="toc"><!--li class="tocline1"-->
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#1Scope">1
   Scope</A></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2NormRefs">2
   Normative references</A></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3Defsandabbrevs">3
   Terms, definitions, and abbreviated terms</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3Definitions">3.1
     Definitions</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3Abbreviations">3.2
     Abbreviated terms</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts">4
   Concepts</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Sourceimage">4.1 
    Images</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.ColourSpaces">4.2 
    Colour spaces</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.PNGImageTransformation">4.3 
    Reference image to PNG image transformation</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Introduction">4.3.1 
      Introduction</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Implied-alpha">4.3.2 
      Alpha separation</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Indexing">4.3.3 
      Indexing</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.RGBMerging">4.3.4 
      RGB merging</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Alpha-indexing">4.3.5 
      Alpha compaction</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Scaling">4.3.6 
      Sample depth scaling</A></LI></UL></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.PNGImage">4.4 
    PNG image</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Encoding">4.5 
    Encoding the PNG image</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.EncodingIntro">4.5.1 
      Introduction</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.EncodingPassAbs">4.5.2 
      Pass extraction</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.EncodingScanlineAbs">4.5.3 
      Scanline serialization</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.EncodingFiltering">4.5.4 
      Filtering</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.EncodingCompression">4.5.5 
      Compression</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.EncodingChunking">4.5.6 
      Chunking</A></LI></UL></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.AncillInfo">4.6 
    Additional information</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Format">4.7
     PNG datastream</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.FormatChunks">4.7.1 
      Chunks</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.FormatTypes">4.7.2 
      Chunk types</A></LI></UL></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Errors">4.8
     Error handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration">4.9 
    Extension and registration</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5DataRep">5
   Datastream structure</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Introduction">5.1
     Introduction</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5PNG-file-signature">5.2 
    PNG signature</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-layout">5.3
     Chunk layout</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions">5.4 
    Chunk naming conventions</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5CRC-algorithm">5.5
     Cyclic Redundancy Code algorithm</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5ChunkOrdering">5.6
     Chunk ordering</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#6Transformation">6
   Reference image to PNG image transformation</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#6Colour-values">6.1
     Colour types and values</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#6AlphaRepresentation">6.2 
    Alpha representation</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Transformation">7
   Encoding the PNG image as a PNG datastream</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Integers-and-byte-order">7.1 
    Integers and byte order</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Scanline">7.2
     Scanlines</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Filtering">7.3
     Filtering</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#8Interlace">8
   Interlacing and pass extraction</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#8InterlaceIntro">8.1
     Introduction</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#8InterlaceMethods">8.2 
    Interlace methods</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filters">9
   Filtering</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9FtIntro">9.1 
    Filter methods and filter types</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filter-types">9.2
     Filter types for filter method 0</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filter-type-3-Average">9.3 
    Filter type 3: Average</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filter-type-4-Paeth">9.4 
    Filter type 4: Paeth</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10Compression">10
   Compression</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionCM0">10.1 
    Compression method 0</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionFSL">10.2 
    Compression of the sequence of filtered scanlines</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionOtherUses">10.3 
    Other uses of compression</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Chunks">11 
  Chunk specifications</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Introduction">11.1
     Introduction</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Critical-chunks">11.2 
    Critical chunks</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11CcGen">11.2.1
       General</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR">11.2.2 
      <SPAN class="chunk">IHDR</SPAN> Image header</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE">11.2.3 
      <SPAN class="chunk">PLTE</SPAN> Palette</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT">11.2.4 
      <SPAN class="chunk">IDAT</SPAN> Image data</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND">11.2.5 
      <SPAN class="chunk">IEND</SPAN> Image trailer</A></LI></UL></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Ancillary-chunks">11.3 
    Ancillary chunks</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11AcGen">11.3.1
       General</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11transinfo">11.3.2
       Transparency information</A>
      <UL>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS">11.3.2.1
        <SPAN class="chunk">tRNS</SPAN> Transparency</A></LI></UL></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11addnlcolinfo">11.3.3 
      Colour space information</A>
      <UL>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM">11.3.3.1
        <SPAN class="chunk">cHRM</SPAN> Primary chromaticities and white
         point</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA">11.3.3.2
        <SPAN class="chunk">gAMA</SPAN> Image gamma</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP">11.3.3.3
        <SPAN class="chunk">iCCP</SPAN> Embedded ICC profile</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT">11.3.3.4
        <SPAN class="chunk">sBIT</SPAN> Significant bits</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB">11.3.3.5
        <SPAN class="chunk">sRGB</SPAN> Standard RGB colour space</A></LI></UL>
      </LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11textinfo">11.3.4
       Textual information</A>
      <UL>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11textIntro">11.3.4.1
         Introduction</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11keywords">11.3.4.2
         Keywords and text strings</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt">11.3.4.3
        <SPAN class="chunk">tEXt</SPAN> Textual data</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt">11.3.4.4
        <SPAN class="chunk">zTXt</SPAN> Compressed textual data</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt">11.3.4.5
        <SPAN class="chunk">iTXt</SPAN> International textual data</A></LI></UL>
      </LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11addnlsiinfo">11.3.5
       Miscellaneous information</A>
      <UL>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD">11.3.5.1
        <SPAN class="chunk">bKGD</SPAN> Background colour</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST">11.3.5.2
        <SPAN class="chunk">hIST</SPAN> Image histogram</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs">11.3.5.3
        <SPAN class="chunk">pHYs</SPAN> Physical pixel dimensions</A></LI>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT">11.3.5.4
        <SPAN class="chunk">sPLT</SPAN> Suggested palette</A></LI></UL></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11timestampinfo">11.3.6 
      Time stamp information</A>
      <UL>
        <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tIME">11.3.6.1
        <SPAN class="chunk">tIME</SPAN> Image last-modification time</A></LI></UL>
      </LI></UL></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Encoders">12 
  PNG Encoders</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Introduction">12.1
     Introduction</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Encoder-gamma-handling">12.2 
    Encoder gamma handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Encoder-colour-handling">12.3 
    Encoder colour handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Alpha-channel-creation">12.4 
    Alpha channel creation</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Sample-depth-scaling">12.5 
    Sample depth scaling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Suggested-palettes">12.6 
    Suggested palettes</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Interlacing">12.7
     Interlacing</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Filter-selection">12.8 
    Filter selection</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Compression">12.9
     Compression</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Text-chunk-processing">12.10 
    Text chunk processing</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Chunk-processing">12.11 
    Chunking</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Use-of-private-chunks">12.11.1 
      Use of private chunks</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Private-type-and-method-codes">12.11.2 
      Private type and method codes</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Ancillary">12.11.3
       Ancillary chunks</A></LI></UL></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoders">13 
  PNG decoders and viewers</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Introduction">13.1
     Introduction</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoders.Errors">13.2 
    Error handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Error-checking">13.3 
    Error checking</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Security-considerations">13.4 
    Security considerations</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Chunking">13.5
     Chunking</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Pixel-dimensions">13.6 
    Pixel dimensions</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Text-chunk-processing">13.7 
    Text chunk processing</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decompression">13.8
     Decompression</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Filtering">13.9
     Filtering</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Progressive-display">13.10 
    Interlacing and progressive display</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Truecolour-image-handling">13.11 
    Truecolour image handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Sample-depth-rescaling">13.12 
    Sample depth rescaling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-gamma-handling">13.13 
    Decoder gamma handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-colour-handling">13.14 
    Decoder colour handling</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Background-colour">13.15 
    Background colour</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Alpha-channel-processing">13.16 
    Alpha channel processing</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Histogram-and-suggested-palette-usage">13.17
     Histogram and suggested palette usage</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14EditorsExt">14
   Editors and extensions</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14Additional-chunk-types">14.1 
    Additional chunk types</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14Ordering">14.2
     Behaviour of PNG editors</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14Ordering-of-chunks">14.3 
    Ordering of chunks</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14Ordering-of-critical-chunks">14.3.1 
      Ordering of critical chunks</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14Ordering-of-ancillary-chunks">14.3.2 
      Ordering of ancillary chunks</A></LI></UL></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15Conformance">15
   Conformance</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConfIntro">15.1
     Introduction</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConfObjectives">15.1.1 
      Objectives</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConfScope">15.1.2
       Scope</A></LI></UL></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConformanceConf">15.2 
    Conformance conditions</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15FileConformance">15.2.1 
      Conformance of PNG datastreams</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConformanceEncoder">15.2.2 
      Conformance of PNG encoders</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConformanceDecoder">15.2.3 
      Conformance of PNG decoders</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#15ConformanceEditor">15.2.4 
      Conformance of PNG editors</A></LI></UL></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#A-Conventions">Annex
   A File conventions and Internet media type</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#A-File-name-extension">A.1 
    File name extension</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#A-Media-type">A.2
     Internet media type</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#A-Macintosh-file-layout">A.3 
    Macintosh file layout</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#B-NewChunksAppendix">Annex 
  B Guidelines for new chunk types</A></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix">Annex 
  C Gamma and chromaticity</A></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#D-CRCAppendix">Annex
   D Sample Cyclic Redundancy Code implementation</A></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-Resources">Annex 
  E Online resources</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-Intro">Introduction</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-Archive-sites">Archive 
    sites</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-icc-profile-specs">ICC 
    profile specifications</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-PNG-home-page">PNG
     web site</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-Sample-implementation">Sample 
    implementation and test images</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#E-Email">Electronic
     mail</A></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-Relationship">Annex
   F Relationship to W3C PNG</A>
  <UL>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-Editor10">Editor
     (Version 1.0)</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-Editor12">Editor
     (Versions 1.1 and 1.2)</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-ContribEditor10">Contributing 
    Editor (Version 1.0)</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-ContribEditor12">Contributing 
    Editor (Versions 1.1 and 1.2)</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-Authors">Authors
     (Versions 1.0, 1.1, and 1.2 combined)</A></LI>
    <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-ChangeList">List 
    of changes between W3C Recommendation PNG Specification Version 1.0 and this 
    International Standard</A>
    <UL>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-EditorialChanges">Editorial 
      changes</A></LI>
      <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#F-TechnicalChanges">Technical 
      changes</A></LI></UL></LI></UL></LI>
  <LI class="Contents"><A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-References">Bibliography</A></LI>
</UL></DIV><!-- *********************************************************************

FROM HERE ON THIS FILE IS IDENTICAL TO THE ISO VERSION
with these exceptions:

- id added to any headings that did not have one, to comply with pubrules and allow indexing into the document
- URL for this document updated in Annex E and the words " [to be completed when published]" removed

**************************************************************************  -->
<H1><A name="Introduction">Introduction</A></H1>
<P></P>
<P>The design goals for this International Standard were:</P>
<OL>
  <LI>Portability: encoding, decoding, and transmission should be software and 
  hardware platform independent.</LI>
  <LI>Completeness: it should be possible to represent truecolour,
   indexed-colour, and greyscale images, in each case with the option of 
  transparency, colour space information, and ancillary information such as 
  textual comments.</LI>
  <LI>Serial encode and decode: it should be possible for datastreams to be 
  generated serially and read serially, allowing the datastream format to be 
  used for on-the-fly generation and display of images across a serial 
  communication channel.</LI>
  <LI>Progressive presentation: it should be possible to transmit datastreams so 
  that an approximation of the whole image can be presented initially, and 
  progressively enhanced as the datastream is received.</LI>
  <LI>Robustness to transmission errors: it should be possible to detect 
  datastream transmission errors reliably.</LI>
  <LI>Losslessness: filtering and compression should preserve all
   information.</LI>
  <LI>Performance: any filtering, compression, and progressive image 
  presentation should be aimed at efficient decoding and presentation. Fast 
  encoding is a less important goal than fast decoding. Decoding speed may be 
  achieved at the expense of encoding speed.</LI>
  <LI>Compression: images should be compressed effectively, consistent with the 
  other design goals.</LI>
  <LI>Simplicity: developers should be able to implement the standard 
  easily.</LI>
  <LI>Interchangeability: any standard-conforming PNG decoder shall be capable 
  of reading all conforming PNG datastreams.</LI>
  <LI>Flexibility: future extensions and private additions should be allowed for 
  without compromising the interchangeability of standard PNG datastreams.</LI>
  <LI>Freedom from legal restrictions: no algorithms should be used that are not 
  freely available.</LI></OL>
<H1><A name="1Scope">1 Scope</A></H1>
<P>This International Standard specifies a datastream and an associated file 
format, Portable Network Graphics (PNG, pronounced "ping"), for a lossless, 
portable, compressed individual computer graphics image transmitted across the
 Internet. Indexed-colour, greyscale, and truecolour images are supported, with 
optional transparency. Sample depths range from 1 to 16 bits. PNG is fully 
streamable with a progressive display option. It is robust, providing both full 
file integrity checking and simple detection of common transmission errors. PNG 
can store gamma and chromaticity data as well as a full ICC colour profile for 
accurate colour matching on heterogenous platforms. This Standard defines the 
Internet Media type "image/png". The datastream and associated file format have 
value outside of the main design goal.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="2NormRefs">2 Normative references</A></H1>
<P>The following normative documents contain provisions which, through reference 
in this text, constitute provisions of this International Standard. For dated 
references, subsequent amendments to, or revisions of, any of these publications 
do not apply. However, parties to agreements based on this International
 Standard are encouraged to investigate the possibility of applying the most 
recent editions of the normative documents indicated below. For undated 
references, the latest edition of the normative document referred to applies. 
Members of ISO and IEC maintain registers of currently valid International
 Standards.</P>
<P class="NormRefDef"><A name="2-ISO-639">ISO 639:1988</A>,<I>Code for the 
representation of names of languages</I>.</P>
<P class="NormRefDef"><A name="2-ISO-646">ISO/IEC 646:1991</A>,<I>International 
Organization for Standardization, Information technology — ISO 7-bit coded 
character set for information interchange</I>.</P>
<P class="NormRefDef"><A name="2-ISO-3309">ISO/IEC 3309:1993</A>,<I>Information 
Technology — Telecommunications and information exchange between systems — 
High-level data link control (HDLC) procedures — Frame structure</I>.</P>
<P class="NormRefDef"><A name="2-ISO-8859-1">ISO/IEC 8859-1:1998</A>, 
<I>Information technology — 8-bit single-byte coded graphic character sets — 
Part 1: Latin alphabet No. 1</I>.<BR class="xhtml"> For convenience, here is a 
non-normative  <A 
href="http://www.libpng.org/pub/png/spec/iso/iso_8859-1.txt">sample text 
file</A>  describing the codes and associated character names.</P>
<P class="NormRefDef"><A name="2-ISO-9899">ISO/IEC 9899:1990(R1997)</A>, 
<I>Programming languages — C</I>.</P>
<P class="NormRefDef"><A name="2-ISO-10646-1">ISO/IEC 10646-1:1993/AMD.2</A>, 
<I>Information technology —Universal Multiple-Octet Coded Character Sets (UCS) — 
Part 1: Architecture and Basic Multilingual Plane</I>.</P>
<P class="NormRefDef"><A name="2-IEC-61966-2-1">IEC 61966-2-1</A>, <I>Multimedia 
systems and equipment — Colour measurement and management — Part 2-1: Default 
RGB colour space — sRGB,</I> available at <CODE><A 
href="http://www.iec.ch/">http://www.iec.ch/</A></CODE>.</P>
<P class="NormRefDef"><A name="2-CIE-15.2">CIE-15.2</A>, CIE, "Colorimetry, 
Second Edition". CIE Publication 15.2-1986. ISBN 3-900-734-00-3.</P>
<P class="NormRefDef"><A name="2-ICC-1">ICC-1</A>, International Color 
Consortium, "Specification ICC.1: 1998-09, File Format for Color Profiles", 
1998, available at <CODE><A 
href="http://www.color.org/">http://www.color.org/</A></CODE></P>
<P class="NormRefDef"><A name="2-ICC-1A">ICC-1A</A>, International Color 
Consortium, "Specification ICC.1A: 1999-04, Addendum 2 to ICC.1: 1998-09", 1999, 
available at <CODE><A 
href="http://www.color.org/">http://www.color.org/</A></CODE></P>
<P class="NormRefDef"><A name="2-RFC-1123">RFC-1123</A>, Braden, R., Editor, 
"Requirements for Internet Hosts — Application and Support", STD 3, RFC 1123, 
USC/Information Sciences Institute, October 1989.<BR class="xhtml"><CODE><A 
href="http://www.ietf.org/rfc/rfc1123.txt">http://www.ietf.org/rfc/rfc1123.txt</A></CODE></P>
<P class="NormRefDef"><A name="2-RFC-1950">RFC-1950</A>, Deutsch, P. and Gailly, 
J-L., "ZLIB Compressed Data Format Specification version 3.3", RFC 1950, Aladdin 
Enterprises, May 1996.<BR class="xhtml"><CODE><A href="http://www.ietf.org/rfc/rfc1950.txt">http://www.ietf.org/rfc/rfc1950.txt</A></CODE></P>
<P class="NormRefDef"><A name="2-RFC-1951">RFC-1951</A>, Deutsch, P., "DEFLATE 
Compressed Data Format Specification version 1.3", RFC 1951, Aladdin 
Enterprises, May 1996.<BR class="xhtml"><CODE><A href="http://www.ietf.org/rfc/rfc1951.txt">http://www.ietf.org/rfc/rfc1951.txt</A></CODE></P>
<P class="NormRefDef"><A name="2-RFC-2045">RFC-2045</A>, Freed, N. and 
Borenstein, N. , "MIME (Multipurpose Internet Mail Extensions) Part One: Format 
of Internet Message Bodies", RFC 2045, Innosoft, First Virtual, November 
1996.<BR class="xhtml"><CODE><A 
href="http://www.ietf.org/rfc/rfc2045.txt">http://www.ietf.org/rfc/rfc2045.txt</A></CODE></P>
<P class="NormRefDef"><A name="2-RFC-2048">RFC-2048</A>, Freed, N., Klensin, J. 
and Postel, J., "Multipurpose Internet Mail Extensions (MIME) Part Four: 
Registration Procedures", RFC 2048, Innosoft, MCI, ISI, November 1996.<BR class="xhtml"><CODE><A 
href="http://www.ietf.org/rfc/rfc2048.txt">http://www.ietf.org/rfc/rfc2048.txt</A></CODE></P>
<P class="NormRefDef"><A name="2-RFC-3066">RFC-3066</A>, Alvestrand, H., "Tags 
for the Identification of Languages", RFC 3066, Cisco Systems, January 2001. 
(Obsoletes RFC 1766.)<BR class="xhtml"><CODE><A href="http://www.ietf.org/rfc/rfc3066.txt">http://www.ietf.org/rfc/rfc3066.txt</A></CODE></P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="3Defsandabbrevs">3 Terms, definitions, and abbreviated 
terms</A></H1>
<H2><A name="3Definitions">3.1 Definitions</A></H2>
<P>For the purposes of this International Standard the following definitions 
apply.</P>
<DL>
  <DT><A name="3alpha">3.1.1 alpha</A></DT>
  <DD>a value representing a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel's</SPAN></A> degree of opacity. The more opaque a 
  pixel, the more it hides the background against which the image is presented. 
  Zero alpha represents a completely transparent pixel, maximum alpha represents 
  a completely opaque pixel.</DD>
  <DT><A name="3alphaCompaction">3.1.2 alpha compaction</A></DT>
  <DD>an implicit representation of transparent <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixels</SPAN></A>. If every pixel with a specific colour or 
  <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3greyscale"><SPAN 
  class="Definition">greyscale</SPAN></A> value is fully transparent and all 
  other pixels are fully opaque, the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3channel"><SPAN 
  class="Definition">channel</SPAN></A> may be represented implicitly.</DD>
  <DT><A name="3alphaSeparation">3.1.3 alpha separation</A></DT>
  <DD>separating an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3channel"><SPAN 
  class="Definition">channel</SPAN></A> in which every <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A> is fully opaque; all alpha values are the 
  maximum value. The fact that all pixels are fully opaque is represented 
  implicitly.</DD>
  <DT><A name="3alphaTable">3.1.4 alpha table</A></DT>
  <DD>indexed table of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">sample</SPAN></A> values, which in an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3indexedColour"><SPAN 
  class="Definition">indexed-colour</SPAN></A> image defines the alpha sample 
  values of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3referenceImage"><SPAN 
  class="Definition">reference image</SPAN></A>. The alpha table has the same 
  number of entries as the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3palette"><SPAN 
  class="Definition">palette</SPAN></A>.</DD>
  <DT><A name="3ancillaryChunk">3.1.5 ancillary chunk</A></DT>
  <DD>class of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chunk"><SPAN 
  class="Definition">chunk</SPAN></A> that provides additional information. A <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdecoder"><SPAN 
  class="Definition">PNG decoder</SPAN></A>, without processing an ancillary 
  chunk, can still produce a meaningful image, though not necessarily the best 
  possible image. <!-- agreed: don't need to define a bit --></DD>
  <DT><A name="3bitDepth">3.1.6 bit depth</A></DT>
  <DD>for <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3indexedColour"><SPAN 
  class="Definition">indexed-colour</SPAN></A> images, the number of bits per <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3palette"><SPAN 
  class="Definition">palette</SPAN></A> index. For other images, the number of 
  bits per <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">sample</SPAN></A> in the image. This is the value that 
  appears in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="chunk">IHDR</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chunk"><SPAN 
  class="Definition">chunk</SPAN></A>.</DD>
  <DT><A name="3byte">3.1.7 byte</A></DT>
  <DD>8 bits; also called an octet. The highest bit (value 128) of a byte is 
  numbered bit 7; the lowest bit (value 1) is numbered bit 0.</DD>
  <DT><A name="3byteOrder">3.1.8 byte order</A></DT>
  <DD>ordering of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3byte"><SPAN 
  class="Definition">bytes</SPAN></A> for multi-byte data values within a<A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGfile"><SPAN 
  class="Definition">PNG file</SPAN></A>or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>. PNG uses <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3networkByteOrder"><SPAN 
  class="Definition">network byte order</SPAN></A>.</DD>
  <DT><A name="3channel">3.1.9 channel</A></DT>
  <DD>array of all per-<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A> information of a particular kind within a 
  <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3referenceImage"><SPAN 
  class="Definition">reference image</SPAN></A>. There are five kinds of
   information: red, green, blue, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3greyscale"><SPAN 
  class="Definition">greyscale</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A>. For example the alpha channel is the 
  array of alpha values within a reference image.</DD>
  <DT><A name="3chromaticity">3.1.10 chromaticity (CIE)</A></DT>
  <DD>pair of values <I>x,y</I> that precisely specify a colour, except for the 
  brightness information.</DD>
  <DT><A name="3chunk">3.1.11 chunk</A></DT>
  <DD>section of a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>. Each chunk has a chunk type. 
  Most chunks also include data. The format and meaning of the data within the 
  chunk are determined by the chunk type. Each chunk is either a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3criticalChunk"><SPAN 
  class="Definition">critical chunk</SPAN></A> or an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3ancillaryChunk"><SPAN 
  class="Definition">ancillary chunk</SPAN></A>.</DD>
  <DT><A name="3colourType">3.1.12 colour type</A></DT>
  <DD>value denoting how colour and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A> are specified in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A>. Colour types are sums of the 
  following values: 1 (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3palette"><SPAN 
  class="Definition">palette</SPAN></A> used), 2 (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3truecolour"><SPAN 
  class="Definition">truecolour</SPAN></A> used), 4 (alpha used). The permitted 
  values of colour type are 0, 2, 3, 4, and 6.</DD>
  <DT><A name="3composite">3.1.13 composite (verb)</A></DT>
  <DD>to form an image by merging a foreground image and a background image, 
  using transparency information to determine where and to what extent the 
  background should be visible. The foreground image is said to be "composited 
  against" the background.</DD>
  <DT><A name="3criticalChunk">3.1.14 critical chunk</A></DT>
  <DD><A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chunk"><SPAN 
  class="Definition">chunk</SPAN></A>that <!--must be understood and processed by the decoder--> 
  shall be understood and processed by the decoder in order to produce a 
  meaningful image from a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>.</DD>
  <DT><A name="3datastream">3.1.15 datastream</A></DT>
  <DD>sequence of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3byte"><SPAN 
  class="Definition">bytes</SPAN></A>. This term is used rather than "file" to 
  describe a byte sequence that may be only a portion of a file. It is also used 
  to emphasize that the sequence of bytes might be generated and consumed "on 
  the fly", never appearing in a stored file at all.</DD>
  <DT><A name="3deflate">3.1.16 deflate</A></DT>
  <DD>name of a particular compression algorithm. This algorithm is used, in 
  compression mode 0, in conforming <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastreams</SPAN></A>. Deflate is a member of the <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3LZ77"><SPAN 
  class="Definition">LZ77</SPAN></A> family of compression methods. It is 
  defined in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-1951"><SPAN 
  class="NormRef">[RFC-1951]</SPAN></A>.</DD><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
  <DT><A name="3deliveredImage">3.1.17 delivered image</A></DT>
  <DD>image constructed from a decoded <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>.</DD>
  <DT><A name="3filter">3.1.18 filter</A></DT>
  <DD>transformation applied to an array of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3scanline"><SPAN 
  class="Definition">scanlines</SPAN></A> with the aim of improving their 
  compressibility. PNG uses only lossless (reversible) filter algorithms.</DD>
  <DT><A name="3frameBuffer">3.1.19 frame buffer</A></DT>
  <DD>the final digital storage area for the image shown by most types of 
  computer display. Software causes an image to appear on screen by loading the 
  image into the frame buffer.</DD>
  <DT><A name="3gamma">3.1.20 gamma</A></DT>
  <DD>exponent that describes approximations to certain non-linear transfer 
  functions encountered in image capture and reproduction. Within this 
  International Standard, gamma is the exponent in the transfer function from 
  <TT>display_output</TT> to<TT>image_sample</TT><PRE><TT>image_sample = display_output<SUP>gamma</SUP></TT>
</PRE>where both 
  <TT>display_output</TT> and <TT>image_sample</TT>are scaled to the range 0 to 
  1.</DD>
  <DT><A name="3greyscale">3.1.21 greyscale</A></DT>
  <DD>image representation in which each <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A> is defined by a single <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">sample</SPAN></A> of colour information, representing 
  overall <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3luminance"><SPAN 
  class="Definition">luminance</SPAN></A> (on a scale from black to white), and 
  optionally an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A> sample (in which case it is called 
  greyscale with alpha).</DD>
  <DT><A name="3imageData">3.1.22 image data</A></DT>
  <DD>1-dimensional array of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3scanline"><SPAN 
  class="Definition">scanlines</SPAN></A> within an image.</DD>
  <DT><A name="3indexedColour">3.1.23 indexed-colour</A></DT>
  <DD>image representation in which each <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A> of the original image is represented by a 
  single index into a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3palette"><SPAN 
  class="Definition">palette</SPAN></A>. The selected palette entry defines the 
  actual colour of the pixel.</DD>
  <DT><A name="3indexing">3.1.24 indexing</A></DT>
  <DD>representing an image by a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3palette"><SPAN 
  class="Definition">palette</SPAN></A>, an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alphaTable"><SPAN 
  class="Definition">alpha table</SPAN></A>, and an array of indices pointing to 
  entries in the palette and alpha table.</DD>
  <DT><A name="3interlacedPNGimage">3.1.25 interlaced PNG image</A></DT>
  <DD>sequence of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3reducedImage"><SPAN 
  class="Definition">reduced images</SPAN></A> generated from the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A>by <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3passExtraction"><SPAN 
  class="Definition">pass extraction</SPAN></A>.</DD>
  <DT><A name="3losslessCompression">3.1.26 lossless compression</A></DT>
  <DD>method of data compression that permits reconstruction of the original 
  data exactly, bit-for-bit.</DD>
  <DT><A name="3lossyCompression">3.1.27 lossy compression</A></DT>
  <DD>method of data compression that permits reconstruction of the original 
  data approximately, rather than exactly.</DD>
  <DT><A name="3luminance">3.1.28 luminance</A></DT>
  <DD>formal definition of luminance is in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-CIE-15.2"><SPAN 
  class="NormRef">[CIE-15.2]</SPAN></A>. Informally it is the perceived 
  brightness, or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3greyscale"><SPAN 
  class="Definition">greyscale</SPAN></A>level, of a colour. Luminance and <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chromaticity"><SPAN 
  class="Definition">chromaticity</SPAN></A> together fully define a perceived 
  colour.</DD>
  <DT><A name="3LZ77">3.1.29 LZ77</A></DT>
  <DD>data compression algorithm described by Ziv and Lempel in their 1977 paper 
  <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ZL"><SPAN 
  class="bibref">[ZL]</SPAN></A>.</DD>
  <DT><A name="3networkByteOrder">3.1.30 network byte order</A></DT>
  <DD><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3byteOrder"><SPAN 
  class="Definition">byte order</SPAN></A> in which the most significant byte 
  comes first, then the less significant bytes in descending order of
   significance (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3MSB"><SPAN 
  class="Definition">MSB</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3LSB"><SPAN 
  class="Definition">LSB</SPAN></A> for two-byte integers, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3MSB"><SPAN 
  class="Definition">MSB</SPAN></A> B2 B1 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3LSB"><SPAN 
  class="Definition">LSB</SPAN></A> for four-byte integers).</DD>
  <DT><A name="3palette">3.1.31 palette</A></DT>
  <DD>indexed table of three 8-bit <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">sample</SPAN></A> values, red, green, and blue, which with 
  an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3indexedColour"><SPAN 
  class="Definition">indexed-colour</SPAN></A> image defines the red, green, and 
  blue sample values of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3referenceImage"><SPAN 
  class="Definition">reference image</SPAN></A>. In other cases, the palette may 
  be a suggested palette that viewers may use to present the image on
   indexed-colour display hardware. <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">Alpha</SPAN></A> samples may be defined for palette entries 
  via the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alphaTable"><SPAN 
  class="Definition">alpha table</SPAN></A> and may be used to reconstruct the 
  alpha sample values of the reference image.</DD>
  <DT><A name="3passExtraction">3.1.32 pass extraction</A></DT>
  <DD>organizing a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A> as a sequence of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3reducedImage"><SPAN 
  class="Definition">reduced images</SPAN></A> to change the order of 
  transmission and enable progressive display.</DD>
  <DT><A name="3pixel">3.1.33 pixel</A></DT>
  <DD>information stored for a single grid point in an image. A pixel consists 
  of (or points to) a sequence of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">samples</SPAN></A> from all <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3channel"><SPAN 
  class="Definition">channels</SPAN></A>. The complete image is a rectangular 
  array of pixels.</DD><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
  <DT><A name="3PNGdatastream">3.1.34 PNG datastream</A></DT>
  <DD>result of encoding a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A>. A PNG <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3datastream"><SPAN 
  class="Definition">datastream</SPAN></A>consists of a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGsignature"><SPAN 
  class="Definition">PNG signature</SPAN></A> followed by a sequence of<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chunk"><SPAN 
  class="Definition">chunks</SPAN></A>.</DD>
  <DT><A name="3PNGdecoder">3.1.35 PNG decoder</A></DT>
  <DD>process or device which reconstructs the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3referenceImage"><SPAN 
  class="Definition">reference image</SPAN></A> from a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A> and generates a corresponding 
  delivered image.</DD>
  <DT><A name="3PNGeditor">3.1.36 PNG editor</A></DT>
  <DD>process or device which creates a modification of an existing<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>, preserving unmodified ancillary
   information wherever possible, and obeying the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chunk"><SPAN 
  class="Definition">chunk</SPAN></A> ordering rules, even for unknown chunk 
  types.</DD>
  <DT><A name="3PNGencoder">3.1.37 PNG encoder</A></DT>
  <DD>process or device which constructs a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3referenceImage"><SPAN 
  class="Definition">reference image</SPAN></A> from a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sourceImage"><SPAN 
  class="Definition">source image</SPAN></A>, and generates a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A> representing the reference 
  image.</DD>
  <DT><A name="3PNGfile">3.1.38 PNG file</A></DT>
  <DD><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A> stored as a file.</DD>
  <DT><A name="3PNGfourByteSignedInteger">3.1.39 PNG four-byte signed 
  integer</A></DT>
  <DD>a four-byte signed integer limited to the range -(2<SUP>31</SUP>-1) to 
  2<SUP>31</SUP>-1. The restriction is imposed in order to accommodate languages 
  that have difficulty with the value -2<SUP>31</SUP>.</DD>
  <DT><A name="3PNGfourByteUnSignedInteger">3.1.40 PNG four-byte unsigned 
  integer</A></DT>
  <DD>a four-byte unsigned integer limited to the range 0 to 2<SUP>31</SUP>-1. 
  The restriction is imposed in order to accommodate languages that have 
  difficulty with unsigned four-byte values.</DD>
  <DT><A name="3PNGimage">3.1.41 PNG image</A></DT>
  <DD>result of transformations applied by a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGencoder"><SPAN 
  class="Definition">PNG encoder</SPAN></A> to a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3referenceImage"><SPAN 
  class="Definition">reference image</SPAN></A>, in preparation for encoding as 
  a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>, and the result of decoding a PNG
   datastream.</DD>
  <DT><A name="3PNGsignature">3.1.42 PNG signature</A></DT>
  <DD>sequence of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3byte"><SPAN 
  class="Definition">bytes</SPAN></A> appearing at the start of every <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A>. It differentiates a PNG 
  datastream from other types of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3datastream"><SPAN 
  class="Definition">datastream</SPAN></A> and allows early detection of some 
  transmission errors.</DD>
  <DT><A name="3reducedImage">3.1.43 reduced image</A></DT>
  <DD>pass of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3interlacedPNGimage"><SPAN 
  class="Definition">interlaced PNG image</SPAN></A> extracted from the<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A> by <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3passExtraction"><SPAN 
  class="Definition">pass extraction</SPAN></A>.</DD>
  <DT><A name="3referenceImage">3.1.44 reference image</A></DT>
  <DD>rectangular array of rectangular <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixels</SPAN></A>, each having the same number of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">samples</SPAN></A>, either three (red, green, blue) or four 
  (red, green, blue, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A>). Every reference image can be represented 
  exactly by a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGdatastream"><SPAN 
  class="Definition">PNG datastream</SPAN></A> and every PNG datastream can be 
  converted into a reference image. Each <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3channel"><SPAN 
  class="Definition">channel</SPAN></A> has a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sampleDepth"><SPAN 
  class="Definition">sample depth</SPAN></A> in the range 1 to 16. All samples 
  in the same channel have the same sample depth. Different channels may have
   different sample depths.</DD>
  <DT><A name="3RGBmerging">3.1.45 RGB merging</A></DT>
  <DD>converting an image in which the red, green, and blue <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">samples</SPAN></A> for each <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A>have the same value, and the same <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sampleDepth"><SPAN 
  class="Definition">sample depth</SPAN></A>, into an image with a single <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3greyscale"><SPAN 
  class="Definition">greyscale</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3channel"><SPAN 
  class="Definition">channel</SPAN></A>.</DD>
  <DT><A name="3sample">3.1.46 sample</A></DT>
  <DD>intersection of a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3channel"><SPAN 
  class="Definition">channel</SPAN></A> and a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A> in an image.</DD>
  <DT><A name="3sampleDepth">3.1.47 sample depth</A></DT>
  <DD>number of bits used to represent a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">sample</SPAN></A> value. In an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3indexedColour"><SPAN 
  class="Definition">indexed-colour</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A>, samples are stored in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3palette"><SPAN 
  class="Definition">palette</SPAN></A> and thus the sample depth is always 8 by 
  definition of the palette. In other types of PNG image it is the same as the 
  <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3bitDepth"><SPAN 
  class="Definition">bit depth</SPAN></A>.</DD>
  <DT><A name="3sampleDepthScaling">3.1.48 sample depth scaling</A></DT>
  <DD>mapping of a range of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">sample</SPAN></A> values onto the full range of a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sampleDepth"><SPAN 
  class="Definition">sample depth</SPAN></A> allowed in a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGimage"><SPAN 
  class="Definition">PNG image</SPAN></A>.</DD>
  <DT><A name="3scanline">3.1.49 scanline</A></DT>
  <DD>row of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixels</SPAN></A> within an image or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3interlacedPNGimage"><SPAN 
  class="Definition">interlaced PNG image</SPAN></A>.</DD>
  <DT><A name="3sourceImage">3.1.50 source image</A></DT>
  <DD>image which is presented to a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3PNGencoder"><SPAN 
  class="Definition">PNG encoder</SPAN></A>.</DD>
  <DT><A name="3truecolour">3.1.51 truecolour</A></DT>
  <DD>image representation in which each <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixel</SPAN></A> is defined by <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3sample"><SPAN 
  class="Definition">samples</SPAN></A>, representing red, green, and blue 
  intensities and optionally an<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3alpha"><SPAN 
  class="Definition">alpha</SPAN></A>sample (in which case it is referred to as 
  truecolour with alpha).</DD>
  <DT><A name="3whitePoint">3.1.52 white point</A></DT>
  <DD><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3chromaticity"><SPAN 
  class="Definition">chromaticity</SPAN></A> of a computer display's nominal 
  white value.</DD>
  <DT><A name="3zlib">3.1.53 zlib</A></DT>
  <DD>particular format for data that have been compressed using <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3deflate"><SPAN 
  class="Definition">deflate</SPAN></A>-style compression. Also the name of a 
  library containing a sample implementation of this method. The format is 
  defined in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-1950"><SPAN 
  class="NormRef">[RFC-1950]</SPAN></A>.</DD></DL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="3Abbreviations">3.2 Abbreviated terms</A></H2>
<DL>
  <DT><A name="3CRC">3.2.1 CRC</A></DT>
  <DD>Cyclic Redundancy Code. A CRC is a type of check value designed to detect 
  most transmission errors. A decoder calculates the CRC for the received data 
  and checks by comparing it to the CRC calculated by the encoder and appended 
  to the data. A mismatch indicates that the data or the CRC were corrupted in
   transit.</DD>
  <DT><A name="3CRT">3.2.2 CRT</A></DT>
  <DD>Cathode Ray Tube: a common type of computer display hardware.</DD>
  <DT><A name="3LSB">3.2.2 LSB</A></DT>
  <DD>Least Significant Byte of a multi-<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3byte"><SPAN 
  class="Definition">byte</SPAN></A> value.</DD>
  <DT><A name="3LUT">3.2.3 LUT</A></DT>
  <DD>Look Up Table. In <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3frameBuffer"><SPAN 
  class="Definition">frame buffer</SPAN></A> hardware, a LUT can be used to map 
  <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3indexedColour"><SPAN 
  class="Definition">indexed-colour</SPAN></A> <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3pixel"><SPAN 
  class="Definition">pixels</SPAN></A> into a selected set of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3truecolour"><SPAN 
  class="Definition">truecolour</SPAN></A> values, or to perform <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3gamma"><SPAN 
  class="Definition">gamma</SPAN></A> correction. In software, a LUT can often 
  be used as a fast way of implementing any mathematical function of a single 
  integer variable.</DD>
  <DT><A name="3MSB">3.2.4 MSB</A></DT>
  <DD>Most Significant Byte of a multi-<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3byte"><SPAN 
  class="Definition">byte</SPAN></A> value.</DD></DL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="4Concepts">4 Concepts</A></H1>
<H2><A name="4Concepts.Sourceimage">4.1 Images</A></H2>
<P>This International Standard specifies the PNG datastream, and places some 
requirements on PNG encoders, which generate PNG datastreams, PNG decoders, 
which interpret PNG datastreams, and PNG editors, which transform one PNG 
datastream into another. It does not specify the interface between an 
application and either a PNG encoder, decoder, or editor. The precise form in 
which an image is presented to an encoder or delivered by a decoder is not
 specified. Four kinds of image are distinguished.</P>
<OL>
  <LI>The <I>source image</I> is the image presented to a PNG encoder.</LI>
  <LI>The <I>reference image</I>, which only exists conceptually, is a 
  rectangular array of rectangular pixels, all having the same width and height, 
  and all containing the same number of unsigned integer samples, either three 
  (red, green, blue) or four (red, green, blue, alpha). The array of all samples 
  of a particular kind (red, green, blue, or alpha) is called a channel. Each
   channel has a sample depth in the range 1 to 16, which is the number of bits 
  used by every sample in the channel. Different channels may have different 
  sample depths. The red, green, and blue samples determine the intensities of 
  the red, green, and blue components of the pixel's colour; if they are all 
  zero, the pixel is black, and if they all have their maximum values
   (2<SUP>sampledepth</SUP>-1), the pixel is white. The alpha sample determines 
  a pixel's degree of opacity, where zero means fully transparent and the 
  maximum value means fully opaque. In a three-channel reference image all 
  pixels are fully opaque. (It is also possible for a four-channel reference 
  image to have all pixels fully opaque; the difference is that the latter has a
   specific alpha sample depth, whereas the former does not.) Each horizontal 
  row of pixels is called a scanline. Pixels are ordered from left to right 
  within each scanline, and scanlines are ordered from top to bottom. A PNG 
  encoder may transform the source image directly into a PNG image, but 
  conceptually it first transforms the source image into a reference image, then
   transforms the reference image into a PNG image. Depending on the type of 
  source image, the transformation from the source image to a reference image 
  may require the loss of information. That transformation is beyond the scope 
  of this International Standard. The reference image, however, can always be 
  recovered exactly from a PNG datastream.</LI>
  <LI>The <I>PNG image</I> is obtained from the reference image by a series of 
  transformations: alpha separation, indexing, RGB merging, alpha compaction, 
  and sample depth scaling. Five types of PNG image are defined (see 6.1: <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#6Colour-values"><SPAN 
  class="xref">Colour types and values</SPAN></A>). (If the PNG encoder actually 
  transforms the source image directly into the PNG image, and the source image
   format is already similar to the PNG image format, the encoder may be able to 
  avoid doing some of these transformations.) Although not all sample depths in 
  the range 1 to 16 bits are explicitly supported in the PNG image, the number 
  of significant bits in each channel of the reference image may be recorded. 
  All channels in the PNG image have the same sample depth. A PNG encoder 
  generates a PNG datastream from the PNG image. A PNG decoder takes the PNG 
  datastream and recreates the PNG image.</LI>
  <LI>The <I>delivered image</I> is constructed from the PNG image obtained by 
  decoding a PNG datastream. No specific format is specified for the delivered 
  image. A viewer presents an image to the user as close to the appearance of 
  the original source image as it can achieve.</LI></OL>
<P>The relationships between the four kinds of image are illustrated in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure41"><SPAN 
class="figref">figure 4.1</SPAN></A>.</P>
<P><A name="figure41">
<OBJECT data="figures/fig41.svg" width="640" type="image/svg+xml" 
height="290"><IMG alt="Figure 4.1: Relationships between&#10;source, reference, PNG, and display images" 
src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig41.png" 
width="640" height="280"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.1 — Relationships between source, reference, 
PNG, and display images</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>The relationships between samples, channels, pixels, and sample depth are 
illustrated in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure42"><SPAN 
class="figref">figure 4.2</SPAN></A>.</P>
<P><A name="figure42">
<OBJECT data="figures/fig42.svg" width="640" type="image/svg+xml" 
height="290"><IMG alt="Figure 4.2: Relationships between&#10;sample, sample depth, pixel, and channel" 
src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig42.png" 
width="640" height="290"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.2 — Relationships between sample, sample depth, 
pixel, and channel</P>
<H2><A name="4Concepts.ColourSpaces">4.2 Colour spaces</A></H2>
<P>The RGB colour space in which colour samples are situated may be specified in 
one of three ways:</P><!-- <ol start="1"> -->
<OL>
  <LI>by an ICC profile;</LI>
  <LI>by specifying explicitly that the colour space is sRGB when the samples 
  conform to this colour space;</LI>
  <LI>by specifying the value of gamma and the 1931 CIE <I>x,y</I>chromaticities 
  of the red, green, and blue primaries used in the image and the reference 
  white point.</LI></OL>
<P>For high-end applications the first method provides the most flexibility and 
control. The second method enables one particular colour space to be indicated. 
The third method enables the exact chromaticities of the RGB data to be 
specified, along with the gamma correction (the power function relating the 
desired display output with the image samples) to be applied (see Annex C: <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A>). It is recommended that explicit 
gamma information also be provided when either the first or second method is 
used, for use by PNG decoders that do not support full ICC profiles or the sRGB 
colour space. Such PNG decoders can still make sensible use of gamma 
information. PNG decoders are strongly encouraged to use this information, plus 
information about the display system, in order to present the image to the
 viewer in a way that reproduces as closely as possible what the image's 
original author saw .</P>
<P>Gamma correction is not applied to the alpha channel, if present. Alpha 
samples always represent a linear fraction of full opacity.</P>
<H2><A name="4Concepts.PNGImageTransformation">4.3 Reference image to PNG image 
transformation</A></H2>
<H3><A name="4Concepts.Introduction">4.3.1 Introduction</A></H3>
<P>A number of transformations are applied to the reference image to create the 
PNG image to be encoded (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure43"><SPAN 
class="figref">figure 4.3</SPAN></A>). The transformations are applied in the 
following sequence, where square brackets mean the transformation is 
optional:</P><PRE>        [alpha separation]
        indexing or ( [RGB merging] [alpha compaction] )
        sample depth scaling
</PRE>
<P>When every pixel is either fully transparent or fully opaque, the alpha 
separation, alpha compaction, and indexing transformations can cause the 
recovered reference image to have an alpha sample depth different from the 
original reference image, or to have no alpha channel. This has no effect on the
 degree of opacity of any pixel. The two reference images are considered 
equivalent, and the transformations are considered lossless. Encoders that 
nevertheless wish to preserve the alpha sample depth may elect not to perform 
transformations that would alter the alpha sample depth.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P><A name="figure43">
<OBJECT data="figures/fig43.svg" width="640" type="image/svg+xml" height="525">
<IMG alt="Figure 4.3: Reference image to PNG&#10;image transformation" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig43.png" 
width="640" height="525"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.3 — Reference image to PNG image 
transformation</P>
<H3><A name="4Concepts.Implied-alpha">4.3.2 Alpha separation</A></H3>
<P>If all alpha samples in a reference image have the maximum value, then the 
alpha channel may be omitted, resulting in an equivalent image that can be 
encoded more compactly.</P>
<H3><A name="4Concepts.Indexing">4.3.3 Indexing</A></H3>
<P>If the number of distinct pixel values is 256 or less, and the RGB sample 
depths are not greater than 8, and the alpha channel is absent or exactly 8 bits 
deep or every pixel is either fully transparent or fully opaque, then an 
alternative representation called indexed-colour may be more efficient for 
encoding. Each pixel is replaced by an index into a palette. The palette is a 
list of entries each containing three 8-bit samples (red, green, blue). If an 
alpha channel is present, there is also a parallel table of 8-bit alpha
 samples.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P><A name="figure44">
<OBJECT data="figures/fig44.svg" width="660" type="image/svg+xml" 
height="450"><IMG alt="Figure 4.4: Indexed-colour&#10;image" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig44.png" 
width="660" height="450"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.4 — Indexed-colour image</P>
<P>A suggested palette or palettes may be constructed even when the PNG image is 
not indexed-colour in order to assist viewers that are capable of displaying 
only a limited number of colours.</P>
<P>For indexed-colour images, encoders can rearrange the palette so that the 
table entries with the maximum alpha value are grouped at the end. In this case 
the table can be encoded in a shortened form that does not include these 
entries.</P>
<H3><A name="4Concepts.RGBMerging">4.3.4 RGB merging</A></H3>
<P>If the red, green, and blue channels have the same sample depth, and for each 
pixel the values of the red, green, and blue samples are equal, then these three 
channels may be merged into a single greyscale channel.</P>
<H3><A name="4Concepts.Alpha-indexing">4.3.5 Alpha compaction</A></H3>
<P>For non-indexed images, if there exists an RGB (or greyscale) value such that 
all pixels with that value are fully transparent while all other pixels are 
fully opaque, then the alpha channel can be represented more compactly by merely 
identifying the RGB (or greyscale) value that is transparent.</P>
<H3><A name="4Concepts.Scaling">4.3.6 Sample depth scaling</A></H3>
<P>In the PNG image, not all sample depths are supported (see 6.1: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#6Colour-values"><SPAN 
class="xref">Colour types and values</SPAN></A>), and all channels shall have 
the same sample depth. All channels of the PNG image use the smallest allowable 
sample depth that is not less than any sample depth in the reference image, and 
the possible sample values in the reference image are linearly mapped into the 
next allowable range for the PNG image. <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure45"><SPAN 
class="figref">Figure 4.5</SPAN></A> shows how samples of depth 3 might be 
mapped into samples of depth 4.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P><A name="figure45">
<OBJECT data="figures/fig45.svg" width="640" type="image/svg+xml" 
height="320"><IMG alt="Figure 4.5: Scaling sample&#10;values" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig45.png" 
width="640" height="320"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.5 — Scaling sample values</P>
<P>Allowing only a few sample depths reduces the number of cases that decoders 
have to cope with. Sample depth scaling is reversible with no loss of data, 
because the reference image sample depths can be recorded in the PNG datastream. 
In the absence of recorded sample depths, the reference image sample depth 
equals the PNG image sample depth. See 12.5: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Sample-depth-scaling"><SPAN 
class="xref">Sample depth scaling</SPAN></A> and 13.12: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Sample-depth-rescaling"><SPAN 
class="xref">Sample depth rescaling</SPAN></A>.</P>
<P><A name="figure46">
<OBJECT data="figures/fig46.svg" width="660" type="image/svg+xml" 
height="450"><IMG alt="Figure 4.6: Possible PNG image&#10;pixel types" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig46.png" 
width="660" height="450"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.6 — Possible PNG image pixel types</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="4Concepts.PNGImage">4.4 PNG image</A></H2>
<P>The transformation of the reference image results in one of five types of PNG 
image (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure46"><SPAN 
class="figref">figure 4.6</SPAN></A>) :</P><!-- <ol start="1"> -->
<OL>
  <LI>Truecolour with alpha: each pixel consists of four samples: red, green, 
  blue, and alpha.</LI>
  <LI>Greyscale with alpha: each pixel consists of two samples: grey and 
  alpha.</LI>
  <LI>Truecolour: each pixel consists of three samples: red, green, and blue. 
  The alpha channel may be represented by a single pixel value. Matching pixels 
  are fully transparent, and all others are fully opaque. If the alpha channel 
  is not represented in this way, all pixels are fully opaque.</LI>
  <LI>Greyscale: each pixel consists of a single sample: grey. The alpha channel 
  may be represented by a single pixel value as in the previous case. If the 
  alpha channel is not represented in this way, all pixels are fully 
opaque.</LI>
  <LI>Indexed-colour: each pixel consists of an index into a palette (and into 
  an associated table of alpha values, if present).</LI></OL>
<P>The format of each pixel depends on the PNG image type and the bit depth. For 
PNG image types other than indexed-colour, the bit depth specifies the number of 
bits per sample, not the total number of bits per pixel. For indexed-colour 
images, the bit depth specifies the number of bits in each palette index, not 
the sample depth of the colours in the palette or alpha table. Within the pixel 
the samples appear in the following order, depending on the PNG image type.</P><!-- <ol start="6"> -->
<OL>
  <LI>Truecolour with alpha: red, green, blue, alpha.</LI>
  <LI>Greyscale with alpha: grey, alpha.</LI>
  <LI>Truecolour: red, green, blue.</LI>
  <LI>Greyscale: grey.</LI>
  <LI>Indexed-colour: palette index.</LI></OL>
<H2><A name="4Concepts.Encoding">4.5 Encoding the PNG image</A></H2>
<H3><A name="4Concepts.EncodingIntro">4.5.1 Introduction</A></H3>
<P>A conceptual model of the process of encoding a PNG image is given in <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure47"><SPAN 
class="figref">figure 4.7</SPAN></A>. The steps refer to the operations on the 
array of pixels or indices in the PNG image. The palette and alpha table are not 
encoded in this way.</P><!-- <ol start="1"> -->
<OL>
  <LI>Pass extraction: to allow for progressive display, the PNG image pixels 
  can be rearranged to form several smaller images called reduced images or 
  passes.</LI>
  <LI>Scanline serialization: the image is serialized a scanline at a time. 
  Pixels are ordered left to right in a scanline and scanlines are ordered top 
  to bottom.</LI>
  <LI>Filtering: each scanline is transformed into a filtered scanline using one 
  of the defined filter types to prepare the scanline for image 
compression.</LI>
  <LI>Compression: occurs on all the filtered scanlines in the image.</LI>
  <LI>Chunking: the compressed image is divided into conveniently sized chunks. 
  An error detection code is added to each chunk.</LI>
  <LI>Datastream construction: the chunks are inserted into the datastream.</LI>
</OL>
<H3><A name="4Concepts.EncodingPassAbs">4.5.2 Pass extraction</A></H3>
<P>Pass extraction (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure48"><SPAN 
class="figref">figure 4.8</SPAN></A>) splits a PNG image into a sequence of 
reduced images where the first image defines a coarse view and subsequent images 
enhance this coarse view until the last image completes the PNG image. The set 
of reduced images is also called an interlaced PNG image. Two interlace methods 
are defined in this International Standard. The first method is a null method; 
pixels are stored sequentially from left to right and scanlines from top to 
bottom. The second method makes multiple scans over the image to produce a 
sequence of seven reduced images. The seven passes for a sample image are
 illustrated in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure48"><SPAN 
class="figref">figure 4.8</SPAN></A>. See clause&nbsp;8: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#8Interlace"><SPAN 
class="xref">Interlacing and pass extraction</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P><A name="figure47">
<OBJECT data="figures/fig47.svg" width="645" type="image/svg+xml" 
height="575"><IMG alt="Figure 4.7: Encoding the PNG&#10;image" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig47.png" 
width="645" height="575"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.7 — Encoding the PNG image</P>
<P><A name="figure48">
<OBJECT data="figures/fig48.svg" width="645" type="image/svg+xml" 
height="450"><IMG alt="Figure 4.8: Pass extraction" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig48.png" 
width="645" height="450"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.8 — Pass extraction</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H3><A name="4Concepts.EncodingScanlineAbs">4.5.3 Scanline
 serialization</A></H3>
<P>Each row of pixels, called a scanline, is represented as a sequence of 
bytes.</P>
<H3><A name="4Concepts.EncodingFiltering">4.5.4 Filtering</A></H3>
<P>PNG standardizes one filter method and several filter types that may be used 
to prepare image data for compression. It transforms the byte sequence in a 
scanline to an equal length sequence of bytes preceded by a filter type byte 
(see <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure49"><SPAN 
class="figref">figure 4.9</SPAN></A> for an example). The filter type byte 
defines the specific filtering to be applied to a specific scanline. The encoder 
shall use only a single filter method for an interlaced PNG image, but may use 
different filter types for each scanline in a reduced image. See clause&nbsp;9: 
<A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filters"><SPAN 
class="xref">Filtering</SPAN></A>.</P>
<P><A name="figure49">
<OBJECT data="figures/fig49.svg" width="710" type="image/svg+xml" 
height="340"><IMG alt="Figure 4.9: Serializing and&#10;filtering a scanline" 
src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig49.png" 
width="710" height="340"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.9 — Serializing and filtering a scanline</P>
<H3><A name="4Concepts.EncodingCompression">4.5.5 Compression</A></H3>
<P>The sequence of filtered scanlines in the pass or passes of the PNG image is 
compressed (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure410"><SPAN 
class="figref">figure 4.10</SPAN></A>) by one of the defined compression 
methods. The concatenated filtered scanlines form the input to the compression 
stage. The output from the compression stage is a single compressed datastream. 
See clause&nbsp;10: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10Compression"><SPAN 
class="xref">Compression</SPAN></A>.</P>
<H3><A name="4Concepts.EncodingChunking">4.5.6 Chunking</A></H3>
<P>Chunking provides a convenient breakdown of the compressed datastream into 
manageable chunks (see <SPAN class="figref"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure410">figure 
4.10</A></SPAN>). Each chunk has its own redundancy check. See clause&nbsp;11: 
<A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Chunks"><SPAN 
class="xref">Chunk specifications</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P><A name="figure410">
<OBJECT data="figures/fig410.svg" width="700" type="image/svg+xml" 
height="450"><IMG alt="Figure 4.10: Compression" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig410.png" 
width="700" height="450"></OBJECT></A></P>
<P class="Figuretitle">Figure 4.10 — Compression</P>
<H2><A name="4Concepts.AncillInfo">4.6 Additional information</A></H2>
<P>Ancillary information may be associated with an image. Decoders may ignore 
all or some of the ancillary information. The types of ancillary information 
provided are described in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table41"><SPAN 
class="tabref">Table 4.1</SPAN></A>.</P>
<TABLE class="Regular" summary="This table lists the types of ancillary information that may be associated with an image">
  <CAPTION><A name="table41"><B>Table 4.1 — Types of ancillary 
  information</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>Type of information</TH>
    <TH>Description</TH></TR>
  <TR>
    <TD class="Regular">Background colour</TD>
    <TD class="Regular">Solid background colour to be used when presenting the 
      image if no better option is available.</TD></TR>
  <TR>
    <TD class="Regular">Gamma and chromaticity</TD>
    <TD class="Regular">Gamma characteristic of the image with respect to the 
      desired output intensity, and chromaticity characteristics of the RGB
       values used in the image.</TD></TR>
  <TR>
    <TD class="Regular">ICC profile</TD>
    <TD class="Regular">Description of the colour space (in the form of an
       International Color Consortium (ICC) profile) to which the samples in the 
      image conform.</TD></TR>
  <TR>
    <TD class="Regular">Image histogram</TD>
    <TD class="Regular">Estimates of how frequently the image uses each 
      palette entry.</TD></TR>
  <TR>
    <TD class="Regular">Physical pixel dimensions</TD>
    <TD class="Regular">Intended pixel size and aspect ratio to be used in 
      presenting the PNG image.</TD></TR>
  <TR>
    <TD class="Regular">Significant bits</TD>
    <TD class="Regular">The number of bits that are significant in the 
    samples.</TD></TR>
  <TR>
    <TD class="Regular">sRGB colour space</TD>
    <TD class="Regular">A rendering intent (as defined by the International 
      Color Consortium) and an indication that the image samples conform to this 
      colour space.</TD></TR>
  <TR>
    <TD class="Regular">Suggested palette</TD>
    <TD class="Regular">A reduced palette that may be used when the display 
      device is not capable of displaying the full range of colours in the
     image.</TD></TR>
  <TR>
    <TD class="Regular">Textual data</TD>
    <TD class="Regular">Textual information (which may be compressed) 
      associated with the image.</TD></TR>
  <TR>
    <TD class="Regular">Time</TD>
    <TD class="Regular">The time when the PNG image was last modified.</TD></TR>
  <TR>
    <TD class="Regular">Transparency</TD>
    <TD class="Regular">Alpha information that allows the reference image to 
      be reconstructed when the alpha channel is not retained in the PNG
     image.</TD></TR></TBODY></TABLE><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="4Concepts.Format">4.7 PNG datastream</A></H2>
<H3><A name="4Concepts.FormatChunks">4.7.1 Chunks</A></H3>
<P>The PNG datastream consists of a PNG signature (see 5.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5PNG-file-signature"><SPAN 
class="xref">PNG signature</SPAN></A>) followed by a sequence of chunks (see
 clause&nbsp;11: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Chunks"><SPAN 
class="xref">Chunk specifications</SPAN></A>). Each chunk has a chunk type which
 specifies its function.</P>
<H3><A name="4Concepts.FormatTypes">4.7.2 Chunk types</A></H3>
<P>There are 18 chunk types defined in this International Standard. Chunk types 
are four-byte sequences chosen so that they correspond to readable labels when 
interpreted in the ISO 646.IRV:1991 character set. The first four are termed 
critical chunks, which shall be understood and correctly interpreted according 
to the provisions of this International Standard. These are:</P><!-- <ol start="1"> -->
<OL>
  <LI><A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="chunk">IHDR</SPAN></A>: image header, which is the first chunk in a PNG 
  datastream.</LI>
  <LI><A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
  class="chunk">PLTE</SPAN></A>: palette table associated with indexed PNG 
  images.</LI>
  <LI><A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A>: image data chunks.</LI>
  <LI><A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
  class="chunk">IEND</SPAN></A>: image trailer, which is the last chunk in a PNG 
  datastream.</LI></OL>
<P>The remaining 14 chunk types are termed ancillary chunk types, which encoders 
may generate and decoders may interpret.</P><!-- <ol start="5"> -->
<OL>
  <LI>Transparency information: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
  class="chunk">tRNS</SPAN></A> (see 11.3.2: <A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11transinfo">Transparency 
  information</A>).</LI>
  <LI>Colour space information: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
  class="chunk">cHRM</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
  class="chunk">gAMA</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
  class="chunk">iCCP</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
  class="chunk">sBIT</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
  class="chunk">sRGB</SPAN></A> (see 11.3.3: <A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11addnlcolinfo">Colour 
  space information</A>).</LI>
  <LI>Textual information: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
  class="chunk">iTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
  class="chunk">tEXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
  class="chunk">zTXt</SPAN></A> (see 11.3.4: <A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11textinfo">Textual 
  information</A>).</LI>
  <LI>Miscellaneous information: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
  class="chunk">bKGD</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
  class="chunk">hIST</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs"><SPAN 
  class="chunk">pHYs</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A> (see 11.3.5: <A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11addnlsiinfo">Miscellaneous 
  information</A>).</LI>
  <LI>Time information: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tIME"><SPAN 
  class="chunk">tIME</SPAN></A> (see 11.3.6: <A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11timestampinfo">Time 
  stamp information</A>).</LI></OL>
<H2><A name="4Concepts.Errors">4.8 Error handling</A></H2>
<P>Errors in a PNG datastream fall into two general classes:</P><!-- <ol start="1"> -->
<OL>
  <LI>transmission errors or damage to a computer file system, which tend to 
  corrupt much or all of the datastream;</LI>
  <LI>syntax errors, which appear as invalid values in chunks, or as missing or 
  misplaced chunks. Syntax errors can be caused not only by encoding mistakes, 
  but also by the use of registered or private values, if those values are 
  unknown to the decoder.</LI></OL>
<P>PNG decoders should detect errors as early as possible, recover from errors 
whenever possible, and fail gracefully otherwise. The error handling philosophy 
is described in detail in 13.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoders.Errors"><SPAN 
class="xref">Error handling</SPAN></A>.</P>
<H2><A name="4Concepts.Registration">4.9 Extension and registration</A></H2>
<P>For some facilities in PNG, there are a number of alternatives defined, and 
this International Standard allows other alternatives to be defined by 
registration. According to the rules for the designation and operation of 
registration authorities in the ISO/IEC Directives, the ISO and IEC Councils
 have designated the following as the registration authority:</P>
<ADDRESS>The World-Wide Web Consortium Host at ERCIM</ADDRESS>
<ADDRESS>The Registration Authority for PNG</ADDRESS>
<ADDRESS>INRIA- Sophia Antipolis</ADDRESS>
<ADDRESS>BP 93</ADDRESS>
<ADDRESS>06902 Sophia Antipolis Cedex</ADDRESS>
<ADDRESS>FRANCE</ADDRESS>
<ADDRESS>Email:png-group@w3.org</ADDRESS>
<P>To ensure timely processing the Registration Authority should be contacted by 
email.</P>
<P>The following entities may be registered:</P><!-- <ol start="1"> -->
<OL>
  <LI>chunk type;</LI>
  <LI>text keyword.</LI></OL>
<P>The following entities are reserved for future standardization:</P><!-- <ol start="4"> -->
<OL>
  <LI>undefined field values less than 128;</LI>
  <LI>filter method;</LI>
  <LI>filter type;</LI>
  <LI>interlace method;</LI>
  <LI>compression method.</LI></OL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="5DataRep">5 Datastream structure</A></H1>
<H2><A name="5Introduction">5.1 Introduction</A></H2>
<P>This clause defines the PNG signature and the basic properties of chunks. 
Individual chunk types are discussed in clause&nbsp;11: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Chunks"><SPAN 
class="xref">Chunk specifications</SPAN></A>.</P>
<H2><A name="5PNG-file-signature">5.2 PNG signature</A></H2>
<P>The first eight bytes of a PNG datastream always contain the following 
(decimal) values:</P><PRE>   137 80 78 71 13 10 26 10
</PRE>
<P>This signature indicates that the remainder of the datastream contains a 
single PNG image, consisting of a series of chunks beginning with an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk and ending with an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A> chunk.</P>
<H2><A name="5Chunk-layout">5.3 Chunk layout</A></H2>
<P>Each chunk consists of three or four fields (see figure 5.1). The meaning of 
the fields is described in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table51"><SPAN 
class="tabref">Table 5.1</SPAN></A>. The chunk data field may be empty.</P>
<P><A name="figure411">
<OBJECT data="figures/fig51.svg" width="480" type="image/svg+xml" 
height="160"><IMG alt="Figure 5.1: Chunk parts" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig51.png" 
width="480" height="160"></OBJECT></A></P>
<P class="Figuretitle">Figure 5.1 — Chunk parts</P>
<TABLE class="Regular" summary="This table defines the chunk fields">
  <CAPTION><A name="table51"><B>Table 5.1 — Chunk fields</B></A></CAPTION>
  <TBODY>
  <TR>
    <TD class="Regular">Length</TD>
    <TD class="Regular">A four-byte unsigned integer giving the number of 
      bytes in the chunk's data field. The length counts <STRONG>only</STRONG>
      the data field, <STRONG>not</STRONG> itself, the chunk type, or the CRC. 
      Zero is a valid length. Although encoders and decoders should treat the 
      length as unsigned, its value shall not exceed 2<SUP>31</SUP>-1 bytes.</TD>
  </TR>
  <TR>
    <TD class="Regular">Chunk Type</TD>
    <TD class="Regular">A sequence of four bytes defining the chunk type. Each 
      byte of a chunk type is restricted to the decimal values 65 to 90 and 97 
      to 122. These correspond to the uppercase and lowercase ISO 646 letters 
      (<TT>A</TT>-<TT>Z</TT> and <TT>a</TT>-<TT>z</TT>) respectively for 
      convenience in description and examination of PNG datastreams. Encoders 
      and decoders shall treat the chunk types as fixed binary values, not 
      character strings. For example, it would not be correct to represent the 
      chunk type <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> by the equivalents of those letters in the 
      UCS 2 character set. Additional naming conventions for chunk types are 
      discussed in 5.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
      class="xref">Chunk naming conventions</SPAN></A>.</TD></TR>
  <TR>
    <TD class="Regular">Chunk Data</TD>
    <TD class="Regular">The data bytes appropriate to the chunk type, if any. 
      This field can be of zero length.</TD></TR>
  <TR>
    <TD class="Regular">CRC</TD>
    <TD class="Regular">A four-byte CRC (Cyclic Redundancy Code) calculated on 
      the preceding bytes in the chunk, including the chunk type field and chunk 
      data fields, but <STRONG>not</STRONG> including the length field. The CRC 
      can be used to check for corruption of the data. The CRC is always 
      present, even for chunks containing no data. See 5.5: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5CRC-algorithm"><SPAN 
      class="xref">Cyclic Redundancy Code algorithm</SPAN></A>.</TD></TR>
</TBODY></TABLE>
<P>The chunk data length may be any number of bytes up to the maximum; 
therefore, implementors cannot assume that chunks are aligned on any boundaries 
larger than bytes.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="5Chunk-naming-conventions">5.4 Chunk naming conventions</A></H2>
<P>Chunk types are chosen to be meaningful names when the bytes of the chunk 
type are interpreted as ISO 646 letters. Chunk types are assigned so that a 
decoder can determine some properties of a chunk even when the type is not 
recognized. These rules allow safe, flexible extension of the PNG format, by 
allowing a PNG decoder to decide what to do when it encounters an unknown chunk.
 (The chunk types standardized in this International Standard are defined in 
clause&nbsp;11: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11Chunks"><SPAN 
class="xref">Chunk specifications</SPAN></A>, and the way to add non-standard 
chunks is defined in clause&nbsp;14: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14EditorsExt"><SPAN 
class="xref">Editors and extensions</SPAN></A>.) The naming rules are normally 
of interest only when the decoder does not recognize the chunk's type.</P>
<P>Four bits of the chunk type, the property bits, namely bit 5 (value 32) of 
each byte, are used to convey chunk properties. This choice means that a human 
can read off the assigned properties according to whether the letter 
corresponding to each byte of the chunk type is uppercase (bit 5 is 0) or 
lowercase (bit 5 is 1). However, decoders should test the properties of an
 unknown chunk type by numerically testing the specified bits; testing whether a 
character is uppercase or lowercase is inefficient, and even incorrect if a 
locale-specific case definition is used.</P>
<P>The property bits are an inherent part of the chunk type, and hence are fixed 
for any chunk type. Thus, <SPAN class="chunk">CHNK</SPAN> and <SPAN class="chunk">cHNk</SPAN> 
would be unrelated chunk types, not the same chunk with different
 properties.</P>
<P>The semantics of the property bits are defined in<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table52"><SPAN 
class="tabref">Table 5.2</SPAN></A>.</P>
<TABLE class="Regular" summary="This table defines the semantics of the property bits">
  <CAPTION><A name="table52"><B>Table 5.2 — Semantics of property 
  bits</B></A></CAPTION>
  <TBODY>
  <TR>
    <TD class="Regular">Ancillary bit: first byte</TD>
    <TD class="Regular">0 (uppercase) = critical,<BR class="xhtml"> 1 
      (lowercase) = ancillary.</TD>
    <TD class="Regular">Critical chunks are necessary for successful display 
      of the contents of the datastream, for example the image header chunk (<A 
      href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
      class="chunk">IHDR</SPAN></A>). A decoder trying to extract the image, 
      upon encountering an unknown chunk type in which the ancillary bit is 0, 
      shall indicate to the user that the image contains information it cannot 
      safely interpret.<BR class="xhtml"> Ancillary chunks are not strictly 
      necessary in order to meaningfully display the contents of the datastream, 
      for example the time chunk (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tIME"><SPAN 
      class="chunk">tIME</SPAN></A>). A decoder encountering an unknown chunk
       type in which the ancillary bit is 1 can safely ignore the chunk and 
      proceed to display the image.</TD></TR>
  <TR>
    <TD class="Regular">Private bit: second byte</TD>
    <TD class="Regular">0 (uppercase) = public,<BR class="xhtml"> 1 
      (lowercase) = private.</TD>
    <TD class="Regular">A public chunk is one that is defined in this 
      International Standard or is registered in the list of PNG special-purpose
       public chunk types maintained by the Registration Authority (see 4.9 <A 
      href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
      class="xref">Extension and registration</SPAN></A>). Applications can also 
      define private (unregistered) chunk types for their own purposes. The 
      names of private chunks have a lowercase second letter, while public 
      chunks will always be assigned names with uppercase second letters. 
      Decoders do not need to test the private-chunk property bit, since it has 
      no functional significance; it is simply an administrative convenience to
       ensure that public and private chunk names will not conflict. See
       clause&nbsp;14: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14EditorsExt"><SPAN 
      class="xref">Editors and extensions</SPAN></A> and 12.10.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Use-of-private-chunks"><SPAN 
      class="xref">Use of private chunks</SPAN></A>.</TD></TR>
  <TR>
    <TD class="Regular">Reserved bit: third byte</TD>
    <TD class="Regular">0 (uppercase) in this version of PNG.<BR 
      class="xhtml"> If the reserved bit is 1, the datastream does not conform 
      to this version of PNG.</TD>
    <TD class="Regular">The significance of the case of the third letter of 
      the chunk name is reserved for possible future extension. In this
       International Standard, all chunk names shall have uppercase third 
      letters.</TD></TR>
  <TR>
    <TD class="Regular">Safe-to-copy bit: fourth byte</TD>
    <TD class="Regular">0 (uppercase) = unsafe to copy,<BR class="xhtml">1 
      (lowercase) = safe to copy.</TD>
    <TD class="Regular">This property bit is not of interest to pure decoders, 
      but it is needed by PNG editors. This bit defines the proper handling of
       unrecognized chunks in a datastream that is being modified. Rules for PNG 
      editors are discussed further in 14.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14Ordering"><SPAN 
      class="xref">Behaviour of PNG editors</SPAN></A>.</TD></TR></TBODY></TABLE>
<P>EXAMPLE The hypothetical chunk type "<SPAN class="chunk">cHNk</SPAN>" has the 
property bits:</P><PRE>   cHNk  &lt;-- 32 bit chunk type represented in text form
   ||||
   |||+- Safe-to-copy bit is 1 (lower case letter; bit 5 is 1)
   ||+-- Reserved bit is 0     (upper case letter; bit 5 is 0)
   |+--- Private bit is 0      (upper case letter; bit 5 is 0)
   +---- Ancillary bit is 1    (lower case letter; bit 5 is 1)
</PRE>
<P>Therefore, this name represents an ancillary, public, safe-to-copy chunk.</P>
<H2><A name="5CRC-algorithm">5.5 Cyclic Redundancy Code algorithm</A></H2>
<P>CRC fields are calculated using standardized CRC methods with pre and post 
conditioning, as defined by ISO 3309 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-3309"><SPAN 
class="NormRef">[ISO-3309]</SPAN></A> and ITU-T V.42 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ITU-T-V42"><SPAN 
class="bibref">[ITU-T-V42]</SPAN></A>. The CRC polynomial employed is</P>
<P>x<SUP>32</SUP> + x<SUP>26</SUP> + x<SUP>23</SUP> + x<SUP>22</SUP> + 
x<SUP>16</SUP> + x<SUP>12</SUP> + x<SUP>11</SUP>+ x<SUP>10</SUP> + x<SUP>8</SUP> 
+ x<SUP>7</SUP> + x<SUP>5</SUP>+ x<SUP>4</SUP> + x<SUP>2</SUP> + x + 1</P>
<P>In PNG, the 32-bit CRC is initialized to all 1's, and then the data from each 
byte is processed from the least significant bit (1) to the most significant bit 
(128). After all the data bytes are processed, the CRC is inverted (its ones 
complement is taken). This value is transmitted (stored in the datastream) MSB
 first. For the purpose of separating into bytes and ordering, the least 
significant bit of the 32-bit CRC is defined to be the coefficient of the 
<TT>x<SUP>31</SUP></TT> term.</P>
<P>Practical calculation of the CRC often employs a precalculated table to 
accelerate the computation. See Annex D: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#D-CRCAppendix"><SPAN 
class="xref">Sample Cyclic Redundancy Code implementation</SPAN></A>.</P>
<H2><A name="5ChunkOrdering">5.6 Chunk ordering</A></H2>
<P>The constraints on the positioning of the individual chunks are listed in <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table53"><SPAN 
class="tabref">Table 5.3</SPAN></A> and illustrated diagrammatically in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure52"><SPAN 
class="figref">figure 5.2</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure53"><SPAN 
class="figref">figure 5.3</SPAN></A>. These lattice diagrams represent the 
constraints on positioning imposed by this International Standard. The lines in 
the diagrams define partial ordering relationships. Chunks higher up shall
 appear before chunks lower down. Chunks which are horizontally aligned and 
appear between two other chunk types (higher and lower than the horizontally 
aligned chunks) may appear in any order between the two higher and lower chunk 
types to which they are connected. The superscript associated with the chunk 
type is defined in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table54"><SPAN 
class="tabref">Table 5.4</SPAN></A>. It indicates whether the chunk is 
mandatory, optional, or may appear more than once. A vertical bar between two 
chunk types indicates alternatives.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<TABLE class="Regular" summary="This table lists the chunk ordering rules">
  <CAPTION><A name="table53"><B>Table 5.3 — Chunk ordering
   rules</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH colSpan="3">Critical chunks<BR class="xhtml"> (shall appear in this 
      order, except <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A> is optional)</TH></TR>
  <TR>
    <TH>Chunk name</TH>
    <TH>Multiple allowed</TH>
    <TH>Ordering constraints</TH></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
      class="chunk">IHDR</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Shall be first</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before first <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> </TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> </TD>
    <TD class="Regular">Yes</TD>
    <TD class="Regular">Multiple <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> chunks shall be consecutive</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
      class="chunk">IEND</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Shall be last</TD></TR>
  <TR>
    <TH colSpan="3">Ancillary chunks<BR class="xhtml"> (need not appear in 
      this order)</TH></TR>
  <TR>
    <TH>Chunk name</TH>
    <TH>Multiple allowed</TH>
    <TH>Ordering constraints</TH></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
      class="chunk">cHRM</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> </TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
      class="chunk">gAMA</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> </TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
      class="chunk">iCCP</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A>. If the<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
      class="chunk">iCCP</SPAN></A> chunk is present, the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
      class="chunk">sRGB</SPAN></A> chunk should not be present.</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
      class="chunk">sBIT</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A> </TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
      class="chunk">sRGB</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A>. If the<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
      class="chunk">sRGB</SPAN></A> chunk is present, the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
      class="chunk">iCCP</SPAN></A> chunk should not be present.</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
      class="chunk">bKGD</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">After <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>; before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A></TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
      class="chunk">hIST</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">After <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>; before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A></TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
      class="chunk">tRNS</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">After <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A>; before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A></TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs"><SPAN 
      class="chunk">pHYs</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A></TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
      class="chunk">sPLT</SPAN></A> </TD>
    <TD class="Regular">Yes</TD>
    <TD class="Regular">Before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
      class="chunk">IDAT</SPAN></A></TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tIME"><SPAN 
      class="chunk">tIME</SPAN></A> </TD>
    <TD class="Regular">No</TD>
    <TD class="Regular">None</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
      class="chunk">iTXt</SPAN></A> </TD>
    <TD class="Regular">Yes</TD>
    <TD class="Regular">None</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
      class="chunk">tEXt</SPAN></A> </TD>
    <TD class="Regular">Yes</TD>
    <TD class="Regular">None</TD></TR>
  <TR>
    <TD class="Regular"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
      class="chunk">zTXt</SPAN></A> </TD>
    <TD class="Regular">Yes</TD>
    <TD class="Regular">None</TD></TR></TBODY></TABLE>
<TABLE class="Regular" summary="This table lists the symbols used in lattice diagrams">
  <CAPTION><A name="table54"><B>Table 5.4 — Meaning of symbols used in lattice 
  diagrams</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>Symbol</TH>
    <TH>Meaning</TH></TR>
  <TR>
    <TD class="Regular">+</TD>
    <TD class="Regular">One or more</TD></TR>
  <TR>
    <TD class="Regular">1</TD>
    <TD class="Regular">Only one</TD></TR>
  <TR>
    <TD class="Regular">?</TD>
    <TD class="Regular">Zero or one</TD></TR>
  <TR>
    <TD class="Regular">*</TD>
    <TD class="Regular">Zero or more</TD></TR>
  <TR>
    <TD class="Regular">|</TD>
    <TD class="Regular">Alternative</TD></TR></TBODY></TABLE><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>
<OBJECT data="figures/fig52.svg" width="800" type="image/svg+xml" 
height="540"><IMG alt="Figure 5.2: Lattice diagram: PNG images with PLTE in datastream" 
src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig52.png" 
width="800" height="540"></OBJECT></P>
<P class="Figuretitle"><A name="figure52">Figure 5.2 —</A>Lattice diagram: PNG 
images with <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> in datastream</P>
<P>
<OBJECT data="figures/fig53.svg" width="900" type="image/svg+xml" 
height="540"><IMG alt="Figure 5.3: Lattice diagram: PNG images without PLTE in datastream" 
src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig53.png" 
width="900" height="540"></OBJECT></P>
<P class="Figuretitle"><A name="figure53">Figure 5.3 —</A>Lattice diagram: PNG 
images without <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> in datastream</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="6Transformation">6 Reference image to PNG image
 transformation</A></H1>
<H2><A name="6Colour-values">6.1 Colour types and values</A></H2>
<P>As explained in 4.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.PNGImage"><SPAN 
class="xref">PNG image</SPAN></A> there are five types of PNG image. 
Corresponding to each type is a colour type, which is the sum of the following 
values: 1 (palette used), 2 (truecolour used) and 4 (alpha used). Greyscale and 
truecolour images may have an explicit alpha channel. The PNG image types and
 corresponding colour types are listed in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table6.1"><SPAN 
class="tabref">Table 6.1</SPAN></A>.</P>
<TABLE class="Regular" 
  summary="This table lists the PNG image and colour types">
  <CAPTION><A name="table6.1"><B>Table 6.1 — PNG image types and colour 
  types</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>PNG image type</TH>
    <TH>Colour type</TH></TR>
  <TR>
    <TD class="Regular">Greyscale</TD>
    <TD class="Regular">0</TD></TR>
  <TR>
    <TD class="Regular">Truecolour</TD>
    <TD class="Regular">2</TD></TR>
  <TR>
    <TD class="Regular">Indexed-colour</TD>
    <TD class="Regular">3</TD></TR>
  <TR>
    <TD class="Regular">Greyscale with alpha</TD>
    <TD class="Regular">4</TD></TR>
  <TR>
    <TD class="Regular">Truecolour with alpha</TD>
    <TD class="Regular">6</TD></TR></TBODY></TABLE>
<P>The allowed bit depths and sample depths for each PNG image type are listed 
in 11.2.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="xref"><SPAN class="chunk">IHDR</SPAN> Image header</SPAN></A>.</P>
<P>Greyscale samples represent luminance if the transfer curve is indicated (by 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A>, or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A>) or device-dependent greyscale if not. RGB samples 
represent calibrated colour information if the colour space is indicated (by <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A>, or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A>, or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A>) or uncalibrated device-dependent colour if 
not.</P>
<P>Sample values are not necessarily proportional to light intensity; the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk specifies the relationship between sample 
values and display output intensity. Viewers are strongly encouraged to 
compensate properly. See 4.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.ColourSpaces"><SPAN 
class="xref">Colour spaces</SPAN></A>, 13.13: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-gamma-handling"><SPAN 
class="xref">Decoder gamma handling</SPAN></A> and Annex C: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A>.</P>
<H2><A name="6AlphaRepresentation">6.2 Alpha representation</A></H2>
<P>In a PNG datastream transparency may be represented in one of four ways, 
depending on the PNG image type (see 4.3.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Implied-alpha"><SPAN 
class="xref">Alpha separation</SPAN></A> and 4.3.5: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Alpha-indexing"><SPAN 
class="xref">Alpha compaction</SPAN></A>).</P><!-- <ol start="1"> -->
<OL>
  <LI>Truecolour with alpha, greyscale with alpha: an alpha channel is part of 
  the image array.</LI>
  <LI>Truecolour, greyscale: A <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
  class="chunk">tRNS</SPAN></A> chunk contains a single pixel value
   distinguishing the fully transparent pixels from the fully opaque
 pixels.</LI>
  <LI>Indexed-colour: A <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
  class="chunk">tRNS</SPAN></A> chunk contains the alpha table that associates 
  an alpha sample with each palette entry.</LI>
  <LI>Truecolour, greyscale, indexed-colour: there is no <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
  class="chunk">tRNS</SPAN></A> chunk present and all pixels are fully 
  opaque.</LI></OL>
<P>An alpha channel included in the image array has 8-bit or 16-bit samples, the 
same size as the other samples. The alpha sample for each pixel is stored 
immediately following the greyscale or RGB samples of the pixel. An alpha value 
of zero represents full transparency, and a value of 2<SUP>sampledepth</SUP> - 1 
represents full opacity. Intermediate values indicate partially transparent 
pixels that can be composited against a background image to yield the delivered
 image.</P>
<P>The colour values in a pixel are not premultiplied by the alpha value 
assigned to the pixel. This rule is sometimes called "unassociated" or 
"non-premultiplied" alpha. (Another common technique is to store sample values 
premultiplied by the alpha value; in effect, such an image is already composited 
against a black background. PNG does <STRONG>not</STRONG> use premultiplied 
alpha. In consequence an image editor can take a PNG image and easily change its 
transparency.) See 12.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Alpha-channel-creation"><SPAN 
class="xref">Alpha channel creation</SPAN></A> and 13.16: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Alpha-channel-processing"><SPAN 
class="xref">Alpha channel processing</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="7Transformation">7 Encoding the PNG image as a PNG
 datastream</A></H1>
<H2><A name="7Integers-and-byte-order">7.1 Integers and byte order</A></H2>
<P>All integers that require more than one byte shall be in network byte order 
(as illustrated in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure71"><SPAN 
class="figref">figure 7.1</SPAN></A>): the most significant byte comes first, 
then the less significant bytes in descending order of significance (MSB LSB for 
two-byte integers, MSB B2 B1 LSB for four-byte integers). The highest bit (value 
128) of a byte is numbered bit 7; the lowest bit (value 1) is numbered bit 0.
 Values are unsigned unless otherwise noted. Values explicitly noted as signed 
are represented in two's complement notation.</P>
<P>PNG four-byte unsigned integers are limited to the range 0 to
 2<SUP>31</SUP>-1 to accommodate languages that have difficulty with unsigned 
four-byte values. Similarly PNG four-byte signed integers are limited to the 
range -(2<SUP>31</SUP>-1) to 2<SUP>31</SUP>-1 to accommodate languages that have 
difficulty with the value -2<SUP>31</SUP>.</P>
<P>
<OBJECT data="figures/fig71.svg" width="810" type="image/svg+xml" 
height="310"><IMG alt="Figure 7.1: Integer representation in PNG" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig71.png" 
width="810" height="310"></OBJECT></P>
<P class="Figuretitle"><A name="figure71">Figure 7.1</A> —Integer representation 
in PNG</P>
<H2><A name="7Scanline">7.2 Scanlines</A></H2>
<P>A PNG image (or pass, see clause&nbsp;8: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#8Interlace"><SPAN 
class="xref">Interlacing and pass extraction</SPAN></A>) is a rectangular pixel 
array, with pixels appearing left-to-right within each scanline, and scanlines
 appearing top-to-bottom. The size of each pixel is determined by the number of 
bits per pixel.</P>
<P>Pixels within a scanline are always packed into a sequence of bytes with no 
wasted bits between pixels. Scanlines always begin on byte boundaries. Permitted 
bit depths and colour types are restricted so that in all cases the packing is 
simple and efficient.</P>
<P>In PNG images of colour type 0 (greyscale) each pixel is a single sample, 
which may have precision less than a byte (1, 2, or 4 bits). These samples are 
packed into bytes with the leftmost sample in the high-order bits of a byte 
followed by the other samples for the scanline.</P>
<P>In PNG images of colour type 3 (indexed-colour) each pixel is a single 
palette index. These indices are packed into bytes in the same way as the 
samples for colour type 0.</P>
<P>When there are multiple pixels per byte, some low-order bits of the last byte 
of a scanline may go unused. The contents of these unused bits are not 
specified.</P>
<P>PNG images that are not indexed-colour images may have sample values with a 
bit depth of 16. Such sample values are in network byte order (MSB first, LSB 
second). PNG permits multi-sample pixels only with 8 and 16-bit samples, so 
multiple samples of a single pixel are never packed into one byte.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="7Filtering">7.3 Filtering</A></H2>
<P>PNG allows the scanline data to be <STRONG>filtered</STRONG> before it is 
compressed. Filtering can improve the compressibility of the data. The filter 
step itself results in a sequence of bytes of the same size as the incoming 
sequence, but in a different representation, preceded by a filter type byte. 
Filtering does not reduce the size of the actual scanline data. All PNG filters
 are strictly lossless.</P>
<P>Different filter types can be used for different scanlines, and the filter 
algorithm is specified for each scanline by a filter type byte. The filter type 
byte is not considered part of the image data, but it is included in the 
datastream sent to the compression step. An intelligent encoder can switch 
filters from one scanline to the next. The method for choosing which filter to
 employ is left to the encoder.</P>
<P>See clause&nbsp;9: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filters"><SPAN 
class="xref">Filtering</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="8Interlace">8 Interlacing and pass extraction</A></H1>
<H2><A name="8InterlaceIntro">8.1 Introduction</A></H2>
<P>Pass extraction (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure48"><SPAN 
class="figref">figure 4.8</SPAN></A>) splits a PNG image into a sequence of 
reduced images (the interlaced PNG image) where the first image defines a coarse 
view and subsequent images enhance this coarse view until the last image 
completes the PNG image. This allows progressive display of the interlaced PNG 
image by the decoder and allows images to "fade in" when they are being
 displayed on-the-fly. On average, interlacing slightly expands the datastream 
size, but it can give the user a meaningful display much more rapidly.</P>
<H2><A name="8InterlaceMethods">8.2 Interlace methods</A></H2>
<P>Two interlace methods are defined in this International Standard, methods 0 
and 1. Other values of interlace method are reserved for future standardization 
(see 4.9: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>).</P>
<P>With interlace method 0, the null method, pixels are extracted sequentially 
from left to right, and scanlines sequentially from top to bottom. The 
interlaced PNG image is a single reduced image.</P>
<P>Interlace method 1, known as Adam7, defines seven distinct passes over the 
image. Each pass transmits a subset of the pixels in the reference image. The 
pass in which each pixel is transmitted (numbered from 1 to 7) is defined by 
replicating the following 8-by-8 pattern over the entire image, starting at the
 upper left corner:</P><PRE>   1 6 4 6 2 6 4 6
   7 7 7 7 7 7 7 7
   5 6 5 6 5 6 5 6
   7 7 7 7 7 7 7 7
   3 6 4 6 3 6 4 6
   7 7 7 7 7 7 7 7
   5 6 5 6 5 6 5 6
   7 7 7 7 7 7 7 7
</PRE>
<P><A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure48"><SPAN 
class="figref">Figure 4.8</SPAN></A>shows the seven passes of interlace method 
1. Within each pass, the selected pixels are transmitted left to right within a
 scanline, and selected scanlines sequentially from top to bottom. For example, 
pass 2 contains pixels 4, 12, 20, etc. of scanlines 0, 8, 16, etc. (where 
scanline 0, pixel 0 is the upper left corner). The last pass contains all of 
scanlines 1, 3, 5, etc. The transmission order is defined so that all the 
scanlines transmitted in a pass will have the same number of pixels; this is 
necessary for proper application of some of the filters. The interlaced PNG 
image consists of a sequence of seven reduced images. For example, if the PNG 
image is 16 by 16 pixels, then the third pass will be a reduced image of two 
scanlines, each containing four pixels (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#figure48"><SPAN 
class="figref">figure 4.8</SPAN></A>).</P>
<P>Scanlines that do not completely fill an integral number of bytes are padded 
as defined in 7.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Scanline"><SPAN 
class="xref">Scanlines</SPAN></A>.</P>
<P class="Note">NOTE If the reference image contains fewer than five columns or 
fewer than five rows, some passes will be empty.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="9Filters">9 Filtering</A></H1>
<H2><A name="9FtIntro">9.1 Filter methods and filter types</A></H2>
<P>Filtering transforms the PNG image with the goal of improving compression. 
PNG allows for a number of filter methods. All the reduced images in an 
interlaced image shall use a single filter method. Only filter method 0 is 
defined by this International Standard. Other filter methods are reserved for 
future standardization (see 4.9 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). Filter method 0 provides a 
set of five filter types, and individual scanlines in each reduced image may use
 different filter types.</P>
<P>PNG imposes no additional restriction on which filter types can be applied to 
an interlaced PNG image. However, the filter types are not equally effective on 
all types of data. See 12.8:<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Filter-selection"><SPAN 
class="xref">Filter selection</SPAN></A>.</P>
<P>Filtering transforms the byte sequence in a scanline to an equal length 
sequence of bytes preceded by the filter type. Filter type bytes are associated 
only with non-empty scanlines. No filter type bytes are present in an empty 
pass. See 13.8: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Progressive-display"><SPAN 
class="xref">Interlacing and progressive display</SPAN></A>.</P>
<H2><A name="9Filter-types">9.2 Filter types for filter method 0</A></H2>
<P>Filters are applied to <STRONG>bytes</STRONG>, not to pixels, regardless of 
the bit depth or colour type of the image. The filters operate on the byte 
sequence formed by a scanline that has been represented as described in 7.2: <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Scanline"><SPAN 
class="xref">Scanlines</SPAN></A>. If the image includes an alpha channel, the 
alpha data is filtered in the same way as the image data.</P>
<P>Filters may use the original values of the following bytes to generate the 
new byte value:</P>
<TABLE class="Regular" summary="This table defines the variables usedin table 9.1">
  <TBODY>
  <TR>
    <TD class="Regular"><TT>x</TT> </TD>
    <TD class="Regular">the byte being filtered;</TD></TR>
  <TR>
    <TD class="Regular"><TT>a</TT> </TD>
    <TD class="Regular">the byte corresponding to x in the pixel immediately 
      before the pixel containing x (or the byte immediately before x, when the 
      bit depth is less than 8);</TD></TR>
  <TR>
    <TD class="Regular"><TT>b</TT> </TD>
    <TD class="Regular">the byte corresponding to x in the previous 
    scanline;</TD></TR>
  <TR>
    <TD class="Regular"><TT>c</TT> </TD>
    <TD class="Regular">the byte corresponding to b in the pixel immediately 
      before the pixel containing b (or the byte immediately before b, when the 
      bit depth is less than 8).</TD></TR></TBODY></TABLE>
<P><A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9-figure91"><SPAN 
class="figref">Figure 9.1</SPAN></A> shows the relative positions of the bytes 
<TT>x</TT>,<TT>a</TT>, <TT>b</TT>, and <TT>c</TT>.</P>
<P>PNG filter method 0 defines five basic filter types as listed in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9-table91"><SPAN 
class="tabref">Table 9.1</SPAN></A>. <TT>Orig(y)</TT> denotes the orginal 
(unfiltered) value of byte <TT>y</TT>. <TT>Filt(y)</TT> denotes the value after 
a filter has been applied. <TT>Recon(y)</TT> denotes the value after the 
corresponding reconstruction function has been applied. The filter function for 
the Paeth type<TT>PaethPredictor</TT> is defined below.</P>
<P>Filter method 0 specifies exactly this set of five filter types and this 
shall not be extended. This ensures that decoders need not decompress the data
 to determine whether it contains unsupported filter types: it is sufficient to 
check the filter method in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<TABLE class="Regular" summary="This table lists the filter types">
  <CAPTION><A name="9-table91"><B>Table 9.1 — Filter types</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>Type</TH>
    <TH>Name</TH>
    <TH>Filter Function</TH>
    <TH>Reconstruction Function</TH></TR>
  <TR>
    <TD class="Regular" align="center">0</TD>
    <TD class="Regular">None</TD>
    <TD class="Regular"><TT>Filt(x) = Orig(x)</TT> </TD>
    <TD class="Regular"><TT>Recon(x) = Filt(x)</TT> </TD></TR>
  <TR>
    <TD class="Regular" align="center">1</TD>
    <TD class="Regular">Sub</TD>
    <TD class="Regular"><TT>Filt(x) = Orig(x) - Orig(a)</TT> </TD>
    <TD class="Regular"><TT>Recon(x) = Filt(x) + Recon(a)</TT> </TD></TR>
  <TR>
    <TD class="Regular" align="center">2</TD>
    <TD class="Regular">Up</TD>
    <TD class="Regular"><TT>Filt(x) = Orig(x) - Orig(b)</TT> </TD>
    <TD class="Regular"><TT>Recon(x) = Filt(x) + Recon(b)</TT> </TD></TR>
  <TR>
    <TD class="Regular" align="center">3</TD>
    <TD class="Regular">Average</TD>
    <TD class="Regular"><TT>Filt(x) = Orig(x) - floor((Orig(a) + Orig(b)) /
       2)</TT> </TD>
    <TD class="Regular"><TT>Recon(x) = Filt(x) + floor((Recon(a) + Recon(b)) /
       2)</TT> </TD></TR>
  <TR>
    <TD class="Regular" align="center">4</TD>
    <TD class="Regular">Paeth</TD>
    <TD class="Regular"><TT>Filt(x) = Orig(x) - PaethPredictor(Orig(a),
       Orig(b), Orig(c))</TT> </TD>
    <TD class="Regular"><TT>Recon(x) = Filt(x) + PaethPredictor(Recon(a), 
      Recon(b), Recon(c))</TT> </TD></TR></TBODY></TABLE>
<P>For all filters, the bytes "to the left of" the first pixel in a scanline 
shall be treated as being zero. For filters that refer to the prior scanline, 
the entire prior scanline and bytes "to the left of" the first pixel in the 
prior scanline shall be treated as being zeroes for the first scanline of a 
reduced image.</P>
<P>To reverse the effect of a filter requires the decoded values of the prior 
pixel on the same scanline, the pixel immediately above the current pixel on the 
prior scanline, and the pixel just to the left of the pixel above.</P>
<P>Unsigned arithmetic modulo 256 is used, so that both the inputs and outputs 
fit into bytes. Filters are applied to each byte regardless of bit depth. The 
sequence of <TT>Filt</TT>values is transmitted as the filtered scanline.</P>
<H2><A name="9Filter-type-3-Average">9.3 Filter type 3: Average</A></H2>
<P>The sum <TT>Orig(a) + Orig(b)</TT> shall be performed without overflow (using 
at least nine-bit arithmetic). <TT>floor()</TT>indicates that the result of the 
division is rounded to the next lower integer if fractional; in other words, it 
is an integer division or right shift operation.</P>
<H2><A name="9Filter-type-4-Paeth">9.4 Filter type 4: Paeth</A></H2>
<P>The Paeth filter function computes a simple linear function of the three 
neighbouring pixels (left, above, upper left), then chooses as predictor the 
neighbouring pixel closest to the computed value. The algorithm used in this 
International Standard is an adaptation of the technique due to Alan W. Paeth <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-PAETH"><SPAN 
class="bibref">[PAETH]</SPAN></A>.</P>
<P>The PaethPredictor function is defined in the code below. The logic of the 
function and the locations of the bytes <TT>a</TT>,<TT>b</TT>, <TT>c</TT>, and 
<TT>x</TT> are shown in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9-figure91"><SPAN 
class="figref">figure 9.1</SPAN></A>.<TT>Pr</TT> is the predictor for byte 
<TT>x</TT>.</P><PRE>    p = a + b - c
    pa = abs(p - a)
    pb = abs(p - b)
    pc = abs(p - c)
    if pa &lt;= pb and pa &lt;= pc then Pr = a
    else if pb &lt;= pc then Pr = b
    else Pr = c
    return Pr
</PRE><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P><A name="9-figure91">
<OBJECT data="figures/fig91.svg" width="640" type="image/svg+xml" 
height="360"><IMG alt="Figure 9.1: The PaethPredictor&#10;function" src="Portable%20Network%20Graphics%20(PNG)%20Specification%20(Second%20Edition)-Dateien/fig91.png" 
width="640" height="360"></OBJECT></A></P>
<P class="Figuretitle"><B>Figure 9.1: The PaethPredictor function</B></P>
<P>The calculations within the PaethPredictor function shall be performed 
exactly, without overflow.</P>
<P><STRONG>The order in which the comparisons are performed is critical and 
shall not be altered.</STRONG> The function tries to establish in which of the 
three directions (vertical, horizontal, or diagonal) the gradient of the image 
is smallest.</P>
<P>Exactly the same PaethPredictor function is used by both encoder and 
decoder.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="10Compression">10 Compression</A></H1>
<H2><A name="10CompressionCM0">10.1 Compression method 0</A></H2>
<P>Only PNG compression method 0 is defined by this International Standard. 
Other values of compression method are reserved for future standardization (see 
4.9: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). PNG compression method 0 is
 deflate/inflate compression with a sliding window (which is an upper bound on 
the distances appearing in the deflate stream) of at most 32768 bytes. Deflate 
compression is an LZ77 derivative <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ZL"><SPAN 
class="bibref">[ZL]</SPAN></A>.</P>
<P>Deflate-compressed datastreams within PNG are stored in the "zlib" format, 
which has the structure:</P>
<TABLE class="Regular" summary="This table gives the structure of the zlib format">
  <TBODY>
  <TR>
    <TD class="Regular">zlib compression method/flags code</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Additional flags/check bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Compressed data blocks</TD>
    <TD class="Regular">n bytes</TD></TR>
  <TR>
    <TD class="Regular">Check value</TD>
    <TD class="Regular">4 bytes</TD></TR></TBODY></TABLE>
<P>Further details on this format are given in the zlib specification <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-1950"><SPAN 
class="NormRef">[RFC-1950]</SPAN></A>.</P>
<P>For PNG compression method 0, the zlib compression method/flags code shall 
specify method code 8 (deflate compression) and an LZ77 window size of not more 
than 32768 bytes. The zlib compression method number is not the same as the PNG 
compression method number in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk (see 11.2.2<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="xref"><SPAN class="chunk">IHDR</SPAN> Image header</SPAN></A>). The 
additional flags shall not specify a preset dictionary.</P>
<P>If the data to be compressed contain 16384 bytes or fewer, the PNG encoder 
may set the window size by rounding up to a power of 2 (256 minimum). This 
decreases the memory required for both encoding and decoding, without adversely 
affecting the compression ratio.</P>
<P>The compressed data within the zlib datastream are stored as a series of 
blocks, each of which can represent raw (uncompressed) data, LZ77-compressed 
data encoded with fixed Huffman codes, or LZ77-compressed data encoded with 
custom Huffman codes. A marker bit in the final block identifies it as the last 
block, allowing the decoder to recognize the end of the compressed datastream.
 Further details on the compression algorithm and the encoding are given in the 
deflate specification <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-1951"><SPAN 
class="NormRef">[RFC-1951]</SPAN></A>.</P>
<P>The check value stored at the end of the zlib datastream is calculated on the 
uncompressed data represented by the datastream. The algorithm used to calculate 
this is not the same as the CRC calculation used for PNG chunk CRC field values. 
The zlib check value is useful mainly as a cross-check that the deflate and 
inflate algorithms are implemented correctly. Verifying the individual PNG chunk 
CRCs provides confidence that the PNG datastream has been transmitted 
undamaged.</P>
<H2><A name="10CompressionFSL">10.2 Compression of the sequence of filtered 
scanlines</A></H2>
<P>The sequence of filtered scanlines is compressed and the resulting data 
stream is split into <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks. The concatenation of the contents of all 
the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks makes up a zlib datastream. This datastream 
decompresses to filtered image data.</P>
<P>It is important to emphasize that the boundaries between <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks are arbitrary and can fall anywhere in the 
zlib datastream. There is not necessarily any correlation between <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunk boundaries and deflate block boundaries or 
any other feature of the zlib data. For example, it is entirely possible for the 
terminating zlib check value to be split across <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks.</P>
<P>Similarly, there is no required correlation between the structure of the 
image data (i.e., scanline boundaries) and deflate block boundaries or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunk boundaries. The complete filtered PNG image 
is represented by a single zlib datastream that is stored in a number of <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="10CompressionOtherUses">10.3 Other uses of compression</A></H2>
<P>PNG also uses compression method 0 in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks. Unlike the image data, such datastreams 
are not split across chunks; each such chunk contains an independent zlib 
datastream (see 10.1: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionCM0"><SPAN 
class="xref">Compression method 0</SPAN></A>).</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="11Chunks">11 Chunk specifications</A></H1>
<H2><A name="11Introduction">11.1 Introduction</A></H2>
<P>The PNG datastream consists of a PNG signature (see 5.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5PNG-file-signature"><SPAN 
class="xref">PNG signature</SPAN></A>) followed by a sequence of chunks. Each
 chunk has a chunk type which specifies its function. This clause defines the 
PNG chunk types standardized in this International Standard. The PNG datastream 
structure is defined in clause&nbsp;5: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5DataRep"><SPAN 
class="xref">Datastream structure</SPAN></A>. This also defines the order in 
which chunks may appear. For details specific to encoders see 12.11: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Chunk-processing"><SPAN 
class="xref">Chunking</SPAN></A>. For details specific to decoders see 13.5: <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Chunking"><SPAN 
class="xref">Chunking</SPAN></A>.</P>
<H2><A name="11Critical-chunks">11.2 Critical chunks</A></H2>
<H3><A name="11CcGen">11.2.1 General</A></H3>
<P>Critical chunks are those chunks that are absolutely required in order to 
successfully decode a PNG image from a PNG datastream. Extension chunks may be 
defined as critical chunks (see clause&nbsp;14: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#14EditorsExt"><SPAN 
class="xref">Editors and extensions</SPAN></A>), though this practice is 
strongly discouraged.</P>
<P>A valid PNG datastream shall begin with a PNG signature, immediately followed 
by an <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk, then one or more <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks, and shall end with an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A>chunk. Only one <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk and one <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A> chunk are allowed in a PNG datastream.</P>
<H3><A name="11IHDR">11.2.2 <SPAN class="chunk">IHDR</SPAN> Image
 header</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>73 72 68 82
</PRE>
<P>The <SPAN class="chunk">IHDR</SPAN> chunk shall be the first chunk in the PNG 
datastream. It contains:</P>
<TABLE class="Regular" summary="This table defines the IHDR chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Width</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Height</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Bit depth</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Colour type</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Compression method</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Filter method</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Interlace method</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>Width and height give the image dimensions in pixels. They are PNG four-byte 
unsigned integers. Zero is an invalid value.</P>
<P>Bit depth is a single-byte integer giving the number of bits per sample or 
per palette index (not per pixel). Valid values are 1, 2, 4, 8, and 16, although 
not all values are allowed for all colour types. See 6.1: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#6Colour-values"><SPAN 
class="xref">Colour types and values</SPAN></A>.</P>
<P>Colour type is a single-byte integer that defines the PNG image type. Valid 
values are 0, 2, 3, 4, and 6.</P>
<P>Bit depth restrictions for each colour type are imposed to simplify 
implementations and to prohibit combinations that do not compress well. The 
allowed combinations are defined in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#table111"><SPAN 
class="tabref">Table 11.1</SPAN></A>.</P>
<TABLE class="Regular" summary="This table defines the colour types">
  <CAPTION><A name="table111"><B>Table 11.1 — Allowed combinations of colour 
  type and bit depth</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>PNG image type</TH>
    <TH>Colour type</TH>
    <TH>Allowed bit depths</TH>
    <TH>Interpretation</TH></TR>
  <TR>
    <TD class="Regular">Greyscale</TD>
    <TD class="Regular" align="center">0</TD>
    <TD class="Regular">1, 2, 4, 8, 16</TD>
    <TD class="Regular">Each pixel is a greyscale sample</TD></TR>
  <TR>
    <TD class="Regular">Truecolour</TD>
    <TD class="Regular" align="center">2</TD>
    <TD class="Regular">8, 16</TD>
    <TD class="Regular">Each pixel is an R,G,B triple</TD></TR>
  <TR>
    <TD class="Regular">Indexed-colour</TD>
    <TD class="Regular" align="center">3</TD>
    <TD class="Regular">1, 2, 4, 8</TD>
    <TD class="Regular">Each pixel is a palette index; a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
      class="chunk">PLTE</SPAN></A> chunk shall appear.</TD></TR>
  <TR>
    <TD class="Regular">Greyscale with alpha</TD>
    <TD class="Regular" align="center">4</TD>
    <TD class="Regular">8, 16</TD>
    <TD class="Regular">Each pixel is a greyscale sample followed by an alpha
       sample.</TD></TR>
  <TR>
    <TD class="Regular">Truecolour with alpha</TD>
    <TD class="Regular" align="center">6</TD>
    <TD class="Regular">8, 16</TD>
    <TD class="Regular">Each pixel is an R,G,B triple followed by an alpha
       sample.</TD></TR></TBODY></TABLE>
<P>The sample depth is the same as the bit depth except in the case of 
indexed-colour PNG images (colour type 3), in which the sample depth is always 8 
bits (see 4.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.PNGImage"><SPAN 
class="xref">PNG image</SPAN></A>).</P>
<P>Compression method is a single-byte integer that indicates the method used to 
compress the image data. Only compression method 0 (deflate/inflate compression 
with a sliding window of at most 32768 bytes) is defined in this International 
Standard. All conforming PNG images shall be compressed with this scheme.</P>
<P>Filter method is a single-byte integer that indicates the preprocessing 
method applied to the image data before compression. Only filter method 0 
(adaptive filtering with five basic filter types) is defined in this 
International Standard. See clause&nbsp;9: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filters"><SPAN 
class="xref">Filtering</SPAN></A> for details.</P>
<P>Interlace method is a single-byte integer that indicates the transmission 
order of the image data. Two values are defined in this International Standard: 
0 (no interlace) or 1 (Adam7 interlace). See clause&nbsp;8: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#8Interlace"><SPAN 
class="xref">Interlacing and pass extraction</SPAN></A> for details.</P>
<H3><A name="11PLTE">11.2.3 <SPAN class="chunk">PLTE</SPAN>Palette</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>80 76 84 69
</PRE>
<P>The <SPAN class="chunk">PLTE</SPAN> chunk contains from 1 to 256 palette 
entries, each a three-byte series of the form:</P>
<TABLE class="Regular" summary="This table defines the PLTE palette table entries">
  <TBODY>
  <TR>
    <TD class="Regular">Red</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Green</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Blue</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>The number of entries is determined from the chunk length. A chunk length not 
divisible by 3 is an error.</P>
<P>This chunk shall appear for colour type 3, and may appear for colour types 2 
and 6; it shall not appear for colour types 0 and 4. There shall not be more 
than one <SPAN class="chunk">PLTE</SPAN> chunk.</P>
<P>For colour type 3 (indexed-colour), the <SPAN class="chunk">PLTE</SPAN> chunk 
is required. The first entry in <SPAN class="chunk">PLTE</SPAN> is referenced by 
pixel value 0, the second by pixel value 1, etc. The number of palette entries 
shall not exceed the range that can be represented in the image bit depth (for 
example, 2<SUP>4</SUP> = 16 for a bit depth of 4). It is permissible to have 
fewer entries than the bit depth would allow. In that case, any out-of-range 
pixel value found in the image data is an error.</P>
<P>For colour types 2 and 6 (truecolour and truecolour with alpha), the <SPAN 
class="chunk">PLTE</SPAN> chunk is optional. If present, it provides a suggested 
set of colours (from 1 to 256) to which the truecolour image can be quantized if 
it cannot be displayed directly. It is, however, recommended that the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunk be used for this purpose, rather than the 
<SPAN class="chunk">PLTE</SPAN>chunk. If neither <SPAN class="chunk">PLTE</SPAN> 
nor <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunks are present and the image cannot be 
displayed directly, quantization has to be done by the viewing system. However, 
it is often preferable for the selection of colours to be done once by the PNG 
encoder. (See 12.6: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Suggested-palettes"><SPAN 
class="xref">Suggested palettes</SPAN></A>.)</P>
<P>Note that the palette uses 8 bits (1 byte) per sample regardless of the image 
bit depth. In particular, the palette is 8 bits deep even when it is a suggested
 quantization of a 16-bit truecolour image.</P>
<P>There is no requirement that the palette entries all be used by the image, 
nor that they all be different.</P>
<H3><A name="11IDAT">11.2.4 <SPAN class="chunk">IDAT</SPAN> Image data</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>73 68 65 84
</PRE>
<P>The <SPAN class="chunk">IDAT</SPAN> chunk contains the actual image data 
which is the output stream of the compression algorithm. See clause&nbsp;9: <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#9Filters"><SPAN 
class="xref">Filtering</SPAN></A> and clause&nbsp;10: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10Compression"><SPAN 
class="xref">Compression</SPAN></A> for details.</P>
<P>There may be multiple <SPAN class="chunk">IDAT</SPAN> chunks; if so, they 
shall appear consecutively with no other intervening chunks. The compressed 
datastream is then the concatenation of the contents of the data fields of all 
the <SPAN class="chunk">IDAT</SPAN> chunks.</P>
<H3><A name="11IEND">11.2.5 <SPAN class="chunk">IEND</SPAN> Image
 trailer</A></H3>
<P>The four-byte chunk type field contains the decimal values</P><PRE>73 69 78 68
</PRE>
<P>The <SPAN class="chunk">IEND</SPAN> chunk marks the end of the PNG 
datastream. The chunk's data field is empty.</P>
<H2><A name="11Ancillary-chunks">11.3 Ancillary chunks</A></H2>
<H3><A name="11AcGen">11.3.1 General</A></H3>
<P>The ancillary chunks defined in this International Standard are listed in the 
order in 4.7.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.FormatTypes"><SPAN 
class="xref">Chunk types</SPAN></A>. This is not the order in which they appear 
in a PNG datastream. Ancillary chunks may be ignored by a decoder. For each 
ancillary chunk, the actions described are under the assumption that the decoder 
is not ignoring the chunk.</P>
<H3><A name="11transinfo">11.3.2 Transparency information</A></H3>
<H4><A name="11tRNS">11.3.2.1 <SPAN class="chunk">tRNS</SPAN>
Transparency</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>116 82 78 83
</PRE>
<P>The <SPAN class="chunk">tRNS</SPAN> chunk specifies either alpha values that 
are associated with palette entries (for indexed-colour images) or a single 
transparent colour (for greyscale and truecolour images). The <SPAN class="chunk">tRNS</SPAN> 
chunk contains: <!-- ************Page Break******************* --></P><!-- ************Page Break******************* -->
<TABLE class="Regular" summary="This table defines the tRNS chunk">
  <TBODY>
  <TR>
    <TH colSpan="2">Colour type 0</TH></TR>
  <TR>
    <TD class="Regular">Grey sample value</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TH colSpan="2">Colour type 2</TH></TR>
  <TR>
    <TD class="Regular">Red sample value</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Blue sample value</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Green sample value</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TH colSpan="2">Colour type 3</TH></TR>
  <TR>
    <TD class="Regular">Alpha for palette index 0</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Alpha for palette index 1</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">...etc...</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>For colour type 3 (indexed-colour), the <SPAN class="chunk">tRNS</SPAN> chunk 
contains a series of one-byte alpha values, corresponding to entries in the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk. Each entry indicates that pixels of the 
corresponding palette index shall be treated as having the specified alpha 
value. Alpha values have the same interpretation as in an 8-bit full alpha 
channel: 0 is fully transparent, 255 is fully opaque, regardless of image bit 
depth. The <SPAN class="chunk">tRNS</SPAN> chunk shall not contain more alpha 
values than there are palette entries, but a <SPAN class="chunk">tRNS</SPAN> 
chunk may contain fewer values than there are palette entries. In this case, the 
alpha value for all remaining palette entries is assumed to be 255. In the 
common case in which only palette index 0 need be made transparent, only a 
one-byte<SPAN class="chunk">tRNS</SPAN> chunk is needed, and when all palette 
indices are opaque, the <SPAN class="chunk">tRNS</SPAN>chunk may be omitted.</P>
<P>For colour types 0 or 2, two bytes per sample are used regardless of the 
image bit depth (see 7.1: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#7Integers-and-byte-order"><SPAN 
class="xref">Integers and byte order</SPAN></A>). Pixels of the specified grey 
sample value or RGB sample values are treated as transparent (equivalent to 
alpha value 0); all other pixels are to be treated as fully opaque (alpha value 
2<SUP>bitdepth</SUP>-1). If the image bit depth is less than 16, the least 
significant bits are used and the others are 0.</P>
<P>A <SPAN class="chunk">tRNS</SPAN> chunk shall not appear for colour types 4 
and 6, since a full alpha channel is already present in those cases.</P>
<P class="Note">NOTE For 16-bit greyscale or truecolour data, only pixels 
matching the entire 16-bit values in <SPAN class="chunk">tRNS</SPAN> chunks are 
transparent. Decoders have to postpone any sample depth rescaling until after 
the pixels have been tested for transparency.</P>
<H3><A name="11addnlcolinfo">11.3.3 Colour space information</A></H3>
<H4><A name="11cHRM">11.3.3.1 <SPAN class="chunk">cHRM</SPAN>Primary 
chromaticities and white point</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>99 72 82 77
</PRE>
<P>The <SPAN class="chunk">cHRM</SPAN> chunk may be used to specify the 1931 CIE 
<I>x,y</I> chromaticities of the red, green, and blue display primaries used in 
the image, and the referenced white point. See Annex C: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A> for more information. The <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunks provide more sophisticated support for 
colour management and control.</P>
<P>The <SPAN class="chunk">cHRM</SPAN> chunk contains:</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<TABLE class="Regular" summary="This table defines the cHRM chunk">
  <TBODY>
  <TR>
    <TD class="Regular">White point x</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">White point y</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Red x</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Red y</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Green x</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Green y</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Blue x</TD>
    <TD class="Regular">4 bytes</TD></TR>
  <TR>
    <TD class="Regular">Blue y</TD>
    <TD class="Regular">4 bytes</TD></TR></TBODY></TABLE>
<P>Each value is encoded as a four-byte PNG unsigned integer, representing the 
<I>x</I> or <I>y</I> value times 100000.</P>
<P>EXAMPLE A value of 0.3127 would be stored as the integer 31270.</P>
<P>The <SPAN class="chunk">cHRM</SPAN> chunk is allowed in all PNG datastreams, 
although it is of little value for greyscale images.</P>
<P>An <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunk or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunk, when present and recognized, overrides the 
<SPAN class="chunk">cHRM</SPAN> chunk.</P>
<H4><A name="11gAMA">11.3.3.2 <SPAN class="chunk">gAMA</SPAN>Image 
gamma</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>103 65 77 65
</PRE>
<P>The <SPAN class="chunk">gAMA</SPAN> chunk specifies the relationship between 
the image samples and the desired display output intensity. Gamma is defined in 
3.1.20: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#3gamma">gamma</A>.</P>
<P>In fact specifying the desired display output intensity is insufficient. It 
is also necessary to specify the viewing conditions under which the output is 
desired. For <SPAN class="chunk">gAMA</SPAN> these are the reference viewing 
conditions of the sRGB specification <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-IEC-61966-2-1"><SPAN 
class="NormRef">[IEC 61966-2-1]</SPAN></A>, which are based on ISO 3664<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ISO-3664"><SPAN 
class="bibref">[ISO-3664]</SPAN></A>. Adjustment for different viewing 
conditions is normally handled by a Colour Management System. If the adjustment 
is not performed, the error is usually small. Applications desiring high colour 
fidelity may wish to use an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunk or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunk.</P>
<P>The <SPAN class="chunk">gAMA</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the gAMA chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Image gamma</TD>
    <TD class="Regular">4 bytes</TD></TR></TBODY></TABLE>
<P>The value is encoded as a four-byte PNG unsigned integer, representing gamma 
times 100000.</P>
<P>EXAMPLE A gamma of 1/2.2 would be stored as the integer 45455.</P>
<P>See 12.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Encoder-gamma-handling"><SPAN 
class="xref">Encoder gamma handling</SPAN></A> and 13.13: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-gamma-handling"><SPAN 
class="xref">Decoder gamma handling</SPAN></A> for more information.</P>
<P>An <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunk or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunk, when present and recognized, overrides the 
<SPAN class="chunk">gAMA</SPAN> chunk.</P>
<H4><A name="11iCCP">11.3.3.3 <SPAN class="chunk">iCCP</SPAN>Embedded ICC 
profile</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>105 67 67 80
</PRE>
<P>The <SPAN class="chunk">iCCP</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the iCCP chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Profile name</TD>
    <TD class="Regular">1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Compression method</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Compressed profile</TD>
    <TD class="Regular">n bytes</TD></TR></TBODY></TABLE>
<P>The profile name may be any convenient name for referring to the profile. It 
is case-sensitive. Profile names shall contain only printable Latin-1 characters 
and spaces (only character codes 32-126 and 161-255 decimal are allowed). 
Leading, trailing, and consecutive spaces are not permitted. The only 
compression method defined in this International Standard is method 0 (zlib
 datastream with deflate compression, see 10.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionOtherUses"><SPAN 
class="xref">Other uses of compression</SPAN></A>). The compression method entry 
is followed by a compressed profile that makes up the remainder of the chunk.
 Decompression of this datastream yields the embedded ICC profile.</P>
<P>If the <SPAN class="chunk">iCCP</SPAN> chunk is present, the image samples 
conform to the colour space represented by the embedded ICC profile as defined 
by the International Color Consortium <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A>. The colour space of the ICC profile shall be an 
RGB colour space for colour images (PNG colour types 2, 3, and 6), or a 
greyscale colour space for greyscale images (PNG colour types 0 and 4). A PNG 
encoder that writes the <SPAN class="chunk">iCCP</SPAN> chunk is encouraged to 
also write <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunks that approximate the ICC profile, to 
provide compatibility with applications that do not use the <SPAN 
class="chunk">iCCP</SPAN>chunk. When the <SPAN class="chunk">iCCP</SPAN> chunk 
is present, PNG decoders that recognize it and are capable of colour management 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A>shall ignore the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunks and use the <SPAN class="chunk">iCCP</SPAN> 
chunk instead and interpret it according to<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ICC-1"><SPAN 
class="NormRef">[ICC-1]</SPAN></A> and<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ICC-1A"><SPAN 
class="NormRef">[ICC-1A]</SPAN></A>. PNG decoders that are used in an 
environment that is incapable of full-fledged colour management should use the 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunks if present.</P>
<P>A PNG datastream should contain at most one embedded profile, whether 
specified explicitly with an <SPAN class="chunk">iCCP</SPAN> chunk or implicitly 
with an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunk.</P>
<H4><A name="11sBIT">11.3.3.4 <SPAN class="chunk">sBIT</SPAN>Significant 
bits</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>115 66 73 84
</PRE>
<P>To simplify decoders, PNG specifies that only certain sample depths may be 
used, and further specifies that sample values should be scaled to the full 
range of possible values at the sample depth. The <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A> chunk defines the original number of significant 
bits (which can be less than or equal to the sample depth). This allows PNG 
decoders to recover the original data losslessly even if the data had a sample 
depth not directly supported by PNG.</P>
<P>The <SPAN class="chunk">sBIT</SPAN> chunk contains:</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<TABLE class="Regular" summary="This table defines the sBIT chunk">
  <TBODY>
  <TR>
    <TH colSpan="2">Colour type 0</TH></TR>
  <TR>
    <TD class="Regular">significant greyscale bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TH colSpan="2">Colour types 2 and 3</TH></TR>
  <TR>
    <TD class="Regular">significant red bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">significant green bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">significant blue bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TH colSpan="2">Colour type 4</TH></TR>
  <TR>
    <TD class="Regular">significant greyscale bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">significant alpha bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TH colSpan="2">Colour type 6</TH></TR>
  <TR>
    <TD class="Regular">significant red bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">significant green bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">significant blue bits</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">significant alpha bits</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>Each depth specified in <SPAN class="chunk">sBIT</SPAN> shall be greater than 
zero and less than or equal to the sample depth (which is 8 for indexed-colour 
images, and the bit depth given in<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> for other colour types). Note that <SPAN class="chunk">sBIT</SPAN> 
does not provide a sample depth for the alpha channel that is implied by a<A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk; in that case, all of the sample bits of the 
alpha channel are to be treated as significant. If the <SPAN 
class="chunk">sBIT</SPAN> chunk is not present, then all of the sample bits of 
all channels are to be treated as significant.</P>
<H4><A name="11sRGB">11.3.3.5 <SPAN class="chunk">sRGB</SPAN>Standard RGB colour 
space</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>115 82 71 66
</PRE>
<P>If the <SPAN class="chunk">sRGB</SPAN> chunk is present, the image samples 
conform to the sRGB colour space <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-IEC-61966-2-1"><SPAN 
class="NormRef">[IEC 61966-2-1]</SPAN></A> and should be displayed using the 
specified rendering intent defined by the International Color Consortium <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ICC-1"><SPAN 
class="NormRef">[ICC-1]</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ICC-1A"><SPAN 
class="NormRef">[ICC-1A]</SPAN></A>.</P>
<P>The <SPAN class="chunk">sRGB</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the sRGB chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Rendering intent</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>The following values are defined for rendering intent:</P>
<TABLE class="Regular" summary="This table defines the values of rendering intent in the sRGB chunk">
  <TBODY>
  <TR>
    <TD class="Regular">0</TD>
    <TD class="Regular">Perceptual</TD>
    <TD class="Regular">for images preferring good adaptation to the output 
      device gamut at the expense of colorimetric accuracy, such as
     photographs.</TD></TR>
  <TR>
    <TD class="Regular">1</TD>
    <TD class="Regular">Relative colorimetric</TD>
    <TD class="Regular">for images requiring colour appearance matching 
      (relative to the output device white point), such as logos.</TD></TR>
  <TR>
    <TD class="Regular">2</TD>
    <TD class="Regular">Saturation</TD>
    <TD class="Regular">for images preferring preservation of saturation at 
      the expense of hue and lightness, such as charts and graphs.</TD></TR>
  <TR>
    <TD class="Regular">3</TD>
    <TD class="Regular">Absolute colorimetric</TD>
    <TD class="Regular">for images requiring preservation of absolute 
      colorimetry, such as previews of images destined for a different output 
      device (proofs).</TD></TR></TBODY></TABLE>
<P>It is recommended that a PNG encoder that writes the <SPAN 
class="chunk">sRGB</SPAN> chunk also write a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk (and optionally a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk) for compatibility with decoders that do not 
use the <SPAN class="chunk">sRGB</SPAN> chunk. Only the following values shall 
be used.</P>
<TABLE class="Regular" summary="This table defines the gAMA and cHRM values for sRGB">
  <TBODY>
  <TR>
    <TH colSpan="2"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
      class="chunk">gAMA</SPAN></A> </TH></TR>
  <TR>
    <TD class="Regular">Gamma</TD>
    <TD class="Regular">45455</TD></TR>
  <TR>
    <TH colSpan="2"><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
      class="chunk">cHRM</SPAN></A> </TH></TR>
  <TR>
    <TD class="Regular">White point x</TD>
    <TD class="Regular">31270</TD></TR>
  <TR>
    <TD class="Regular">White point y</TD>
    <TD class="Regular">32900</TD></TR>
  <TR>
    <TD class="Regular">Red x</TD>
    <TD class="Regular">64000</TD></TR>
  <TR>
    <TD class="Regular">Red y</TD>
    <TD class="Regular">33000</TD></TR>
  <TR>
    <TD class="Regular">Green x</TD>
    <TD class="Regular">30000</TD></TR>
  <TR>
    <TD class="Regular">Green y</TD>
    <TD class="Regular">60000</TD></TR>
  <TR>
    <TD class="Regular">Blue x</TD>
    <TD class="Regular">15000</TD></TR>
  <TR>
    <TD class="Regular">Blue y</TD>
    <TD class="Regular">6000</TD></TR></TBODY></TABLE>
<P>When the <SPAN class="chunk">sRGB</SPAN> chunk is present, it is recommended 
that decoders that recognize it and are capable of colour management <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A> ignore the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunks and use the <SPAN class="chunk">sRGB</SPAN> 
chunk instead. Decoders that recognize the<SPAN class="chunk">sRGB</SPAN> chunk 
but are not capable of colour management <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A> are recommended to ignore the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunks, and use the values given above as if they 
had appeared in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunks.</P>
<P>It is recommended that the <SPAN class="chunk">sRGB</SPAN> and<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunks do not both appear in a PNG datastream.</P>
<H3><A name="11textinfo">11.3.4 Textual information</A></H3>
<H4><A name="11textIntro">11.3.4.1 Introduction</A></H4>
<P>PNG provides the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks for storing text strings associated with 
the image, such as an image description or copyright notice. Keywords are used 
to indicate what each text string represents. Any number of such text chunks may 
appear, and more than one with the same keyword is permitted.</P>
<H4><A name="11keywords">11.3.4.2 Keywords and text strings</A></H4>
<P>The following keywords are predefined and should be used where
 appropriate.</P>
<TABLE class="Regular" summary="This table defines the keywords defined for tEXt, iTXt and zTXt chunks">
  <TBODY>
  <TR>
    <TD class="Regular">Title</TD>
    <TD class="Regular">Short (one line) title or caption for image</TD></TR>
  <TR>
    <TD class="Regular">Author</TD>
    <TD class="Regular">Name of image's creator</TD></TR>
  <TR>
    <TD class="Regular">Description</TD>
    <TD class="Regular">Description of image (possibly long)</TD></TR>
  <TR>
    <TD class="Regular">Copyright</TD>
    <TD class="Regular">Copyright notice</TD></TR>
  <TR>
    <TD class="Regular">Creation Time</TD>
    <TD class="Regular">Time of original image creation</TD></TR>
  <TR>
    <TD class="Regular">Software</TD>
    <TD class="Regular">Software used to create the image</TD></TR>
  <TR>
    <TD class="Regular">Disclaimer</TD>
    <TD class="Regular">Legal disclaimer</TD></TR>
  <TR>
    <TD class="Regular">Warning</TD>
    <TD class="Regular">Warning of nature of content</TD></TR>
  <TR>
    <TD class="Regular">Source</TD>
    <TD class="Regular">Device used to create the image</TD></TR>
  <TR>
    <TD class="Regular">Comment</TD>
    <TD class="Regular">Miscellaneous comment</TD></TR></TBODY></TABLE>
<P>Other keywords may be defined for other purposes. Keywords of general 
interest can be registered with the PNG Registration Authority (see 4.9 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). It is also permitted to use 
private unregistered keywords. (Private keywords should be reasonably 
self-explanatory, in order to minimize the chance that the same keyword is used 
for incompatible purposes by different people.)</P>
<P>Keywords shall contain only printable Latin-1 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-8859-1"><SPAN 
class="NormRef">[ISO-8859-1]</SPAN></A>characters and spaces; that is, only 
character codes 32-126 and 161-255 decimal are allowed. To reduce the chances 
for human misreading of a keyword, leading spaces, trailing spaces, and 
consecutive spaces are not permitted in keywords, nor is the non-breaking space 
(code 160) since it is visually indistinguishable from an ordinary space.</P>
<P>Keywords shall be spelled exactly as registered, so that decoders can use 
simple literal comparisons when looking for particular keywords. In particular, 
keywords are considered case-sensitive. Keywords are restricted to 1 to 79 bytes 
in length.</P>
<P>For the Creation Time keyword, the date format defined in section&nbsp;5.2.14 
of RFC 1123 is suggested, but not required <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-1123"><SPAN 
class="NormRef">[RFC-1123]</SPAN></A>.</P>
<P>In the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks, the text string associated with a keyword 
is restricted to the Latin-1 character set plus the linefeed character. Text 
strings in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> are compressed into zlib datastreams using deflate 
compression (see 10.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionOtherUses"><SPAN 
class="xref">Other uses of compression</SPAN></A>). The <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A> chunk can be used to convey characters outside the 
Latin-1 set. It uses the UTF-8 encoding of UCS <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-10646-1"><SPAN 
class="NormRef">[ISO/IEC 10646-1]</SPAN></A> . There is an option to compress 
text strings in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A>chunk.</P>
<H4><A name="11tEXt">11.3.4.3 <SPAN class="chunk">tEXt</SPAN>Textual 
data</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>116 69 88 116
</PRE>
<P>Each <SPAN class="chunk">tEXt</SPAN> chunk contains a keyword and a text 
string, in the format:</P>
<TABLE class="Regular" summary="This table defines the tEXt chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Keyword</TD>
    <TD class="Regular">1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Text string</TD>
    <TD class="Regular">0 or more bytes (character string)</TD></TR></TBODY></TABLE>
<P>The keyword and text string are separated by a zero byte (null character). 
Neither the keyword nor the text string may contain a null character. The text 
string is <STRONG>not</STRONG> null-terminated (the length of the chunk defines 
the ending). The text string may be of any length from zero bytes up to the 
maximum permissible chunk size less the length of the keyword and null character 
separator.</P>
<P>The keyword indicates the type of information represented by the text string 
as described in 11.3.4.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11keywords"><SPAN 
class="xref">Keywords and text strings</SPAN></A>.</P>
<P>Text is interpreted according to the Latin-1 character set <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-8859-1"><SPAN 
class="NormRef">[ISO-8859-1]</SPAN></A>. The text string may contain any Latin-1 
character. Newlines in the text string should be represented by a single 
linefeed character (decimal 10). Characters other than those defined in Latin-1 
plus the linefeed character have no defined meaning in <SPAN 
class="chunk">tEXt</SPAN> chunks. Text containing characters outside the 
repertoire of ISO/IEC 8859-1 should be encoded using the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A> chunk.</P>
<H4><A name="11zTXt">11.3.4.4 <SPAN class="chunk">zTXt</SPAN>Compressed textual 
data</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>122 84 88 116
</PRE>
<P>The <SPAN class="chunk">zTXt</SPAN> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> chunks are semantically equivalent, but the <SPAN 
class="chunk">zTXt</SPAN>chunk is recommended for storing large blocks of 
text.</P>
<P>A <SPAN class="chunk">zTXt</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the zTXt chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Keyword</TD>
    <TD class="Regular">1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Compression method</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Compressed text datastream</TD>
    <TD class="Regular">n bytes</TD></TR></TBODY></TABLE>
<P>The keyword and null character are the same as in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> chunk (see 11.3.4.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="xref"><SPAN class="chunk">tEXt</SPAN> Textual data</SPAN></A>). The 
keyword is not compressed. The compression method entry defines the compression
 method used. The only value defined in this International Standard is 0 
(deflate/inflate compression). Other values are reserved for future 
standardization (see 4.9 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). The compression method 
entry is followed by the compressed text datastream that makes up the remainder 
of the chunk. For compression method 0, this datastream is a zlib datastream 
with deflate compression (see 10.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionOtherUses"><SPAN 
class="xref">Other uses of compression</SPAN></A>). Decompression of this 
datastream yields Latin-1 text that is identical to the text that would be 
stored in an equivalent <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> chunk.</P>
<H4><A name="11iTXt">11.3.4.5 <SPAN class="chunk">iTXt</SPAN>International 
textual data</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>105 84 88 116
</PRE>
<P>An <SPAN class="chunk">iTXt</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the iTXt chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Keyword</TD>
    <TD class="Regular">1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Compression flag</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Compression method</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Language tag</TD>
    <TD class="Regular">0 or more bytes (character string)</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Translated keyword</TD>
    <TD class="Regular">0 or more bytes</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Text</TD>
    <TD class="Regular">0 or more bytes</TD></TR></TBODY></TABLE>
<P>The keyword is described in 11.3.4.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11keywords"><SPAN 
class="xref">Keywords and text strings</SPAN></A>.</P>
<P>The compression flag is 0 for uncompressed text, 1 for compressed text. Only 
the text field may be compressed. The compression method entry defines the 
compression method used. The only compression method defined in this 
International Standard is 0 (zlib datastream with deflate compression, see 10.3: 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10CompressionOtherUses"><SPAN 
class="xref">Other uses of compression</SPAN></A>). For uncompressed text, 
encoders shall set the compression method to 0, and decoders shall ignore
 it.</P>
<P>The language tag defined in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-3066"><SPAN 
class="NormRef">[RFC-3066]</SPAN></A>indicates the human language used by the 
translated keyword and the text. Unlike the keyword, the language tag is
 case-insensitive. It is an ISO 646.IRV:1991 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-646"><SPAN 
class="NormRef">[ISO 646]</SPAN></A> string consisting of hyphen-separated words 
of 1-8 alphanumeric characters each (for example cn, en-uk, no-bok, x-klingon, 
x-KlInGoN). If the first word is two or three letters long, it is an ISO 
language code <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-639"><SPAN 
class="NormRef">[ISO-639]</SPAN></A>. If the language tag is empty, the language 
is unspecified.</P>
<P>The translated keyword and text both use the UTF-8 encoding of UCS <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-10646-1"><SPAN 
class="NormRef">[ISO/IEC 10646-1]</SPAN></A>, and neither shall contain a zero 
byte (null character). The text, unlike other textual data in this chunk, is not 
null-terminated; its length is derived from the chunk length.</P>
<P>Line breaks should not appear in the translated keyword. In the text, a 
newline should be represented by a single linefeed character (decimal 10). The 
remaining control characters (1-9, 11-31, 127-159) are discouraged in both the 
translated keyword and text. In UTF-8 there is a difference between the 
characters 128-159 (which are discouraged) and the bytes 128-159 (which are
 often necessary).</P>
<P>The translated keyword, if not empty, should contain a translation of the 
keyword into the language indicated by the language tag, and applications 
displaying the keyword should display the translated keyword in addition.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H3><A name="11addnlsiinfo">11.3.5 Miscellaneous information</A></H3>
<H4><A name="11bKGD">11.3.5.1 <SPAN class="chunk">bKGD</SPAN>Background 
colour</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>98 75 71 68
</PRE>
<P>The <SPAN class="chunk">bKGD</SPAN> chunk specifies a default background 
colour to present the image against. If there is any other preferred background, 
either user-specified or part of a larger page (as in a browser), the <SPAN 
class="chunk">bKGD</SPAN> chunk should be ignored. The <SPAN 
class="chunk">bKGD</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the bKGD chunk">
  <TBODY>
  <TR>
    <TH colSpan="2">Colour types 0 and 4</TH></TR>
  <TR>
    <TD class="Regular">Greyscale</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TH colSpan="2">Colour types 2 and 6</TH></TR>
  <TR>
    <TD class="Regular">Red</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Green</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Blue</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TH colSpan="2">Colour type 3</TH></TR>
  <TR>
    <TD class="Regular">Palette index</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>For colour type 3 (indexed-colour), the value is the palette index of the 
colour to be used as background.</P>
<P>For colour types 0 and 4 (greyscale, greyscale with alpha), the value is the 
grey level to be used as background in the range 0 to (2<SUP>bitdepth</SUP>)-1. 
For colour types 2 and 6 (truecolour, truecolour with alpha), the values are the 
colour to be used as background, given as RGB samples in the range 0 to 
(2<SUP>bitdepth</SUP>)-1. In each case, for consistency, two bytes per sample 
are used regardless of the image bit depth. If the image bit depth is less than 
16, the least significant bits are used and the others are 0.</P>
<H4><A name="11hIST">11.3.5.2 <SPAN class="chunk">hIST</SPAN>Image 
histogram</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>104 73 83 84
</PRE>
<P>The <SPAN class="chunk">hIST</SPAN> chunk contains a series of two-byte 
(16-bit) unsigned integers:</P>
<TABLE class="Regular" summary="This table defines the hIST chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Frequency</TD>
    <TD class="Regular">2 bytes (unsigned integer)</TD></TR>
  <TR>
    <TD class="Regular">...etc...</TD>
    <TD class="Regular">&nbsp;</TD></TR></TBODY></TABLE>
<P>The <SPAN class="chunk">hIST</SPAN> chunk gives the approximate usage 
frequency of each colour in the palette. A histogram chunk can appear only when 
a <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk appears. If a viewer is unable to provide 
all the colours listed in the palette, the histogram may help it decide how to 
choose a subset of the colours for display.</P>
<P>There shall be exactly one entry for each entry in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk. Each entry is proportional to the fraction 
of pixels in the image that have that palette index; the exact scale factor is 
chosen by the encoder.</P>
<P>Histogram entries are approximate, with the exception that a zero entry 
specifies that the corresponding palette entry is not used at all in the image. 
A histogram entry shall be nonzero if there are any pixels of that colour.</P>
<P class="Note">NOTE When the palette is a suggested quantization of a 
truecolour image, the histogram is necessarily approximate, since a decoder may 
map pixels to palette entries differently than the encoder did. In this 
situation, zero entries should not normally appear, because any entry might be 
used.</P>
<H4><A name="11pHYs">11.3.5.3 <SPAN class="chunk">pHYs</SPAN>Physical pixel 
dimensions</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>112 72 89 115
</PRE>
<P>The <SPAN class="chunk">pHYs</SPAN> chunk specifies the intended pixel size 
or aspect ratio for display of the image. It contains:</P>
<TABLE class="Regular" summary="This table defines the pHYs chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Pixels per unit, X axis</TD>
    <TD class="Regular">4 bytes (PNG unsigned integer)</TD></TR>
  <TR>
    <TD class="Regular">Pixels per unit, Y axis</TD>
    <TD class="Regular">4 bytes (PNG unsigned integer)</TD></TR>
  <TR>
    <TD class="Regular">Unit specifier</TD>
    <TD class="Regular">1 byte</TD></TR></TBODY></TABLE>
<P>The following values are defined for the unit specifier:</P>
<TABLE class="Regular" summary="This table defines the allowed values for the unit specifier in the pHYs chunk">
  <TBODY>
  <TR>
    <TD class="Regular">0</TD>
    <TD class="Regular">unit is unknown</TD></TR>
  <TR>
    <TD class="Regular">1</TD>
    <TD class="Regular">unit is the metre</TD></TR></TBODY></TABLE>
<P>When the unit specifier is 0, the <SPAN class="chunk">pHYs</SPAN> chunk 
defines pixel aspect ratio only; the actual size of the pixels remains 
unspecified.</P>
<P>If the <SPAN class="chunk">pHYs</SPAN> chunk is not present, pixels are 
assumed to be square, and the physical size of each pixel is unspecified.</P>
<H4><A name="11sPLT">11.3.5.4 <SPAN class="chunk">sPLT</SPAN>Suggested 
palette</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>115 80 76 84
</PRE>
<P>The <SPAN class="chunk">sPLT</SPAN> chunk contains:</P>
<TABLE class="Regular" summary="This table defines the sPLT chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Palette name</TD>
    <TD class="Regular">1-79 bytes (character string)</TD></TR>
  <TR>
    <TD class="Regular">Null separator</TD>
    <TD class="Regular">1 byte (null character)</TD></TR>
  <TR>
    <TD class="Regular">Sample depth</TD>
    <TD class="Regular">1 byte</TD></TR>
  <TR>
    <TD class="Regular">Red</TD>
    <TD class="Regular">1 or 2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Green</TD>
    <TD class="Regular">1 or 2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Blue</TD>
    <TD class="Regular">1 or 2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Alpha</TD>
    <TD class="Regular">1 or 2 bytes</TD></TR>
  <TR>
    <TD class="Regular">Frequency</TD>
    <TD class="Regular">2 bytes</TD></TR>
  <TR>
    <TD class="Regular">...etc...</TD>
    <TD class="Regular">&nbsp;</TD></TR></TBODY></TABLE>
<P>Each palette entry is six bytes or ten bytes containing five unsigned 
integers (red, blue, green, alpha, and frequency).</P>
<P>There may be any number of entries. A PNG decoder determines the number of 
entries from the length of the chunk remaining after the sample depth byte. This 
shall be divisible by 6 if the<SPAN class="chunk">sPLT</SPAN> sample depth is 8, 
or by 10 if the <SPAN class="chunk">sPLT</SPAN> sample depth is 16. Entries
 shall appear in decreasing order of frequency. There is no requirement that the 
entries all be used by the image, nor that they all be different.</P>
<P>The palette name can be any convenient name for referring to the palette (for 
example "256 colour including Macintosh default", "256 colour including 
Windows-3.1 default", "Optimal 512"). The palette name may aid the choice of the 
appropriate suggested palette when more than one appears in a PNG
 datastream.</P>
<P>The palette name is case-sensitive, and subject to the same restrictions as 
the keyword parameter for the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> chunk. Palette names shall contain only printable 
Latin-1 characters and spaces (only character codes 32-126 and 161-255 decimal 
are allowed). Leading, trailing, and consecutive spaces are not permitted.</P>
<P>The <SPAN class="chunk">sPLT</SPAN> sample depth shall be 8 or 16.</P>
<P>The red, green, blue, and alpha samples are either one or two bytes each, 
depending on the <SPAN class="chunk">sPLT</SPAN>sample depth, regardless of the 
image bit depth. The colour samples are not premultiplied by alpha, nor are they
 precomposited against any background. An alpha value of 0 means fully 
transparent. An alpha value of 255 (when the <SPAN class="chunk">sPLT</SPAN> 
sample depth is 8) or 65535 (when the <SPAN class="chunk">sPLT</SPAN> sample 
depth is 16) means fully opaque. The <SPAN class="chunk">sPLT</SPAN> chunk may 
appear for any PNG colour type. Entries in <SPAN class="chunk">sPLT</SPAN> use 
the same gamma and chromaticity values as the PNG image, but may fall outside 
the range of values used in the colour space of the PNG image; for example, in a 
greyscale PNG image, each <SPAN class="chunk">sPLT</SPAN> entry would typically 
have equal red, green, and blue values, but this is not required. Similarly, 
<SPAN class="chunk">sPLT</SPAN> entries can have non-opaque alpha values even 
when the PNG image does not use transparency.</P>
<P>Each frequency value is proportional to the fraction of  the pixels in the 
image for which that palette entry is the closest match in RGBA space, before 
the image has been composited against any background. The exact scale factor is 
chosen by the PNG encoder; it is recommended that the resulting range of 
individual values reasonably fills the range 0 to 65535. A PNG encoder may
 artificially inflate the frequencies for colours considered to be "important", 
for example the colours used in a logo or the facial features of a portrait. 
Zero is a valid frequency meaning that the colour is "least important" or that 
it is rarely, if ever, used. When all the frequencies are zero, they are 
meaningless, that is to say, nothing may be inferred about the actual
 frequencies with which the colours appear in the PNG image.</P>
<P>Multiple <SPAN class="chunk">sPLT</SPAN> chunks are permitted, but each shall 
have a different palette name.</P>
<H3><A name="11timestampinfo">11.3.6 Time stamp information</A></H3>
<H4><A name="11tIME">11.3.6.1 <SPAN class="chunk">tIME</SPAN>Image 
last-modification time</A></H4>
<P>The four-byte chunk type field contains the decimal values</P><PRE>116 73 77 69
</PRE>
<P>The <SPAN class="chunk">tIME</SPAN> chunk gives the time of the last image 
modification (<STRONG>not</STRONG> the time of initial image creation). It 
contains:</P>
<TABLE class="Regular" summary="This table defines the tIME chunk">
  <TBODY>
  <TR>
    <TD class="Regular">Year</TD>
    <TD class="Regular">2 bytes (complete; for example, 1995, 
      <STRONG>not</STRONG> 95)</TD></TR>
  <TR>
    <TD class="Regular">Month</TD>
    <TD class="Regular">1 byte (1-12)</TD></TR>
  <TR>
    <TD class="Regular">Day</TD>
    <TD class="Regular">1 byte (1-31)</TD></TR>
  <TR>
    <TD class="Regular">Hour</TD>
    <TD class="Regular">1 byte (0-23)</TD></TR>
  <TR>
    <TD class="Regular">Minute</TD>
    <TD class="Regular">1 byte (0-59)</TD></TR>
  <TR>
    <TD class="Regular">Second</TD>
    <TD class="Regular">1 byte (0-60) (to allow for leap seconds)</TD></TR>
</TBODY></TABLE>
<P>Universal Time (UTC) should be specified rather than local time.</P>
<P>The <SPAN class="chunk">tIME</SPAN> chunk is intended for use as an 
automatically-applied time stamp that is updated whenever the image data are 
changed.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="12Encoders">12 PNG Encoders</A></H1>
<H2><A name="12Introduction">12.1 Introduction</A></H2>
<P>This clause gives requirements and recommendations for encoder behaviour. A 
PNG encoder shall produce a PNG datastream from a PNG image that conforms to the 
format specified in the preceding clauses. Best results will usually be achieved 
by following the additional recommendations given here.</P>
<H2><A name="12Encoder-gamma-handling">12.2 Encoder gamma handling</A></H2>
<P>See Annex C: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A> for a brief introduction to gamma 
issues.</P>
<P>PNG encoders capable of full colour management <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A> will perform more sophisticated calculations 
than those described here and may choose to use the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunk. If it is known that the image samples 
conform to the sRGB specification <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-IEC-61966-2-1"><SPAN 
class="NormRef">[IEC 61966-2-1]</SPAN></A>, encoders are strongly encouraged to 
write the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunk without performing additional gamma 
handling. In both cases it is recommended that an appropriate <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk be generated for use by PNG decoders that do 
not recognize the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunk or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A> chunk.</P>
<P>A PNG encoder has to determine:</P><!-- <ol start="1"> -->
<OL>
  <LI>what value to write in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
  class="chunk">gAMA</SPAN></A> chunk;</LI>
  <LI>how to transform the provided image samples  into the values to be written 
  in the PNG datastream.</LI></OL>
<P>The value to write in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk is that value which causes a PNG decoder to 
behave in the desired way. See 13.13: <A class="Href" href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-gamma-handling">Decoder 
gamma handling</A>.</P>
<P>The transform to be applied depends on the nature of the image samples and 
their precision. If the samples represent light intensity in floating-point or 
high precision integer form (perhaps from a computer graphics renderer), the 
encoder may perform "gamma encoding" (applying a power function with exponent
 less than 1) before quantizing the data to integer values for inclusion in the 
PNG datastream. This results in fewer banding artifacts at a given sample depth, 
or allows smaller samples while retaining the same visual quality. An intensity 
level expressed as a floating-point value in the range 0 to 1 can be converted 
to a datastream image sample by:</P>
<P><TT>integer_sample = floor((2<SUP>sampledepth</SUP>-1) * 
intensity<SUP>encoding_exponent</SUP>+ 0.5)</TT></P>
<P>If the intensity in the equation is the desired output intensity, the 
encoding exponent is the gamma value to be used in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>chunk.</P>
<P>If the intensity available to the PNG encoder is the original scene 
intensity, another transformation may be needed. There is sometimes a 
requirement for the displayed image to have higher contrast than the original 
source image. This corresponds to an end-to-end transfer function from original 
scene to display output with an exponent greater than 1. In this case:</P><PRE>gamma = encoding_exponent/end_to_end_exponent
</PRE>
<P>If it is not known whether the conditions under which the original image was 
captured or calculated warrant such a contrast change, it may be assumed that 
the display intensities are proportional to original scene intensities, i.e. the 
end-to-end exponent is 1 and hence:</P><PRE>gamma = encoding_exponent
</PRE><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>If the image is being written to a datastream only, the encoder is free to 
choose the encoding exponent. Choosing a value that causes the gamma value in 
the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk to be 1/2.2 is often a reasonable choice 
because it minimizes the work for a PNG decoder displaying on a typical video 
monitor.</P>
<P>Some image renderers may simultaneously write the image to a PNG datastream 
and display it on-screen. The displayed pixels should be gamma corrected for the 
display system and viewing conditions in use, so that the user sees a proper 
representation of the intended scene.</P>
<P>If the renderer wants to write the displayed sample values to the PNG 
datastream, avoiding a separate gamma encoding step for the datastream, the 
renderer should approximate the transfer function of the display system by a 
power function, and write the reciprocal of the exponent into the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk. This will allow a PNG decoder to reproduce 
what was displayed on screen for the originator during rendering.</P>
<P>However, it is equally reasonable for a renderer to compute displayed pixels 
appropriate for the display device, and to perform separate gamma encoding for 
data storage and transmission, arranging to have a value in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk more appropriate to the future use of the 
image.</P>
<P>Computer graphics renderers often do not perform gamma encoding, instead 
making sample values directly proportional to scene light intensity. If the PNG 
encoder receives sample values that have already been quantized into integer 
values, there is no point in doing gamma encoding on them; that would just 
result in further loss of information. The encoder should just write the sample 
values to the PNG datastream. This does not imply that the<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk should contain a gamma value of 1.0 because 
the desired end-to-end transfer function from scene intensity to display output 
intensity is not necessarily linear. However, the desired gamma value is 
probably not far from 1.0. It may depend on whether the scene being rendered is 
a daylight scene or an indoor scene, etc.</P>
<P>When the sample values come directly from a piece of hardware, the correct <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>value can, in principle, be inferred from the 
transfer function of the hardware and lighting conditions of the scene. In the 
case of video digitizers ("frame grabbers"), the samples are probably in the 
sRGB colour space, because the sRGB specification was designed to be compatible 
with modern video standards. Image scanners are less predictable. Their output 
samples may be proportional to the input light intensity since CCD sensors
 themselves are linear, or the scanner hardware may have already applied a power 
function designed to compensate for dot gain in subsequent printing (an exponent 
of about 0.57), or the scanner may have corrected the samples for display on a 
monitor. It may be necessary to refer to the scanner's manual or to scan a
 calibrated target in order to determine the characteristics of a particular 
scanner. It should be remembered that gamma relates samples to desired display 
output, not to scanner input.</P>
<P>Datastream format converters generally should not attempt to convert supplied 
images to a different gamma. The data should be stored in the PNG datastream 
without conversion, and the gamma value should be deduced from information in 
the source datastream if possible. Gamma alteration at datastream conversion 
time causes re-quantization of the set of intensity levels that are represented, 
introducing further roundoff error with little benefit. It is almost always 
better to just copy the sample values intact from the input to the output 
file.</P>
<P>If the source datastream describes the gamma characteristics of the image, a 
datastream converter is strongly encouraged to write a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>chunk. Some datastream formats specify the display 
exponent (the exponent of the function which maps image samples to display
 output rather than the other direction). If the source file's gamma value is 
greater than 1.0, it is probably a display exponent, and the reciprocal of this 
value should be used for the PNG gamma value. If the source file format records 
the relationship between image samples and a quantity other than display output, 
it will be more complex than this to deduce the PNG gamma value.</P>
<P>If a PNG encoder or datastream converter knows that the image has been 
displayed satisfactorily using a display system whose transfer function can be 
approximated by a power function with exponent <TT>display_exponent</TT>, the 
image can be marked as having the gamma value:</P><PRE>gamma = 1/display_exponent
</PRE><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>It is better to write a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk with a value that is approximately correct 
than to omit the chunk and force PNG decoders to guess an approximate gamma. If 
a PNG encoder is unable to infer the gamma value, it is preferable to omit the 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk. If a guess has to be made this should be 
left to the PNG decoder.</P>
<P>Gamma does not apply to alpha samples; alpha is always represented 
linearly.</P>
<P>See also 13.13: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-gamma-handling"><SPAN 
class="xref">Decoder gamma handling</SPAN></A>.</P>
<H2><A name="12Encoder-colour-handling">12.3 Encoder colour handling</A></H2>
<P>See Annex C: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A> for references to colour
 issues.</P>
<P>PNG encoders capable of full colour management <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A> will perform more sophisticated calculations 
than those described here and may choose to use the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> chunk. If it is known that the image samples 
conform to the sRGB specification <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-IEC-61966-2-1"><SPAN 
class="NormRef">[IEC 61966-2-1]</SPAN></A>, PNG encoders are strongly encouraged 
to use the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A>chunk.</P>
<P>If it is possible for the encoder to determine the chromaticities of the 
source display primaries, or to make a strong guess based on the origin of the 
image, or the hardware running it, the encoder is strongly encouraged to output 
the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk. If this is done, the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk should also be written; decoders can do 
little with a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk if the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk is missing.</P>
<P>There are a number of recommendations and standards for primaries and white 
points, some of which are linked to particular technologies, for example the 
CCIR 709 standard <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ITU-R-BT709"><SPAN 
class="bibref">[ITU-R-BT709]</SPAN></A> and the SMPTE-C standard <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-SMPTE-170M"><SPAN 
class="bibref">[SMPTE-170M]</SPAN></A>.</P>
<P>There are three cases that need to be considered:</P>
<OL>
  <LI>the encoder is part of the generation system;</LI>
  <LI>the source image is captured by a camera or scanner;</LI>
  <LI>the PNG datastream was generated by translation from some other 
  format.</LI></OL><!--  deleted - comment PDG 31<p>Scanners that produce PNG datastreams as output should insert
the filter chromaticities into a <a href="#11cHRM"><span class=
"chunk">cHRM</span></a> chunk.</p>-->
<P>In the case of hand-drawn or digitally edited images, it is necessary to 
determine what monitor they were viewed on when being produced. Many image 
editing programs allow the type of monitor being used to be specified. This is 
often because they are working in some device-independent space internally. Such
 programs have enough information to write valid <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunks, and are strongly encouraged to do so 
automatically.</P>
<P>If the encoder is compiled as a portion of a computer image renderer that 
performs full-spectral rendering, the monitor values that were used to convert 
from the internal device-independent colour space to RGB should be written into 
the<A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk. Any colours that are outside the gamut of 
the chosen RGB device should be mapped to be within the gamut; PNG does not 
store out-of-gamut colours.</P>
<P>If the computer image renderer performs calculations directly in 
device-dependent RGB space, a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk should not be written unless the scene 
description and rendering parameters have been adjusted for a particular 
monitor. In that case, the data for that monitor should be used to construct a 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk.</P>
<P>A few image formats store calibration information, which can be used to fill 
in the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk. For example, TIFF 6.0 files <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-TIFF-6.0"><SPAN 
class="bibref">[TIFF-6.0]</SPAN></A> can optionally store calibration 
information, which if present should be used to construct the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk.</P>
<P>Video created with recent video equipment probably uses the CCIR 709 
primaries and D65 white point <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ITU-R-BT709"><SPAN 
class="bibref">[ITU-R-BT709]</SPAN></A>, which are given in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12-table121"><SPAN 
class="tabref">Table 12.1</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<TABLE class="Regular" summary="CCIR 709 primaries and D65 whitepoint">
  <CAPTION><A name="12-table121"><B>Table 12.1 — CCIR 709 primaries and D65 
  whitepoint</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>&nbsp;</TH>
    <TH>R</TH>
    <TH>G</TH>
    <TH>B</TH>
    <TH>White</TH></TR>
  <TR>
    <TD class="Regular">x</TD>
    <TD class="Regular">0.640</TD>
    <TD class="Regular">0.300</TD>
    <TD class="Regular">0.150</TD>
    <TD class="Regular">0.3127</TD></TR>
  <TR>
    <TD class="Regular">y</TD>
    <TD class="Regular">0.330</TD>
    <TD class="Regular">0.600</TD>
    <TD class="Regular">0.060</TD>
    <TD class="Regular">0.3290</TD></TR></TBODY></TABLE>
<P>An older but still very popular video standard is SMPTE-C <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-SMPTE-170M"><SPAN 
class="bibref">[SMPTE-170M]</SPAN></A>given in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12-table122"><SPAN 
class="tabref">Table 12.2</SPAN></A>.</P>
<TABLE class="Regular" summary="CSMPTE-C video standard">
  <CAPTION><A name="12-table122"><B>Table 12.2 — SMPTE-C video 
  standard</B></A></CAPTION>
  <TBODY>
  <TR>
    <TH>&nbsp;</TH>
    <TH>R</TH>
    <TH>G</TH>
    <TH>B</TH>
    <TH>White</TH></TR>
  <TR>
    <TD class="Regular">x</TD>
    <TD class="Regular">0.630</TD>
    <TD class="Regular">0.310</TD>
    <TD class="Regular">0.155</TD>
    <TD class="Regular">0.3127</TD></TR>
  <TR>
    <TD class="Regular">y</TD>
    <TD class="Regular">0.340</TD>
    <TD class="Regular">0.595</TD>
    <TD class="Regular">0.070</TD>
    <TD class="Regular">0.3290</TD></TR></TBODY></TABLE>
<P>It is <STRONG>not</STRONG> recommended that datastream format converters 
attempt to convert supplied images to a different RGB colour space. The data 
should be stored in the PNG datastream without conversion, and the source 
primary chromaticities should be recorded if they are known. Colour space 
transformation at datastream conversion time is a bad idea because of gamut
 mismatches and rounding errors. As with gamma conversions, it is better to 
store the data losslessly and incur at most one conversion when the image is 
finally displayed.</P>
<P>See also 13.14: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-colour-handling"><SPAN 
class="xref">Decoder colour handling</SPAN></A>.</P>
<H2><A name="12Alpha-channel-creation">12.4 Alpha channel creation</A></H2>
<P>The alpha channel can be regarded either as a mask that temporarily hides 
transparent parts of the image, or as a means for constructing a non-rectangular 
image. In the first case, the colour values of fully transparent pixels should 
be preserved for future use. In the second case, the transparent pixels carry no
 useful data and are simply there to fill out the rectangular image area 
required by PNG. In this case, fully transparent pixels should all be assigned 
the same colour value for best compression.</P>
<P>Image authors should keep in mind the possibility that a decoder will not 
support transparency control in full (see 13.16:<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Alpha-channel-processing"><SPAN 
class="xref">Alpha channel processing</SPAN></A>). Hence, the colours assigned 
to transparent pixels should be reasonable background colours whenever 
feasible.</P>
<P>For applications that do not require a full alpha channel, or cannot afford 
the price in compression efficiency, the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> transparency chunk is also available.</P>
<P>If the image has a known background colour, this colour should be written in 
the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk. Even decoders that ignore transparency may 
use the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> colour to fill unused screen area.</P>
<P>If the original image has premultiplied (also called "associated") alpha 
data, it can be converted to PNG's non-premultiplied format by dividing each 
sample value by the corresponding alpha value, then multiplying by the maximum 
value for the image bit depth, and rounding to the nearest integer. In valid 
premultiplied data, the sample values never exceed their corresponding alpha 
values, so the result of the division should always be in the range 0 to 1. If 
the alpha value is zero, output black (zeroes).</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="12Sample-depth-scaling">12.5 Sample depth scaling</A></H2>
<P>When encoding input samples that have a sample depth that cannot be directly 
represented in PNG, the encoder shall scale the samples up to a sample depth 
that is allowed by PNG. The most accurate scaling method is the linear 
equation:</P><PRE>output = floor((input * MAXOUTSAMPLE / MAXINSAMPLE) + 0.5)
</PRE>
<P>where the input samples range from 0 to <TT>MAXINSAMPLE</TT>and the outputs 
range from 0 to <TT>MAXOUTSAMPLE</TT> (which is 2<SUP>sampledepth</SUP>-1).</P>
<P>A close approximation to the linear scaling method is achieved by "left bit 
replication", which is shifting the valid bits to begin in the most significant 
bit and repeating the most significant bits into the open bits. This method is 
often faster to compute than linear scaling.</P>
<P>EXAMPLE Assume that 5-bit samples are being scaled up to 8 bits. If the 
source sample value is 27 (in the range from 0-31), then the original bits 
are:</P><PRE>   4 3 2 1 0
   ---------
   1 1 0 1 1
</PRE>
<P>Left bit replication gives a value of 222:</P><PRE>   7 6 5 4 3  2 1 0
   ----------------
   1 1 0 1 1  1 1 0
   |=======|  |===|
       |      Leftmost Bits Repeated to Fill Open Bits
       |
   Original Bits
</PRE>
<P>which matches the value computed by the linear equation. Left bit replication 
usually gives the same value as linear scaling, and is never off by more than 
one.</P>
<P>A distinctly less accurate approximation is obtained by simply left-shifting 
the input value and filling the low order bits with zeroes. This scheme cannot 
reproduce white exactly, since it does not generate an all-ones maximum value; 
the net effect is to darken the image slightly. This method is not recommended 
in general, but it does have the effect of improving compression, particularly 
when dealing with greater-than-8-bit sample depths. Since the relative error 
introduced by zero-fill scaling is small at high sample depths, some encoders 
may choose to use it. Zero-fill shall <STRONG>not</STRONG> be used for alpha 
channel data, however, since many decoders will treat alpha values of all zeroes 
and all ones as special cases. It is important to represent both those values 
exactly in the scaled data.</P>
<P>When the encoder writes an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A> chunk, it is required to do the scaling in such a 
way that the high-order bits of the stored samples match the original data. That 
is, if the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A> chunk specifies a sample depth of S, the 
high-order S bits of the stored data shall agree with the original S-bit data 
values. This allows decoders to recover the original data by shifting right. The 
added low-order bits are not constrained. All the above scaling methods meet 
this restriction.</P>
<P>When scaling up source image data, it is recommended that the low-order bits 
be filled consistently for all samples; that is, the same source value should 
generate the same sample value at any pixel position. This improves compression 
by reducing the number of distinct sample values. This is not a mandatory
 requirement, and some encoders may choose not to follow it. For example, an 
encoder might instead dither the low-order bits, improving displayed image 
quality at the price of increasing file size.</P>
<P>In some applications the original source data may have a range that is not a 
power of 2. The linear scaling equation still works for this case, although the 
shifting methods do not. It is recommended that an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A> chunk not be written for such images, since <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A>suggests that the original data range was exactly
 0..2<SUP>S</SUP>-1.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="12Suggested-palettes">12.6 Suggested palettes</A></H2>
<P>Suggested palettes may appear as <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunks in any PNG datastream, or as a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk in truecolour PNG datastreams. In either 
case, the suggested palette is not an essential part of the image data, but it 
may be used to present the image on indexed-colour display hardware. Suggested
 palettes are of no interest to viewers running on truecolour hardware.</P>
<P>When an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A>chunk is used to provide a suggested palette, it is 
recommended that the encoder use the frequency fields to indicate the relative 
importance of the palette entries, rather than leave them all zero (meaning 
undefined). The frequency values are most easily computed as "nearest neighbour" 
counts, that is, the approximate usage of each RGBA palette entry if no 
dithering is applied. (These counts will often be available "for free" as a
 consequence of developing the suggested palette.) Because the suggested palette 
includes transparency information, it should be computed for the uncomposited 
image.</P>
<P>Even for indexed-colour images, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> can be used to define alternative reduced palettes 
for viewers that are unable to display all the colours present in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk. If the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A>chunk appears without the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk in an image of colour type 6, the
 circumstances under which the palette was computed are unspecified.</P>
<P>An older method for including a suggested palette in a truecolour PNG 
datastream uses the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk. If this method is used, the histogram 
(frequencies) should appear in a separate <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
class="chunk">hIST</SPAN></A> chunk. The <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk does not include transparency information. 
Hence for images of colour type 6 (truecolour with alpha), it is recommended 
that a <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk appear and that the palette and histogram be 
computed with reference to the image as it would appear after compositing 
against the specified background colour. This definition is necessary to ensure 
that useful palette entries are generated for pixels having fractional alpha 
values. The resulting palette will probably be useful only to viewers that 
present the image against the same background colour. It is recommended that PNG 
editors delete or recompute the palette if they alter or remove the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk in an image of colour type 6.</P>
<P>For images of colour type 2 (truecolour), it is recommended that the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
class="chunk">hIST</SPAN></A> chunks be computed with reference to the RGB data 
only, ignoring any transparent-colour specification. If the datastream uses
 transparency (has a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk), viewers can easily adapt the resulting 
palette for use with their intended background colour (see 13.17: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Histogram-and-suggested-palette-usage"><SPAN 
class="xref">Histogram and suggested palette usage</SPAN></A>).</P>
<P>For providing suggested palettes,  the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A>chunk is more flexible than the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk in the following ways:</P><!-- <ol start="1"> -->
<OL>
  <LI>With <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A>multiple suggested palettes may be provided. A 
  PNG decoder may choose an appropriate palette based on name or number of
   entries.</LI>
  <LI>In a PNG datastream of colour type 6 (truecolour with alpha channel), the 
  <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
  class="chunk">PLTE</SPAN></A> chunk represents a palette already composited 
  against the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
  class="chunk">bKGD</SPAN></A> colour, so it is useful only for display against 
  that background colour. The <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A> chunk provides an uncomposited palette, which is 
  useful for display against backgrounds chosen by the PNG decoder.</LI>
  <LI>Since the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A> chunk is an ancillary chunk, a PNG editor may 
  add or modify suggested palettes without being forced to discard unknown 
  unsafe-to-copy chunks.</LI>
  <LI>Whereas the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A> chunk is allowed in PNG datastreams for colour 
  types 0, 3, and 4 (greyscale and indexed), the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
  class="chunk">PLTE</SPAN></A> chunk cannot be used to provide reduced palettes 
  in these cases.</LI>
  <LI>More than 256 entries may appear in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A> chunk.</LI></OL>
<P>A PNG encoder that uses the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunk may choose to write a suggested palette 
represented by <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
class="chunk">hIST</SPAN></A> chunks as well, for compatibility with decoders 
that do not recognize the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunk.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="12Interlacing">12.7 Interlacing</A></H2>
<P>This International Standard defines two interlace methods, one of which is no 
interlacing. Interlacing provides a convenient basis from which decoders can 
progressively display an image, as described in 13.8: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Progressive-display"><SPAN 
class="xref">Interlacing and progressive display</SPAN></A>.</P>
<H2><A name="12Filter-selection">12.8 Filter selection</A></H2>
<P>For images of colour type 3 (indexed-colour), filter type 0 (None) is usually 
the most effective. Colour images with 256 or fewer colours should almost always 
be stored in indexed-colour format; truecolour format is likely to be much 
larger.</P>
<P>Filter type 0 is also recommended for images of bit depths less than 8. For 
low-bit-depth greyscale images, in rare cases, better compression may be 
obtained by first expanding the image to 8-bit representation and then applying 
filtering.</P>
<P>For truecolour and greyscale images, any of the five filters may prove the 
most effective. If an encoder uses a fixed filter, the Paeth filter is most 
likely to be the best.</P>
<P>For best compression of truecolour and greyscale images, the recommended 
approach is adaptive filtering in which a filter is chosen for each scanline. 
The following simple heuristic has performed well in early tests: compute the 
output scanline using all five filters, and select the filter that gives the 
smallest sum of absolute values of outputs. (Consider the output bytes as signed 
differences for this test.) This method usually outperforms any single fixed 
filter choice. However, it is likely that better heuristics will be found as 
more experience is gained with PNG.</P>
<P>Filtering according to these recommendations is effective in conjunction with 
either of the two interlace methods defined in this International Standard.</P>
<H2><A name="12Compression">12.9 Compression</A></H2>
<P>The encoder may divide the compressed datastream into <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks however it wishes. (Multiple <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks are allowed so that encoders may work in a 
fixed amount of memory; typically the chunk size will correspond to the 
encoder's buffer size.) A PNG datastream in which each <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A>chunk contains only one data byte is valid, though 
remarkably wasteful of space. (Zero-length <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks are also valid, though even more
 wasteful.)</P>
<H2><A name="12Text-chunk-processing">12.10 Text chunk processing</A></H2>
<P>A nonempty keyword shall be provided for each text chunk. The generic keyword 
"Comment" can be used if no better description of the text is available. If a 
user-supplied keyword is used, encoders should check that it meets the 
restrictions on keywords.</P>
<P>For the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A>and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks, PNG text strings are expected to use the 
Latin-1 character set. Encoders should avoid storing characters that are not 
defined in Latin-1, and should provide character code remapping if the local
 system's character set is not Latin-1. The <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A> chunk provides support for international text, 
represented using the UTF-8 encoding of UCS. Encoders should discourage the 
creation of single lines of text longer than 79 characters, in order to
 facilitate easy reading. It is recommended that text items less than 1024 bytes 
in size should be output using uncompressed  text chunks. It is recommended that 
the basic title and author keywords be output using uncompressed text chunks. 
 Placing large text chunks after the image data (after the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks) can speed up image display in some 
situations, as the decoder will decode the image data first. It is recommended 
that small text chunks, such as the image title, appear before the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H2><A name="12Chunk-processing">12.11 Chunking</A></H2>
<H3><A name="12Use-of-private-chunks">12.11.1 Use of private chunks</A></H3>
<P>Chunk types are classified as public or private depending on bit 5 of the 
second byte (the private bit), and classified as critical or ancillary depending 
on bit 5 of the first byte (the ancillary bit). See 5.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
class="xref">Chunk naming conventions</SPAN></A>.</P>
<P>Applications can use PNG private chunks to carry information that need not be 
understood by other applications. Such chunks shall be given private chunk 
types, to ensure that they can never conflict with any future public chunk 
definition. However, there is no guarantee that some other application will not 
use the same private chunk type. If a private chunk type is used, it is prudent 
to store additional identifying information at the beginning of the chunk 
data.</P>
<P>An ancillary chunk type, not a critical chunk type, should be used for all 
private chunks that store information that is not absolutely essential to view 
the image. Creation of private critical chunks is discouraged because PNG 
datastreams containing such chunks are not portable. Such chunks should not be 
used in publicly available software or datastreams. If private critical chunks 
are essential for an application, it is recommended that one appear near the 
start of the datastream, so that a standard decoder need not read very far 
before discovering that it cannot handle the datastream.</P>
<P>If other organizations need to understand a new chunk type, it should be 
submitted to the Registration Authority (see 4.9: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). A proposed public chunk 
type shall not be used in publicly available software or datastreams until 
registration has been approved.</P>
<P>If an ancillary chunk contains textual information that might be of interest 
to a human user, a special chunk type should not be defined for it. Instead a <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> chunk should be used and a suitable keyword 
defined. The information will then be available to other users.</P>
<P>Keywords in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> chunks should be reasonably self-explanatory, 
since the aim is to let other users understand what the chunk contains. If 
generally useful, new keywords should be registered with the Registration 
Authority (see 4.9: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). However, it is permissible 
to use keywords without registering them first.</P>
<H3><A name="12Private-type-and-method-codes">12.11.2 Private type and method 
codes</A></H3>
<P>This specification defines the meaning of only some of the possible values of 
some fields. For example, only compression method 0 and filter types 0 through 4 
are defined in this International Standard. Numbers greater than 127 shall be 
used when inventing experimental or private definitions of values for any of 
these fields. Numbers below 128 are reserved for possible public extensions of 
this specification through future standardization (see 4.9 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). The use of private type 
codes may render a datastream unreadable by standard decoders. Such codes are 
strongly discouraged except for experimental purposes, and should not appear in 
publicly available software or datastreams.</P>
<H3><A name="12Ancillary">12.11.3 Ancillary chunks</A></H3>
<P>All ancillary chunks are optional, encoders need not write them. However, 
encoders are encouraged to write the standard ancillary chunks when the 
information is available.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="13Decoders">13 PNG decoders and viewers</A></H1>
<H2><A name="13Introduction">13.1 Introduction</A></H2>
<P>This clause gives some requirements and recommendations for PNG decoder 
behaviour and viewer behaviour. A viewer presents the decoded PNG image to the 
user. Since viewer and decoder behaviour are closely connected, decoders and 
viewers are treated together here. The only absolute requirement on a PNG 
decoder is that it successfully reads any datastream conforming to the format
 specified in the preceding chapters. However, best results will usually be 
achieved by following these additional recommendations.</P>
<P>PNG decoders shall support all valid combinations of bit depth, colour type, 
compression method, filter method, and interlace method that are explicitly 
defined in this International Standard.</P>
<P>All ancillary chunks are optional; decoders may ignore them. However, 
decoders are encouraged to interpret these chunks when appropriate and 
feasible.</P>
<H2><A name="13Decoders.Errors">13.2 Error handling</A></H2>
<P>Errors in a PNG datastream will fall into two general classes, transmission 
errors and syntax errors (see <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Errors"><SPAN 
class="xref">4.8 Error handling</SPAN></A>).</P>
<P>Examples of transmission errors are transmission in "text" or "ascii" mode, 
in which byte codes 13 and/or 10 may be added, removed, or converted throughout 
the datastream; unexpected termination, in which the datastream is truncated; or 
a physical error on a storage device, in which one or more blocks (typically 512 
bytes each) will have garbled or random values. Some examples of syntax errors 
are an invalid value for a row filter, an invalid compression method, an invalid 
chunk length, the absence of a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk before the first <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunk in an indexed image, or the presence of 
multiple <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunks. A PNG decoder should handle errors as 
follows:</P><!-- <ol start="1"> -->
<OL>
  <LI>Detect errors as early as possible using the PNG signature bytes and CRCs 
  on each chunk. Decoders should verify that all eight bytes of the PNG 
  signature are correct. A decoder can have additional confidence in the 
  datastream's integrity if the next eight bytes begin an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="chunk">IHDR</SPAN></A> chunk with the correct chunk length. A CRC 
  should be checked before processing the chunk data. Sometimes this is 
  impractical, for example when a streaming PNG decoder is processing a large <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A> chunk. In this case the CRC should be checked 
  when the end of the chunk is reached.</LI>
  <LI>Recover from an error, if possible; otherwise fail gracefully. Errors that 
  have little or no effect on the processing of the image may be ignored, while 
  those that affect critical data shall be dealt with in a manner appropriate to 
  the application.</LI>
  <LI>Provide helpful messages describing errors, including recoverable 
  errors.</LI></OL>
<P>Three classes of PNG chunks are relevant to this philosophy. For the purposes 
of this classification, an "unknown chunk" is either one whose type was 
genuinely unknown to the decoder's author, or one that the author chose to treat 
as unknown, because default handling of that chunk type would be sufficient for 
the program's purposes. Other chunks are called "known chunks". Given this 
definition, the three classes are as follows:</P><!-- <ol start="4"> -->
<OL>
  <LI>known chunks, which necessarily includes all of the critical chunks 
  defined in this International Standard (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="chunk">IHDR</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
  class="chunk">PLTE</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
  class="chunk">IEND</SPAN></A>)</LI>
  <LI>unknown critical chunks (bit 5 of the first byte of the chunk type is 
  0)</LI>
  <LI>unknown ancillary chunks (bit 5 of the first byte of the chunk type is 
  1)</LI></OL>
<P>See 5.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
class="xref">Chunk naming conventions</SPAN></A> for a full description of chunk 
naming conventions.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>PNG chunk types are marked "critical" or "ancillary" according to whether the 
chunks are critical for the purpose of extracting a viewable image (as with <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A>) or critical to understanding the datastream 
structure (as with <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A>). This is a specific kind of criticality and one 
that is not necessarily relevant to every conceivable decoder. For example, a 
program whose sole purpose is to extract text annotations (for example, 
copyright information) does not require a viewable image. Another decoder might 
consider the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunks essential to its proper execution.</P>
<P>Syntax errors always involve known chunks because syntax errors in unknown 
chunks cannot be detected. The PNG decoder has to determine whether a syntax 
error is fatal (unrecoverable) or not, depending on its requirements and the 
situation. For example, most decoders can ignore an invalid <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A> chunk; a text-extraction program can ignore the 
absence of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A>; an image viewer cannot recover from an empty <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk in an indexed image but it can ignore an 
invalid <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk in a truecolour image; and a program that 
extracts the alpha channel can ignore an invalid <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk, but may consider the presence of two <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunks to be a fatal error. Anomalous situations 
other than syntax errors shall be treated as follows:</P><!-- <ol start="7"> -->
<OL>
  <LI>Encountering an unknown ancillary chunk is never an error. The chunk can 
  simply be ignored.</LI>
  <LI>Encountering an unknown critical chunk is a fatal condition for any 
  decoder trying to extract the image from the datastream. A decoder that 
  ignored a critical chunk could not know whether the image it extracted was the 
  one intended by the encoder.</LI>
  <LI>A PNG signature mismatch, a CRC mismatch, or an unexpected end-of-stream 
  indicates a corrupted datastream, and may be regarded as a fatal error. A 
  decoder could try to salvage something from the datastream, but the extent of 
  the damage will not be known.</LI></OL>
<P>When a fatal condition occurs, the decoder should fail immediately, signal an 
error to the user if appropriate, and optionally continue displaying any image 
data already visible to the user (i.e. "fail gracefully"). The application as a 
whole need not terminate.</P>
<P>When a non-fatal error occurs, the decoder should signal a warning to the 
user if appropriate, recover from the error, and continue processing 
normally.</P>
<P>Decoders that do not compute CRCs should interpret apparent syntax errors as 
indications of corruption (see also 13.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Error-checking"><SPAN 
class="xref">Error checking</SPAN></A>).</P>
<P>Errors in compressed chunks (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A>) could lead to buffer overruns. Implementors of 
deflate decompressors should guard against this possibility.</P>
<H2><A name="13Error-checking">13.3 Error checking</A></H2>
<P>The PNG error handling philosophy is described in 13.2: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoders.Errors"><SPAN 
class="xref">Error handling</SPAN></A>.</P>
<P>Unknown chunk types shall be handled as described in 5.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
class="xref">Chunk naming conventions</SPAN></A>. An unknown chunk type is 
<STRONG>not</STRONG> to be treated as an error unless it is a critical 
chunk.</P>
<P>The chunk type can be checked for plausibility by seeing whether all four 
bytes are in the range codes 65-90 and 97-122 (decimal); note that this need be 
done only for unrecognized chunk types. If the total datastream size is known 
(from file system information, HTTP protocol, etc), the chunk length can be
 checked for plausibility as well. If CRCs are not checked, dropped/added data 
bytes or an erroneous chunk length can cause the decoder to get out of step and 
misinterpret subsequent data as a chunk header.</P>
<P>For known-length chunks, such as <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A>, decoders should treat an unexpected chunk length 
as an error. Future extensions to this specification will not add new fields to 
existing chunks; instead, new chunk types will be added to carry new
 information.</P>
<P>Unexpected values in fields of known chunks (for example, an unexpected 
compression method in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk) shall be checked for and treated as errors. 
However, it is recommended that unexpected field values be treated as fatal 
errors only in <STRONG>critical</STRONG>chunks. An unexpected value in an 
ancillary chunk can be handled by ignoring the whole chunk as though it were an 
unknown chunk type. (This recommendation assumes that the chunk's CRC has been
 verified. In decoders that do not check CRCs, it is safer to treat any 
unexpected value as indicating a corrupted datastream.)</P>
<P>Standard PNG images shall be compressed with compression method 0. The 
compression method field of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk is provided for possible future 
standardization or proprietary variants. Decoders shall check this byte and 
report an error if it holds an unrecognized code. See clause&nbsp;10: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#10Compression"><SPAN 
class="xref">Compression</SPAN></A> for details.</P>
<H2><A name="13Security-considerations">13.4 Security considerations</A></H2>
<P>A PNG datastream is composed of a collection of explicitly typed chunks. 
Chunks whose contents are defined by the specification could actually contain 
anything, including malicious code. But there is no known risk that such 
malicious code could be executed on the recipient's computer as a result of
 decoding the PNG image.</P>
<P>The possible security risks associated with future chunk types cannot be 
specified at this time. Security issues will be considered by the Registration 
Authority when evaluating chunks proposed for registration as public chunks. 
There is no additional security risk associated with unknown or unimplemented
 chunk types, because such chunks will be ignored, or at most be copied into 
another PNG datastream.</P>
<P>The <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks contain keywords and data that are meant to 
be displayed as plain text. The <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunks contain keywords that are meant to be 
displayed as plain text. It is possible that if the decoder displays such text 
without filtering out control characters, especially the ESC (escape) character,
 certain systems or terminals could behave in undesirable and insecure ways. It 
is recommended that decoders filter out control characters to avoid this risk; 
see 13.5.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Text-chunk-processing"><SPAN 
class="xref">Text chunk processing</SPAN></A>.</P>
<P>Every chunk begins with a length field, which makes it easier to write 
decoders that are invulnerable to fraudulent chunks that attempt to overflow 
buffers. The CRC at the end of every chunk provides a robust defence against 
accidentally corrupted data. The PNG signature bytes provide early detection of 
common file transmission errors.</P>
<P>A decoder that fails to check CRCs could be subject to data corruption. The 
only likely consequence of such corruption is incorrectly displayed pixels 
within the image. Worse things might happen if the CRC of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk is not checked and the width or height 
fields are corrupted. See 13.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Error-checking"><SPAN 
class="xref">Error checking</SPAN></A>.</P>
<P>A poorly written decoder might be subject to buffer overflow, because chunks 
can be extremely large, up to 2<SUP>31</SUP>-1 bytes long. But properly written 
decoders will handle large chunks without difficulty.</P>
<H2><A name="13Chunking">13.5 Chunking</A></H2>
<P>Decoders shall recognize chunk types by a simple four-byte literal 
comparison; it is incorrect to perform case conversion on chunk types. A decoder 
encountering an unknown chunk in which the ancillary bit is 1 may safely ignore 
the chunk and proceed to display the image. A decoder trying to extract the 
image, upon encountering an unknown chunk in which the ancillary bit is 0,
 indicating a critical chunk, shall indicate to the user that the image contains 
information it cannot safely interpret.</P>
<P>(Decoders should not flag an error if the reserved bit is set to 1, however, 
as some future version of the PNG specification could define a meaning for this 
bit. It is sufficient to treat a chunk with this bit set in the same way as any 
other unknown chunk type.)</P>
<H2><A name="13Pixel-dimensions">13.6 Pixel dimensions</A></H2>
<P>Non-square pixels can be represented (see 11.3.5.3: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs"><SPAN 
class="xref"><SPAN class="chunk">pHYs</SPAN>Physical pixel 
dimensions</SPAN></A>), but viewers are not required to account for them; a 
viewer can present any PNG datastream as though its pixels are square.</P>
<P>Where the pixel aspect ratio of the display differs from the aspect ratio of 
the physical pixel dimensions defined in the PNG datastream, viewers are 
strongly encouraged to rescale images for proper display.</P>
<P>When the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs"><SPAN 
class="xref"><SPAN class="chunk">pHYs</SPAN></SPAN></A> chunk has a unit 
specifier of 0 (unit is unknown), the behaviour of a decoder may depend on the
 ratio of the two pixels-per-unit values, but should not depend on their 
magnitudes. For example, a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs"><SPAN 
class="xref"><SPAN class="chunk">pHYs</SPAN></SPAN></A> chunk containing 
<TT>(ppuX, ppuY, unit) = (2, 1, 0)</TT> is equivalent to one containing 
<TT>(1000, 500, 0)</TT>; both are equally valid indications that the image 
pixels are twice as tall as they are wide.</P>
<P>One reasonable way for viewers to handle a difference between the pixel 
aspect ratios of the image and the display is to expand the image either 
horizontally or vertically, but not both. The scale factors could be obtained 
using the following floating-point calculations:</P><PRE><TT>image_ratio = pHYs_ppuY / pHYs_ppuX
display_ratio = display_ppuY / display_ppuX
scale_factor_X = max(1.0, image_ratio/display_ratio)
scale_factor_Y = max(1.0, display_ratio/image_ratio)</TT>
</PRE>
<P>Because other methods such as maintaining the image area are also reasonable, 
and because ignoring the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11pHYs"><SPAN 
class="xref"><SPAN class="chunk">pHYs</SPAN></SPAN></A> chunk is permissible, 
authors should not assume that all viewing applications will use this scaling 
method.</P>
<P>As well as making corrections for pixel aspect ratio, a viewer may have 
reasons to perform additional scaling both horizontally and vertically. For 
example, a viewer might want to shrink an image that is too large to fit on the 
display, or to expand images sent to a high-resolution printer so that they 
appear the same size as they did on the display.</P>
<H2><A name="13Text-chunk-processing">13.7 Text chunk processing</A></H2>
<P>If practical, PNG decoders should have a way to display to the user all the 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks found in the datastream. Even if the 
decoder does not recognize a particular text keyword, the user might be able to 
understand it.</P>
<P>When processing <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunks, decoders could encounter characters other 
than those permitted. Some can be safely displayed (e.g., TAB, FF, and CR, 
decimal 9, 12, and 13, respectively), but others, especially the ESC character 
(decimal 27), could pose a security hazard (because unexpected actions may be 
taken by display hardware or software). Decoders should not attempt to directly 
display any non-Latin-1 characters (except for newline and perhaps TAB, FF, CR) 
encountered in a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A> or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A> chunk. Instead, they should be ignored or 
displayed in a visible notation such as "<TT>\</TT>nnn". See 13.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Security-considerations"><SPAN 
class="xref">Security considerations</SPAN></A>.</P>
<P>Even though encoders are recommended to represent newlines as linefeed 
(decimal 10), it is recommended that decoders not rely on this; it is best to 
recognize all the common newline combinations (CR, LF, and CR-LF) and display 
each as a single newline. TAB can be expanded to the proper number of spaces
 needed to arrive at a column multiple of 8.</P>
<P>Decoders running on systems with non-Latin-1 character set encoding should 
provide character code remapping so that Latin-1 characters are displayed 
correctly. Some systems may not provide all the characters defined in Latin-1. 
Mapping unavailable characters to a visible notation such as "<TT>\</TT>nnn" is 
a good fallback. Character codes 127-255 should be displayed only if they are 
printable characters on the decoding system. Some systems may interpret such 
codes as control characters; for security, decoders running on such systems 
should not display such characters literally.</P>
<P>Decoders should be prepared to display text chunks that contain any number of 
printing characters between newline characters, even though it is recommended 
that encoders avoid creating lines in excess of 79 characters.</P>
<H2><A name="13Decompression">13.8 Decompression</A></H2>
<P>The compression technique used in this International Standard does not 
require the entire compressed datastream to be available before decompression 
can start. Display can therefore commence before the entire decompressed 
datastream is available. It is extremely unlikely that any general purpose 
compression methods in future versions of this International Standard will not 
have this property.</P>
<P>It is important to emphasize that <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunk boundaries have no semantic significance and 
can occur at any point in the compressed datastream. There is no required 
correlation between the structure of the image data (for example, scanline 
boundaries) and deflate block boundaries or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunk boundaries. The complete image data is 
represented by a single zlib datastream that is stored in some number of <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A>chunks; a decoder that assumes any more than this 
is incorrect. Some encoder implementations may emit datastreams in which some of 
these structures are indeed related, but decoders cannot rely on this.</P>
<H2><A name="13Filtering">13.9 Filtering</A></H2>
<P>To reverse the effect of a filter, the decoder may need to use the decoded 
values of the prior pixel on the same line, the pixel immediately above the 
current pixel on the prior line, and the pixel just to the left of the pixel 
above. This implies that at least one scanline's worth of image data needs to be
 stored by the decoder at all times. Even though some filter types do not refer 
to the prior scanline, the decoder will always need to store each scanline as it 
is decoded, since the next scanline might use a filter type that refers to 
it.</P>
<H2><A name="13Progressive-display">13.10 Interlacing and progressive 
display</A></H2>
<P>Decoders are required to be able to read interlaced images. If the reference 
image contains fewer than five columns or fewer than five rows, some passes will 
be empty. Encoders and decoders shall handle this case correctly. In particular, 
filter type bytes are associated only with nonempty scanlines; no filter type
 bytes are present in an empty reduced image.</P>
<P>When receiving images over slow transmission links, viewers can improve 
perceived performance by displaying interlaced images progressively. This means 
that as each reduced image is received, an approximation to the complete image 
is displayed based on the data received so far. One simple yet pleasing effect 
can be obtained by expanding each received pixel to fill a rectangle covering 
the yet-to-be-transmitted pixel positions below and to the right of the received 
pixel. This process can be described by the following ISO C code <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-9899"><SPAN 
class="NormRef">[ISO-9899]</SPAN></A>:</P><PRE>/*
    variables declared and initialized elsewhere in the code:
        height, width
    functions or macros defined elsewhere in the code:
        visit(), min()
 */

int starting_row[7]  = { 0, 0, 4, 0, 2, 0, 1 };
int starting_col[7]  = { 0, 4, 0, 2, 0, 1, 0 };
int row_increment[7] = { 8, 8, 8, 4, 4, 2, 2 };
int col_increment[7] = { 8, 8, 4, 4, 2, 2, 1 };
int block_height[7]  = { 8, 8, 4, 4, 2, 2, 1 };
int block_width[7]   = { 8, 4, 4, 2, 2, 1, 1 };

int pass;
long row, col;
   
pass = 0;
while (pass &lt; 7)
{
    row = starting_row[pass];
    while (row &lt; height)
    {
        col = starting_col[pass];
        while (col &lt; width)
        {
            visit(row, col,
                  min(block_height[pass], height - row),
                  min(block_width[pass], width - col));
            col = col + col_increment[pass];
        }
        row = row + row_increment[pass];
    }
    pass = pass + 1;
}
</PRE>
<P>The function <TT>visit(row,column,height,width)</TT> obtains the next 
transmitted pixel and paints a rectangle of the specified height and width, 
whose upper-left corner is at the specified row and column, using the colour 
indicated by the pixel. Note that row and column are measured from 0,0 at the
 upper left corner.</P>
<P>If the viewer is merging the received image with a background image, it may 
be more convenient just to paint the received pixel positions (the 
<TT>visit()</TT> function sets only the pixel at the specified row and column, 
not the whole rectangle). This produces a "fade-in" effect as the new image 
gradually replaces the old. An advantage of this approach is that proper alpha 
or transparency processing can be done as each pixel is replaced. Painting a 
rectangle as described above will overwrite background-image pixels that may be 
needed later, if the pixels eventually received for those positions turn out to 
be wholly or partially transparent. This is a problem only if the background
 image is not stored anywhere offscreen.</P>
<H2><A name="13Truecolour-image-handling">13.11 Truecolour image
 handling</A></H2>
<P>To achieve PNG's goal of universal interchangeability, decoders shall accept 
all types of PNG image: indexed-colour, truecolour, and greyscale. Viewers 
running on indexed-colour display hardware need to be able to reduce truecolour 
images to indexed-colour for viewing. This process is called "colour
 quantization".</P>
<P>A simple, fast method for colour quantization is to reduce the image to a 
fixed palette. Palettes with uniform colour spacing ("colour cubes") are usually 
used to minimize the per-pixel computation. For photograph-like images, 
dithering is recommended to avoid ugly contours in what should be smooth 
gradients; however, dithering introduces graininess that can be
 objectionable.</P>
<P>The quality of rendering can be improved substantially by using a palette 
chosen specifically for the image, since a colour cube usually has numerous 
entries that are unused in any particular image. This approach requires more 
work, first in choosing the palette, and second in mapping individual pixels to
 the closest available colour. PNG allows the encoder to supply suggested 
palettes, but not all encoders will do so, and the suggested palettes may be 
unsuitable in any case (they may have too many or too few colours). Therefore, 
high-quality viewers will need to have a palette selection routine at hand. A 
large lookup table is usually the most feasible way of mapping individual pixels 
to palette entries with adequate speed.</P>
<P>Numerous implementations of colour quantization are available. The PNG sample 
implementation, libpng (<A 
href="http://www.libpng.org/pub/png/libpng.html"><CODE>http://www.libpng.org/pub/png/libpng.html</CODE></A>),
 includes code for the purpose.</P>
<H2><A name="13Sample-depth-rescaling">13.12 Sample depth rescaling</A></H2>
<P>Decoders may wish to scale PNG data to a lesser sample depth (data precision) 
for display. For example, 16-bit data will need to be reduced to 8-bit depth for 
use on most present-day display hardware. Reduction of 8-bit data to 5-bit depth 
is also common.</P>
<P>The most accurate scaling is achieved by the linear equation</P>
<P><TT>output = floor((input * MAXOUTSAMPLE / MAXINSAMPLE) + 0.5)</TT></P>
<P>where</P>
<P><TT>MAXINSAMPLE = (2<SUP>sampledepth</SUP>)-1</TT><BR 
class="xhtml"><TT>MAXOUTSAMPLE = (2<SUP>desired_sampledepth</SUP>)-1</TT></P>
<P>A slightly less accurate conversion is achieved by simply shifting right by 
<TT>(sampledepth - desired_sampledepth)</TT>places. For example, to reduce 
16-bit samples to 8-bit, the low-order byte can be discarded. In many situations 
the shift method is sufficiently accurate for display purposes, and it is
 certainly much faster. (But if gamma correction is being done, sample rescaling 
can be merged into the gamma correction lookup table, as is illustrated in 
13.13: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Decoder-gamma-handling"><SPAN 
class="xref">Decoder gamma handling</SPAN></A>.)</P>
<P>If the decoder needs to scale samples up (for example, if the frame buffer 
has a greater sample depth than the PNG image), it should use linear scaling or 
left-bit-replication as described in 12.5: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Sample-depth-scaling"><SPAN 
class="xref">Sample depth scaling</SPAN></A>.</P>
<P>When an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A>chunk is present, the reference image data can be 
recovered by shifting right to the sample depth specified by <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A>. Note that linear scaling will not necessarily 
reproduce the original data, because the encoder is not required to have used 
linear scaling to scale the data up. However, the encoder is required to have 
used a method that preserves the high-order bits, so shifting always works. This 
is the only case in which shifting might be said to be more accurate than linear 
scaling. A decoder need not pay attention to the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A> chunk; the stored image is a valid PNG datastream 
of the sample depth indicated by the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> chunk; however, using <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A> to recover the original samples before scaling 
them to suit the display often yields a more accurate display than ignoring <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
class="chunk">sBIT</SPAN></A>.</P>
<P>When comparing pixel values to <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk values to detect transparent pixels, the 
comparison shall be done exactly. Therefore, transparent pixel detection shall 
be done before reducing sample precision.</P>
<H2><A name="13Decoder-gamma-handling">13.13 Decoder gamma handling</A></H2>
<P>See Annex C: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A> for a brief introduction to gamma 
issues.</P>
<P>Viewers capable of full colour management <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ICC"><SPAN 
class="bibref">[ICC]</SPAN></A> will perform more sophisticated calculations 
than those described here.</P>
<P>For an image display program to produce correct tone reproduction, it is 
necessary to take into account the relationship between samples and display 
output, and the transfer function of the display system. This can be done by
 calculating:</P>
<P><TT>sample = integer_sample / (2<SUP>sampledepth</SUP> - 1.0)<BR class="xhtml"> 
display_output = sample<SUP>1.0/gamma</SUP><BR class="xhtml"> display_input = 
inverse_display_transfer(display_output)<BR class="xhtml"> framebuf_sample = 
floor((display_input * MAX_FRAMEBUF_SAMPLE)+0.5)</TT></P>
<P>where <TT>integer_sample</TT> is the sample value from the datastream, 
<TT>framebuf_sample</TT> is the value to write into the frame buffer, and 
<TT>MAX_FRAMEBUF_SAMPLE</TT> is the maximum value of a frame buffer sample (255 
for 8-bit, 31 for 5-bit, etc). The first line converts an integer sample into a 
normalized floating point value (in the range 0.0 to 1.0), the second converts 
to a value proportional to the desired display output intensity, the third 
accounts for the display system's transfer function, and the fourth converts to 
an integer frame buffer sample. Zero raised to any positive power is zero.</P>
<P>A step could be inserted between the second and third to adjust 
<TT>display_output</TT> to account for the difference between the actual viewing 
conditions and the reference viewing conditions. However, this adjustment 
requires accounting for veiling glare, black mapping, and colour appearance 
models, none of which can be well approximated by power functions. Such
 calculations are not described here. If viewing conditions are ignored, the 
error will usually be small.</P>
<P>The display transfer function can typically be approximated by a power 
function with exponent <TT>display_exponent</TT>, in which case the second and 
third lines can be merged into:</P>
<P><TT>display_input = sample<SUP>1.0/(gamma * display_exponent)</SUP> =
 sample<SUP>decoding_exponent</SUP></TT></P>
<P>so as to perform only one power calculation. For colour images, the entire 
calculation is performed separately for R, G, and B values.</P>
<P>The value of gamma can be taken directly from the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk. Alternatively, an application may wish to 
allow the user to adjust the appearance of the displayed image by influencing 
the value of gamma. For example, the user could manually set a parameter 
<TT>user_exponent</TT> which defaults to 1.0, and the application could set:</P><PRE><TT>gamma = gamma_from_file / user_exponent
decoding_exponent = 1.0 / (gamma * display_exponent)
   = user_exponent / (gamma_from_file * display_exponent)</TT>
</PRE>
<P>The user would set <TT>user_exponent</TT> greater than 1 to darken the 
mid-level tones, or less than 1 to lighten them.</P>
<P>A <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A> chunk containing zero is meaningless but could 
appear by mistake. Decoders should ignore it, and editors may discard it and 
issue a warning to the user.</P>
<P>It is <STRONG>not</STRONG> necessary to perform a transcendental mathematical 
computation for every pixel. Instead, a lookup table can be computed that gives 
the correct output value for every possible sample value. This requires only 256 
calculations per image (for 8-bit accuracy), not one or three calculations per
 pixel. For an indexed-colour image, a one-time correction of the palette is 
sufficient, unless the image uses transparency and is being displayed against a 
nonuniform background.</P>
<P>If floating-point calculations are not possible, gamma correction tables can 
be computed using integer arithmetic and a precomputed table of logarithms. 
Example code appears in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-PNG-EXTENSIONS"><SPAN 
class="bibref">[PNG-EXTENSIONS]</SPAN></A>.</P>
<P>When the incoming image has unknown gamma (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
class="chunk">sRGB</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
class="chunk">iCCP</SPAN></A> all absent), choose a likely default gamma value, 
but allow the user to select a new one if the result proves too dark or too 
light. The default gamma may depend on other knowledge about the image, for 
example whether it came from the Internet or from the local system.</P>
<P>In practice, it is often difficult to determine what value of display 
exponent should be used. In systems with no built-in gamma correction, the 
display exponent is determined entirely by the CRT. A display exponent of 2.2 
should be used unless detailed calibration measurements are available for the 
particular CRT used.</P>
<P>Many modern frame buffers have lookup tables that are used to perform gamma 
correction, and on these systems the display exponent value should be the 
exponent of the lookup table and CRT combined. It may not be possible to find 
out what the lookup table contains from within the viewer application, in which 
case it may be necessary to ask the user to supply the display system's exponent 
value. Unfortunately, different manufacturers use different ways of specifying 
what should go into the lookup table, so interpretation of the system "gamma" 
value is system-dependent.</P>
<P>The response of real displays is actually more complex than can be described 
by a single number (the display exponent). If actual measurements of the 
monitor's light output as a function of voltage input are available, the third 
and fourth lines of the computation above can be replaced by a lookup in these
 measurements, to find the actual frame buffer value that most nearly gives the 
desired brightness.</P>
<H2><A name="13Decoder-colour-handling">13.14 Decoder colour handling</A></H2>
<P>See Annex C: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#C-GammaAppendix"><SPAN 
class="xref">Gamma and chromaticity</SPAN></A> for references to colour
 issues.</P>
<P>In many cases, the image data in PNG datastreams will be treated as 
device-dependent RGB values and displayed without modification (except for 
appropriate gamma correction). This provides the fastest display of PNG images. 
But unless the viewer uses exactly the same display hardware as that used by the 
author of the original image, the colours will not be exactly the same as those 
seen by the original author, particularly for darker or near-neutral colours. 
The <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk provides information that allows closer 
colour matching than that provided by gamma correction alone.</P>
<P>The <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> data can be used to transform the image data from 
RGB to XYZ and thence into a perceptually linear colour space such as CIE LAB.
 The colours can be partitioned to generate an optimal palette, because the 
geometric distance between two colours in CIE LAB is strongly related to how 
different those colours appear (unlike, for example, RGB or XYZ spaces). The 
resulting palette of colours, once transformed back into RGB colour space, could 
be used for display or written into a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk.</P>
<P>Decoders that are part of image processing applications might also transform 
image data into CIE LAB space for analysis.</P>
<P>In applications where colour fidelity is critical, such as product design, 
scientific visualization, medicine, architecture, or advertising, PNG decoders 
can transform the image data from source RGB to the display RGB space of the 
monitor used to view the image. This involves calculating the matrix to go from 
source RGB to XYZ and the matrix to go from XYZ to display RGB, then combining 
them to produce the overall transformation. The PNG decoder is responsible for 
implementing gamut mapping.</P>
<P>Decoders running on platforms that have a Colour Management System (CMS) can 
pass the image data, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> values to the CMS for display or further
 processing.</P>
<P>PNG decoders that provide colour printing facilities can use the facilities 
in Level 2 PostScript to specify image data in calibrated RGB space or in a 
device-independent colour space such as XYZ. This will provide better colour 
fidelity than a simple RGB to CMYK conversion. The PostScript Language Reference 
manual<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-POSTSCRIPT"><SPAN 
class="bibref">[POSTSCRIPT]</SPAN></A> gives examples. Such decoders are 
responsible for implementing gamut mapping between source RGB (specified in the 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk) and the target printer. The PostScript 
interpreter is then responsible for producing the required colours.</P>
<P>PNG decoders can use the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> data to calculate an accurate greyscale
 representation of a colour image. Conversion from RGB to grey is simply a case 
of calculating the Y (luminance) component of XYZ, which is a weighted sum of R, 
G, and B values. The weights depend upon the monitor type, i.e. the values in 
the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk. PNG decoders may wish to do this for PNG 
datastreams with no <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11cHRM"><SPAN 
class="chunk">cHRM</SPAN></A> chunk. In this case, a reasonable default would be 
the CCIR 709 primaries <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ITU-R-BT709"><SPAN 
class="bibref">[ITU-R-BT709]</SPAN></A>. The original NTSC primaries should 
<STRONG>not</STRONG> be used unless the PNG image really was colour-balanced for 
such a monitor.</P>
<H2><A name="13Background-colour">13.15 Background colour</A></H2>
<P>The background colour given by the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk will typically be used to fill unused screen 
space around the image, as well as any transparent pixels within the image. 
(Thus, <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> is valid and useful even when the image does not 
use transparency.) If no <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk is present, the viewer will need to decide 
upon a suitable background colour. When no other information is available, a 
medium grey such as 153 in the 8-bit sRGB colour space would be a reasonable 
choice. Transparent black or white text and dark drop shadows, which are common, 
would all be legible against this background.</P>
<P>Viewers that have a specific background against which to present the image 
(such as web browsers) should ignore the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk, in effect overriding <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> with their preferred background colour or
 background image.</P>
<P>The background colour given by the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk is not to be considered transparent, even if 
it happens to match the colour given by the<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk (or, in the case of an indexed-colour image, 
refers to a palette index that is marked as transparent by the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk). Otherwise one would have to imagine 
something "behind the background" to composite against. The background colour is 
either used as background or ignored; it is not an intermediate layer between 
the PNG image and some other background.</P>
<P>Indeed, it will be common that the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunks specify the same colour, since then a 
decoder that does not implement transparency processing will give the intended 
display, at least when no partially-transparent pixels are present.</P>
<H2><A name="13Alpha-channel-processing">13.16 Alpha channel processing</A></H2>
<P>The alpha channel can be used to composite a foreground image against a 
background image. The PNG datastream defines the foreground image and the 
transparency mask, but not the background image. PNG decoders are 
<STRONG>not</STRONG> required to support this most general case. It is expected 
that most will be able to support compositing against a single background
 colour.</P>
<P>The equation for computing a composited sample value is:</P><PRE>output = alpha * foreground + (1-alpha) * background
</PRE>
<P>where alpha and the input and output sample values are expressed as fractions 
in the range 0 to 1. This computation should be performed with intensity samples 
(not gamma-encoded samples). For colour images, the computation is done 
separately for R, G, and B samples.</P>
<P>The following code illustrates the general case of compositing a foreground 
image against a background image. It assumes that the original pixel data are 
available for the background image, and that output is to a frame buffer for 
display. Other variants are possible; see the comments below the code. The code 
allows the sample depths and gamma values of foreground image and background 
image all to be different and not necessarily suited to the display system. In 
practice no assumptions about equality should be made without first 
checking.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>This code is ISO C <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-9899"><SPAN 
class="NormRef">[ISO-9899]</SPAN></A>, with line numbers added for reference in 
the comments below.</P><PRE>   01  int foreground[4];  /* image pixel: R, G, B, A */
   02  int background[3];  /* background pixel: R, G, B */
   03  int fbpix[3];       /* frame buffer pixel */
   04  int fg_maxsample;   /* foreground max sample */
   05  int bg_maxsample;   /* background max sample */
   06  int fb_maxsample;   /* frame buffer max sample */
   07  int ialpha;
   08  float alpha, compalpha;
   09  float gamfg, linfg, gambg, linbg, comppix, gcvideo;
   
       /* Get max sample values in data and frame buffer */
   10  fg_maxsample = (1 &lt;&lt; fg_sample_depth) - 1;
   11  bg_maxsample = (1 &lt;&lt; bg_sample_depth) - 1;
   12  fb_maxsample = (1 &lt;&lt; frame_buffer_sample_depth) - 1;
       /*
        * Get integer version of alpha.
        * Check for opaque and transparent special cases;
        * no compositing needed if so.
        *
        * We show the whole gamma decode/correct process in
        * floating point, but it would more likely be done
        * with lookup tables.
        */
   13  ialpha = foreground[3];
   
   14  if (ialpha == 0) {
           /*
            * Foreground image is transparent here.
            * If the background image is already in the frame
            * buffer, there is nothing to do.
            */
   15      ;
   16  } else if (ialpha == fg_maxsample) {
           /*
            * Copy foreground pixel to frame buffer.
            */
   17      for (i = 0; i &lt; 3; i++) {
   18          gamfg = (float) foreground[i] / fg_maxsample;
   19          linfg = pow(gamfg, 1.0 / fg_gamma);
   20          comppix = linfg;
   21          gcvideo = pow(comppix, 1.0 / display_exponent);
   22          fbpix[i] = (int) (gcvideo * fb_maxsample + 0.5);
   23      }
   24  } else {
           /*
            * Compositing is necessary.
            * Get floating-point alpha and its complement.
            * Note: alpha is always linear; gamma does not
            * affect it.
            */
   25      alpha = (float) ialpha / fg_maxsample;
   26      compalpha = 1.0 - alpha;
   
   27      for (i = 0; i &lt; 3; i++) {
               /*
                * Convert foreground and background to floating
                * point, then undo gamma encoding.
                */
   28          gamfg = (float) foreground[i] / fg_maxsample;
   29          linfg = pow(gamfg, 1.0 / fg_gamma);
   30          gambg = (float) background[i] / bg_maxsample;
</PRE><!-- ************Page Break******************* --><!-- ************Page Break******************* --><PRE>   31          linbg = pow(gambg, 1.0 / bg_gamma);
               /* 
                * Composite.
                */
   32          comppix = linfg * alpha + linbg * compalpha;
               /*
                * Gamma correct for display.
                * Convert to integer frame buffer pixel.
                */
   33          gcvideo = pow(comppix, 1.0 / display_exponent);
   34          fbpix[i] = (int) (gcvideo * fb_maxsample + 0.5);
   35      }
   36  }
</PRE>
<P>Variations:</P><!-- <ol start="1"> -->
<OL>
  <LI>If output is to another PNG datastream instead of a frame buffer, lines 
  21, 22, 33, and 34 should be changed along the following lines <PRE>   /*
    * Gamma encode for storage in output datastream.
    * Convert to integer sample value.
    */
   gamout = pow(comppix, outfile_gamma);
   outpix[i] = (int) (gamout * out_maxsample + 0.5);
</PRE>
  Also, it becomes necessary to process background pixels when alpha is zero, 
  rather than just skipping pixels. Thus, line 15 will need to be replaced by 
  copies of lines 17-23, but processing background instead of foreground pixel 
  values.</LI>
  <LI>If the sample depths of the output file, foreground file, and background 
  file are all the same, and the three gamma values also match, then the 
  no-compositing code in lines 14-23 reduces to copying pixel values from the 
  input file to the output file if alpha is one, or copying pixel values from 
  background to output file if alpha is zero. Since alpha is typically either 
  zero or one for the vast majority of pixels in an image, this is a significant 
  saving. No gamma computations are needed for most pixels.</LI>
  <LI>When the sample depths and gamma values all match, it may appear 
  attractive to skip the gamma decoding and encoding (lines 28-31, 33-34) and 
  just perform line 32 using gamma-encoded sample values. Although this does not 
  have too bad an effect on image quality, the time savings are small if alpha 
  values of zero and one are treated as special cases as recommended here.</LI>
  <LI>If the original pixel values of the background image are no longer 
  available, only processed frame buffer pixels left by display of the 
  background image, then lines 30 and 31 need to extract intensity from the 
  frame buffer pixel values using code such as <PRE>   /*
    * Convert frame buffer value into intensity sample.
    */
   gcvideo = (float) fbpix[i] / fb_maxsample;
   linbg = pow(gcvideo, display_exponent);
</PRE>
  However, some roundoff error can result, so it is better to have the original 
  background pixels available if at all possible.</LI>
  <LI>Note that lines 18-22 are performing exactly the same gamma computation 
  that is done when no alpha channel is present. If the no-alpha case is handled 
  with a lookup table, the same lookup table can be used here. Lines 28-31 and 
  33-34 can also be done with (different) lookup tables.</LI>
  <LI>Integer arithmetic can be used instead of floating point, providing care 
  is taken to maintain sufficient precision throughout.</LI></OL>
<P class="Note">NOTE In floating point, no overflow or underflow checks are 
needed, because the input sample values are guaranteed to be between 0 and 1, 
and compositing always yields a result that is in between the input values 
(inclusive). With integer arithmetic, some roundoff-error analysis might be 
needed to guarantee no overflow or underflow.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<P>When displaying a PNG image with full alpha channel, it is important to be 
able to composite the image against some background, even if it is only black. 
Ignoring the alpha channel will cause PNG images that have been converted from 
an associated-alpha representation to look wrong. (Of course, if the alpha 
channel is a separate transparency mask, then ignoring alpha is a useful option: 
it allows the hidden parts of the image to be recovered.)</P>
<P>Even if the decoder does not implement true compositing logic, it is simple 
to deal with images that contain only zero and one alpha values. (This is 
implicitly true for greyscale and truecolour PNG datastreams that use a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk; for indexed-colour PNG datastreams it is 
easy to check whether the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk contains any values other than 0 and 255.) 
In this simple case, transparent pixels are replaced by the background colour, 
while others are unchanged.</P>
<P>If a decoder contains only this much transparency capability, it should deal 
with a full alpha channel by treating all nonzero alpha values as fully opaque 
or by dithering. Neither approach will yield very good results for images 
converted from associated-alpha formats, but this is preferable to doing
 nothing. Dithering full alpha to binary alpha is very much like dithering 
greyscale to black-and-white, except that all fully transparent and fully opaque 
pixels should be left unchanged by the dither.</P>
<H2><A name="13Histogram-and-suggested-palette-usage">13.17 Histogram and 
suggested palette usage</A></H2>
<P>For viewers running on indexed-colour hardware attempting to display a 
truecolour image, or an indexed-colour image whose palette is too large for the 
frame buffer, the encoder may have provided one or more suggested palettes in <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunks. If one of these is found to be suitable, 
based on size and perhaps name, the PNG decoder can use that palette. Suggested 
palettes with a sample depth different from what the decoder needs can be
 converted using sample depth rescaling (see 13.12: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#13Sample-depth-rescaling"><SPAN 
class="xref">Sample depth rescaling</SPAN></A>).</P>
<P>When the background is a solid colour, the viewer should composite the image 
and the suggested palette against that colour, then quantize the resulting image 
to the resulting RGB palette. When the image uses transparency and the 
background is not a solid colour, no suggested palette is likely to be
 useful.</P>
<P>For truecolour images, a suggested palette might also be provided in a <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk. If the image has a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> chunk and the background is a solid colour, the 
viewer will need to adapt the suggested palette for use with its desired 
background colour. To do this, the palette entry closest to the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
class="chunk">tRNS</SPAN></A> colour should be replaced with the desired 
background colour; or alternatively a palette entry for the background colour 
can be added, if the viewer can handle more colours than there are <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> entries.</P>
<P>For images of colour type 6 (truecolour with alpha), any <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk should have been designed for display of the 
image against a uniform background of the colour specified by the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A> chunk. Viewers should probably ignore the palette 
if they intend to use a different background, or if the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11bKGD"><SPAN 
class="chunk">bKGD</SPAN></A>chunk is missing. Viewers can use a suggested 
palette for display against a different background than it was intended for, but 
the results may not be very good.</P>
<P>If the viewer presents a transparent truecolour image against a background 
that is more complex than a uniform colour, it is unlikely that the suggested 
palette will be optimal for the composite image. In this case it is best to 
perform a truecolour compositing step on the truecolour PNG image and background
 image, then colour-quantize the resulting image.</P>
<P>In truecolour PNG datastreams, if both <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> chunks appear, the PNG decoder may choose from 
among the palettes suggested by both, bearing in mind the different transparency 
semantics described above.</P>
<P>The frequencies in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
class="chunk">sPLT</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
class="chunk">hIST</SPAN></A> chunks are useful when the viewer cannot provide 
as many colours as are used in the palette in the PNG datastream. If the viewer 
has a shortfall of only a few colours, it is usually adequate to drop the 
least-used colours from the palette. To reduce the number of colours 
substantially, it is best to choose entirely new representative colours, rather 
than trying to use a subset of the existing palette. This amounts to performing 
a new colour quantization step; however, the existing palette and histogram can 
be used as the input data, thus avoiding a scan of the image data in the <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks.</P>
<P>If no suggested palette is provided, a decoder can develop its own, at the 
cost of an extra pass over the image data in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> chunks. Alternatively, a default palette (probably 
a colour cube) can be used.</P>
<P>See also 12.6: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#12Suggested-palettes"><SPAN 
class="xref">Suggested palettes</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="14EditorsExt">14 Editors and extensions</A></H1>
<H2><A name="14Additional-chunk-types">14.1 Additional chunk types</A></H2>
<P>The provisions of this International Standard may be extended by adding new 
chunk types, which may be either private or public. Applications can use private 
chunk types to carry data that is not of interest to other people's 
applications.</P>
<P>Decoders shall be prepared to encounter unrecognized public or private chunk 
types. The chunk naming conventions (see 5.4:<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
class="xref">Chunk naming conventions</SPAN></A>) enable critical/ancillary,
 public/private, and safe/unsafe to copy chunks to be distinguished.</P>
<P>Additional public PNG chunk types are defined in the document Register of PNG 
Public Chunks and Keywords <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-PNG-EXTENSIONS"><SPAN 
class="bibref">[PNG-REGISTER]</SPAN></A>. Chunks described there are expected to 
be less widely supported than those defined in this International Standard. 
However, application authors are encouraged to use those chunk types whenever 
appropriate for their applications. Additional chunk types can be proposed for
 inclusion in that list by contacting the PNG Registration Authority (see 4.9: 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>).</P>
<P>New public chunks will be registered only if they are of use to others and do 
not violate the design philosophy of PNG. Chunk registration is not automatic, 
although it is the intent of the Registration Authority that it be 
straightforward when a new chunk of potentially wide application is needed. The 
creation of new critical chunk types is discouraged unless absolutely
 necessary.</P>
<H2><A name="14Ordering">14.2 Behaviour of PNG editors</A></H2>
<P>A "PNG editor" is defined as a program that reads a PNG datastream, makes 
modifications, and writes a new PNG datastream while preserving as much 
ancillary information as possible. Two examples of PNG editors are a program 
that adds or modifies text chunks, and a program that adds a suggested palette 
to a truecolour PNG datastream. Ordinary image editors are not PNG editors 
because they usually discard all unrecognized information while reading in an 
image.</P>
<P>To allow new chunk types to be added to PNG, it is necessary to establish 
rules about the ordering requirements for all chunk types. Otherwise a PNG 
editor does not know what to do when it encounters an unknown chunk.</P>
<P>EXAMPLE Consider a hypothetical new ancillary chunk type that is safe-to-copy 
and is required to appear after <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> if <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> is present. If a program attempts to add a <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk and does not recognize the new chunk, it may 
insert the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
class="chunk">PLTE</SPAN></A> chunk in the wrong place, namely after the new 
chunk. Such problems could be prevented by requiring PNG editors to discard all 
unknown chunks, but that is a very unattractive solution. Instead, PNG requires 
ancillary chunks not to have ordering restrictions like this.</P>
<P>To prevent this type of problem while allowing for future extension, 
constraints are placed on both the behaviour of PNG editors and the allowed 
ordering requirements for chunks. The safe-to-copy bit defines the proper 
handling of unrecognized chunks in a datastream that is being modified.</P><!-- <ol start="1"> -->
<OL>
  <LI>If a chunk's safe-to-copy bit is 1, the chunk may be copied to a modified 
  PNG datastream whether or not the PNG editor recognizes the chunk type, and 
  regardless of the extent of the datastream modifications.</LI>
  <LI>If a chunk's safe-to-copy bit is 0, it indicates that the chunk depends on 
  the image data. If the program has made<STRONG>any</STRONG> changes to 
  <STRONG>critical</STRONG> chunks, including addition, modification, deletion, 
  or reordering of critical chunks, then unrecognized unsafe chunks shall
  <STRONG>not</STRONG> be copied to the output PNG datastream. (Of course, if 
  the program <STRONG>does</STRONG> recognize the chunk, it can choose to output 
  an appropriately modified version.)</LI>
  <LI>A PNG editor is always allowed to copy all unrecognized ancillary chunks 
  if it has only added, deleted, modified, or reordered 
  <STRONG>ancillary</STRONG> chunks. This implies that it is not permissible for 
  ancillary chunks to depend on other ancillary chunks.</LI>
  <LI>PNG editors shall terminate on encountering an unrecognized critical chunk 
  type, because there is no way to be certain that a valid datastream will 
  result from modifying a datastream containing such a chunk. (Simply discarding 
  the chunk is not good enough, because it might have unknown implications for 
  the interpretation of other chunks.) The safe/unsafe mechanism is intended for 
  use with ancillary chunks. The safe-to-copy bit will always be 0 for critical 
  chunks.</LI></OL>
<P>The rules governing ordering of chunks are as follows.</P><!-- <ol start="5"> -->
<OL>
  <LI>When copying an unknown <STRONG>unsafe-to-copy</STRONG> ancillary chunk, a 
  PNG editor shall not move the chunk relative to any critical chunk. It may 
  relocate the chunk freely relative to other ancillary chunks that occur 
  between the same pair of critical chunks. (This is well defined since the 
  editor shall not add, delete, modify, or reorder critical chunks if it is
   preserving unknown unsafe-to-copy chunks.)</LI>
  <LI>When copying an unknown <STRONG>safe-to-copy</STRONG> ancillary chunk, a 
  PNG editor shall not move the chunk from before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A> to after <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A> or vice versa. (This is well defined because <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A> is always present.) Any other reordering is 
  permitted.</LI>
  <LI>When copying a <STRONG>known</STRONG> ancillary chunk type, an editor need 
  only honour the specific chunk ordering rules that exist for that chunk type. 
  However, it may always choose to apply the above general rules instead.</LI>
</OL>
<P>These rules are expressed in terms of copying chunks from an input datastream 
to an output datastream, but they apply in the obvious way if a PNG datastream 
is modified in place.</P>
<P>See also 5.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
class="xref">Chunk naming conventions</SPAN></A>.</P>
<P>PNG editors that do not change the image data should not change the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tIME"><SPAN 
class="chunk">tIME</SPAN></A>chunk. The Creation Time keyword in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
class="chunk">tEXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
class="chunk">zTXt</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
class="chunk">iTXt</SPAN></A> chunks may be used for a user-supplied time.</P>
<H2><A name="14Ordering-of-chunks">14.3 Ordering of chunks</A></H2>
<H3><A name="14Ordering-of-critical-chunks">14.3.1 Ordering of critical 
chunks</A></H3>
<P>Critical chunks may have arbitrary ordering requirements, because PNG editors 
are required to terminate if they encounter unknown critical chunks. For example 
<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
class="chunk">IHDR</SPAN></A> has the specific ordering rule that it shall 
always appear first. A PNG editor, or indeed any PNG-writing program, shall know 
and follow the ordering rules for any critical chunk type that it can 
generate.</P>
<H3><A name="14Ordering-of-ancillary-chunks">14.3.2 Ordering of ancillary 
chunks</A></H3>
<P>The strictest ordering rules for an ancillary chunk type are:</P><!-- <ol start="1"> -->
<OL>
  <LI>Unsafe-to-copy chunks may have ordering requirements relative to critical 
  chunks.</LI>
  <LI>Safe-to-copy chunks may have ordering requirements relative to <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A>.</LI></OL>
<P>The actual ordering rules for any particular ancillary chunk type may be 
weaker. See for example the ordering rules for the standard ancillary chunk 
types in 5.6: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5ChunkOrdering"><SPAN 
class="xref">Chunk ordering</SPAN></A>.</P>
<P>Decoders shall not assume more about the positioning of any ancillary chunk 
than is specified by the chunk ordering rules. In particular, it is never valid 
to assume that a specific ancillary chunk type occurs with any particular 
positioning relative to other ancillary chunks.</P>
<P>EXAMPLE It is unsafe to assume that a particular private ancillary chunk 
occurs immediately before <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A>. Even if it is always written in that position by 
a particular application, a PNG editor might have inserted some other ancillary 
chunk after it. But it is safe to assume that the chunk will remain somewhere 
between <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
class="chunk">IDAT</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
class="chunk">IEND</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1><A name="15Conformance">15 Conformance</A></H1>
<H2><A name="15ConfIntro">15.1 Introduction</A></H2>
<H3><A name="15ConfObjectives">15.1.1 Objectives</A></H3>
<P>This clause addresses conformance of PNG datastreams, PNG encoders, PNG 
decoders, and PNG editors.</P>
<P>The primary objectives of the specifications in this clause are:</P><!-- <ol start="1"> -->
<OL>
  <LI>to promote interoperability by eliminating arbitrary subsets of, or 
  extensions to, this International Standard;</LI>
  <LI>to promote uniformity in the development of conformance tests;</LI>
  <LI>to promote consistent results across PNG encoders, decoders, and 
  editors;</LI>
  <LI>to facilitate automated test generation.</LI></OL>
<H3><A name="15ConfScope">15.1.2 Scope</A></H3>
<P>Conformance is defined for PNG datastreams and for PNG encoders, decoders, 
and editors.</P>
<P>This clause addresses the PNG datastream and implementation requirements 
including the range of allowable differences for PNG encoders, PNG decoders, and 
PNG editors. This clause does not directly address the environmental, 
performance, or resource requirements of the encoder, decoder, or editor.</P>
<P>The scope of this clause is limited to rules for the open interchange of PNG 
datastreams.</P>
<H2><A name="15ConformanceConf">15.2 Conformance conditions</A></H2>
<H3><A name="15FileConformance">15.2.1 Conformance of PNG datastreams</A></H3>
<P>A PNG datastream conforms to this International Standard if the following 
conditions are met.</P>
<OL>
  <LI>The PNG datastream contains a PNG signature as the first content (see 5.2: 
  <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5PNG-file-signature"><SPAN 
  class="xref">PNG file signature</SPAN></A>).</LI>
  <LI>With respect to the chunk types defined in this International Standard: 
  <UL>
    <LI>the PNG datastream contains as its first chunk, an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
    class="chunk">IHDR</SPAN></A> chunk, immediately following the PNG 
    signature;</LI>
    <LI>the PNG datastream contains as its last chunk, an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
    class="chunk">IEND</SPAN></A> chunk.</LI></UL></LI>
  <LI>No chunks or other content follow the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IEND"><SPAN 
  class="chunk">IEND</SPAN></A> chunk.</LI>
  <LI>All chunks contained therein match the specification of the corresponding 
  chunk types of this International Standard.  The PNG datastream shall obey the 
  relationships among chunk types defined in this International Standard.</LI>
  <LI>The sequence of chunks in the PNG datastream obeys the ordering 
  relationship specified in this International Standard.</LI>
  <LI>All field values in the PNG datastream obey the relationships specified in 
  this International Standard producing the structure specified in this 
  International Standard.</LI>
  <LI>No chunks appear in the PNG datastream other than those specified in this 
  International Standard or those defined according to the rules for creating 
  new chunk types as defined in this International Standard.</LI>
  <LI>The PNG datastream is encoded according to the rules of this International 
  Standard.</LI></OL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H3><A name="15ConformanceEncoder">15.2.2 Conformance of PNG encoders</A></H3>
<P>A PNG encoder conforms to this International Standard if it satisfies the 
following conditions.</P><!-- <ol start="1"> -->
<OL>
  <LI>All PNG datastreams that are generated by the PNG encoder are conforming 
  PNG datastreams.</LI>
  <LI>When encoding input samples that have a sample depth that cannot be 
  directly represented in PNG, the encoder scales the samples up to the next 
  higher sample depth that is allowed by PNG. The data are scaled in such a way 
  that the high-order bits match the original data.</LI>
  <LI>Numbers greater than 127 are used when encoding experimental or private 
  definitions of values for any of the method or type fields.</LI></OL>
<H3><A name="15ConformanceDecoder">15.2.3 Conformance of PNG decoders</A></H3>
<P>A PNG decoder conforms to this International Standard if it satisfies the 
following conditions.</P><!-- <ol start="1"> -->
<OL>
  <LI>It is able to read any PNG datastream that conforms to this International 
  Standard, including both public and private chunks whose types may not be 
  recognized.</LI>
  <LI>It supports all the standardized critical chunks, and all the standardized 
  compression, filter, and interlace methods and types in any PNG datastream 
  that conforms to this International Standard.</LI>
  <LI>Unknown chunk types are handled as described in <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
  class="xref">5.4 Chunk naming conventions</SPAN></A>. An unknown chunk type is 
  <STRONG>not</STRONG>treated as an error unless it is a critical chunk.</LI>
  <LI>Unexpected values in fields of known chunks (for example, an unexpected 
  compression method in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="chunk">IHDR</SPAN></A> chunk) are treated as errors.</LI>
  <LI>All types of PNG images (indexed-colour, truecolour, greyscale, truecolour 
  with alpha, and greyscale with alpha) are processed. For example, decoders 
  which are part of viewers running on indexed-colour display hardware shall 
  reduce truecolour images to indexed format for viewing.</LI>
  <LI>Encountering an unknown chunk in which the ancillary bit is 0 generates an 
  error if the decoder is attempting to extract the image.</LI>
  <LI>A chunk type in which the reserved bit is set is treated as an unknown 
  chunk type.</LI>
  <LI>All valid combinations of bit depth and colour type as defined in 11.2.2: 
  <A 
  href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="xref"><SPAN class="chunk">IHDR</SPAN> Image header</SPAN></A> are
   supported.</LI>
  <LI>An error is reported if an unrecognized value is encountered in the bit 
  depth, colour type, compression method, filter method, or interlace method 
  bytes of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IHDR"><SPAN 
  class="chunk">IHDR</SPAN></A> chunk.</LI>
  <LI>When processing 16-bit greyscale or truecolour data in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tRNS"><SPAN 
  class="chunk">tRNS</SPAN></A> chunk, both bytes of the sample values are 
  evaluated to determine whether a pixel is transparent.</LI>
  <LI>When processing an image compressed by compression method 0, the decoder 
  assumes no more than that the complete image data is represented by a single 
  compressed datastream that is stored in some number of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11IDAT"><SPAN 
  class="chunk">IDAT</SPAN></A> chunks.</LI>
  <LI>No assumptions are made concerning the positioning of any ancillary chunk 
  other than those that are specified by the chunk ordering rules.</LI></OL>
<H3><A name="15ConformanceEditor">15.2.4 Conformance of PNG editors</A></H3>
<P>A PNG editor conforms to this International Standard if it satisfies the 
following conditions.</P>
<OL>
  <LI>It conforms to the requirements for PNG encoders.</LI>
  <LI>It conforms to the requirements for PNG decoders.</LI>
  <LI>It is able to encode all chunks that it decodes.</LI>
  <LI>It preserves the ordering of the chunks presented within the rules in 5.6: 
  <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5ChunkOrdering"><SPAN 
  class="xref">Chunk ordering</SPAN></A>.</LI>
  <LI>It properly processes the safe-to-copy bit information and preserves 
  unknown chunks when the safe-to-copy rules permit it.</LI>
  <LI>Unless the user specifically permits lossy operations or the editor issues 
  a warning, it preserves all information required to reconstruct the reference 
  image exactly, except that the sample depth of the alpha channel need not be 
  preserved if it contains only zero and maximum values. Operations such as 
  changing the colour type or rearranging the palette in an indexed-colour
   datastream are permitted provided that the new datastream losslessly 
  represents the same reference image.</LI></OL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="A-Conventions">Annex A</A></H1>
<P class="Annex">(informative)</P>
<H1 id="filemedia" class="Annex">File conventions and Internet media type</H1>
<H2><A name="A-File-name-extension">A.1 File name extension</A></H2>
<P>On systems where file names customarily include an extension signifying file 
type, the extension "<TT>.png</TT>" is recommended for PNG files. Lower case 
"<TT>.png</TT>" is preferred if file names are case-sensitive.</P>
<H2><A name="A-Media-type">A.2 Internet media type</A></H2>
<P>The internet media type "<TT>image/png</TT>" is the Internet Media Type for 
PNG <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-2045"><SPAN 
class="NormRef">[RFC-2045]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-RFC-2048"><SPAN 
class="NormRef">[RFC-2048]</SPAN></A>. It is recommended that implementations 
also recognize the media type "<TT>image/x-png</TT>".</P>
<H2><A name="A-Macintosh-file-layout">A.3 Macintosh file layout</A></H2>
<P>In the Apple Computer Inc. Macintosh system, the following conventions are 
recommended.</P>
<OL>
  <LI>The four-byte file type code for PNG files is "<TT>PNGf</TT>". (This code 
  has been registered with Apple Computer Inc. for PNG files.) The creator code 
  will vary depending on the creating application.</LI>
  <LI>The contents of the data fork is a PNG file exactly as described in this 
  International Standard.</LI>
  <LI>The contents of the resource fork are unspecified. It may be empty or may 
  contain application-dependent resources.</LI>
  <LI>When transferring a Macintosh PNG file to a non-Macintosh system, only the 
  data fork should be transferred.</LI></OL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="B-NewChunksAppendix">Annex B</A></H1>
<P class="Annex">(informative)</P>
<H1 id="newchunks" class="Annex">Guidelines for new chunk types</H1>
<P>This International Standard allows extension through the addition of new 
chunk types and new interlace, filter, and compression methods. Such extensions 
might be made to the standard either for experimental purposes or by 
organizations for internal use.</P>
<P>Chunk types that are intended for general public use, or are required for 
specific application domains, should be standardized through registration (see 
4.9 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#4Concepts.Registration"><SPAN 
class="xref">Extension and registration</SPAN></A>). The process for 
registration is defined by the Registration Authority. The conventions for 
naming chunks are given in 5.4: <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#5Chunk-naming-conventions"><SPAN 
class="xref">Chunk naming conventions</SPAN></A>.</P>
<P>Some guidelines for defining private chunks are given below.</P><!-- <ol start="1"> -->
<OL>
  <LI>Do not define new chunks that redefine the meaning of existing chunks or 
  change the interpretation of an existing standardized chunk, e.g., do not add 
  a new chunk to say that RGB and alpha values actually mean CMYK.</LI>
  <LI>Minimize the use of private chunks to aid portability.</LI>
  <LI>Avoid defining chunks that depend on total datastream contents. If such 
  chunks have to be defined, make them critical chunks.</LI>
  <LI>For textual information that is representable in Latin-1 avoid defining a 
  new chunk type. Use a <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11tEXt"><SPAN 
  class="chunk">tEXt</SPAN></A> or <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11zTXt"><SPAN 
  class="chunk">zTXt</SPAN></A> chunk with a suitable keyword to identify the 
  type of information. For textual information that is not representable in 
  Latin-1 but which can be represented in UTF-8, use an <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
  class="chunk">iTXt</SPAN></A>chunk with a suitable keyword.</LI>
  <LI>Group mutually dependent ancillary information into a single chunk. This 
  avoids the need to introduce chunk ordering relationships.</LI>
  <LI>Avoid defining private critical chunks.</LI></OL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="C-GammaAppendix">Annex C</A></H1>
<P class="Annex">(informative)</P>
<H1 id="gammachromaticity" class="Annex">Gamma and chromaticity</H1>
<P>Gamma is a numerical parameter used to describe approximations to certain 
non-linear transfer functions encountered in image capture and reproduction. 
Gamma is the exponent in a power law function. For example the function:</P>
<P><TT>intensity = (voltage + constant)<SUP>exponent</SUP></TT></P>
<P>which is used to model the non-linearity of cathode ray tube (CRT) displays. 
It is often assumed, as in this International Standard, that the constant is 
zero.</P>
<P>For the purposes of this International Standard, it is convenient to consider 
five places in a general image pipeline at which non-linear transfer functions 
may occur and which may be modelled by power laws. The characteristic exponent 
associated with each is given a specific name.</P>
<TABLE class="Regular" summary="This table describes characteristic exponents">
  <TBODY>
  <TR>
    <TD class="Regular"><TT>input_exponent</TT> </TD>
    <TD class="Regular">the exponent of the image sensor.</TD></TR>
  <TR>
    <TD class="Regular"><TT>encoding_exponent</TT> </TD>
    <TD class="Regular">the exponent of any transfer function performed by the
       process or device writing the datastream.</TD></TR>
  <TR>
    <TD class="Regular"><TT>decoding_exponent</TT> </TD>
    <TD class="Regular">the exponent of any transfer function performed by the
       software reading the image datastream.</TD></TR>
  <TR>
    <TD class="Regular"><TT>LUT_exponent</TT> </TD>
    <TD class="Regular">the exponent of the transfer function applied between 
      the frame buffer and the display device (typically this is applied by a 
      Look Up Table).</TD></TR>
  <TR>
    <TD class="Regular"><TT>output_exponent</TT> </TD>
    <TD class="Regular">the exponent of the display device. For a CRT, this is
       typically a value close to 2.2.</TD></TR></TBODY></TABLE>
<P>It is convenient to define some additional entities that describe some 
composite transfer functions, or combinations of stages.</P>
<TABLE class="Regular" summary="This table characterises additional entities that are used to describe transfer functions">
  <TBODY>
  <TR>
    <TD class="Regular"><TT>display_exponent</TT> </TD>
    <TD class="Regular">exponent of the transfer function applied between the 
      frame buffer and the display surface of the display device.<BR class="xhtml">
      <TT>display_exponent = LUT_exponent * output_exponent</TT> </TD></TR>
  <TR>
    <TD class="Regular"><TT>gamma</TT> </TD>
    <TD class="Regular">exponent of the function mapping display output 
      intensity to samples in the PNG datastream.<BR class="xhtml"><TT>gamma = 
      1.0 / (decoding_exponent * display_exponent)</TT></TD></TR>
  <TR>
    <TD class="Regular"><TT>end_to_end_exponent</TT> </TD>
    <TD class="Regular">the exponent of the function mapping image sensor 
      input intensity to display output intensity. This is generally a value in 
      the range 1.0 to 1.5.</TD></TR></TBODY></TABLE>
<P>The PNG <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
class="chunk">gAMA</SPAN></A>chunk is used to record the gamma value. This 
information may be used by decoders together with additional information about 
the display environment in order to achieve, or approximate, the desired display 
output.</P>
<P>Additional information about this subject may be found in the references <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-GAMMA-TUTORIAL"><SPAN 
class="bibref">[GAMMA-TUTORIAL]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-GAMMA-FAQ"><SPAN 
class="bibref">[GAMMA-FAQ]</SPAN></A>, and<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-POYNTON"><SPAN 
class="bibref">[POYNTON]</SPAN></A>(especially chapter 6).</P>
<P>Background information about chromaticity and colour spaces may be found in 
references <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-COLOUR-TUTORIAL"><SPAN 
class="bibref">[COLOUR-TUTORIAL]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-COLOUR-FAQ"><SPAN 
class="bibref">[COLOUR-FAQ]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-HALL"><SPAN 
class="bibref">[HALL]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-KASSON"><SPAN 
class="bibref">[KASSON]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-LILLEY"><SPAN 
class="bibref">[LILLEY]</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-STONE"><SPAN 
class="bibref">[STONE]</SPAN></A>, and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-TRAVIS"><SPAN 
class="bibref">[TRAVIS]</SPAN></A>.</P><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="D-CRCAppendix">Annex D</A></H1>
<P class="Annex">(informative)</P>
<H1 id="samplecrc" class="Annex">Sample Cyclic Redundancy Code
 implementation</H1>
<P>The following sample code represents a practical implementation of the CRC 
(Cyclic Redundancy Check) employed in PNG chunks. (See also ISO 3309 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-3309"><SPAN 
class="NormRef">[ISO-3309]</SPAN></A> or ITU-T V.42 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ITU-T-V42"><SPAN 
class="bibref">[ITU-T-V42]</SPAN></A> for a formal specification.)</P>
<P>The sample code is in the ISO C <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#2-ISO-9899"><SPAN 
class="NormRef">[ISO-9899]</SPAN></A> programming language. The hints in <A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#D-tabled1"><SPAN 
class="tabref">Table D.1</SPAN></A> may help non-C users to read the code more
 easily.</P>
<TABLE class="Regular" 
  summary="This table gives hints for reading the CRC code">
  <CAPTION><A name="D-tabled1"><B>Table D.1 — Hints for reading ISO C 
  code</B></A></CAPTION>
  <TBODY>
  <TR>
    <TD class="Regular"><TT>&amp;</TT> </TD>
    <TD class="Regular">Bitwise AND operator.</TD></TR>
  <TR>
    <TD class="Regular"><TT>^</TT> </TD>
    <TD class="Regular">Bitwise exclusive-OR operator.</TD></TR>
  <TR>
    <TD class="Regular"><TT>&gt;&gt;</TT> </TD>
    <TD class="Regular">Bitwise right shift operator. When applied to an 
      unsigned quantity, as here, right shift inserts zeroes at the left.</TD></TR>
  <TR>
    <TD class="Regular"><TT>!</TT> </TD>
    <TD class="Regular">Logical NOT operator.</TD></TR>
  <TR>
    <TD class="Regular"><TT>++</TT> </TD>
    <TD class="Regular">"<TT>n++</TT>" increments the variable <TT>n</TT>. In 
      "for" loops, it is applied after the variable is tested.</TD></TR>
  <TR>
    <TD class="Regular"><TT>0xNNN</TT> </TD>
    <TD class="Regular"><TT>0x</TT> introduces a hexadecimal (base 16) 
      constant. Suffix <TT>L</TT> indicates a long value (at least 32 bits).</TD>
  </TR></TBODY></TABLE>
<HR class="xhtml">
<PRE>   /* Table of CRCs of all 8-bit messages. */
   unsigned long crc_table[256];
   
   /* Flag: has the table been computed? Initially false. */
   int crc_table_computed = 0;
   
   /* Make the table for a fast CRC. */
   void make_crc_table(void)
   {
     unsigned long c;
     int n, k;
   
     for (n = 0; n &lt; 256; n++) {
       c = (unsigned long) n;
       for (k = 0; k &lt; 8; k++) {
         if (c &amp; 1)
           c = 0xedb88320L ^ (c &gt;&gt; 1);
         else
           c = c &gt;&gt; 1;
       }
       crc_table[n] = c;
     }
     crc_table_computed = 1;
   }
  
</PRE><!-- ************Page Break******************* --><!-- ************Page Break******************* --><PRE>   /* Update a running CRC with the bytes buf[0..len-1]--the CRC
      should be initialized to all 1's, and the transmitted value
      is the 1's complement of the final running CRC (see the
      crc() routine below). */
   
   unsigned long update_crc(unsigned long crc, unsigned char *buf,
                            int len)
   {
     unsigned long c = crc;
     int n;
   
     if (!crc_table_computed)
       make_crc_table();
     for (n = 0; n &lt; len; n++) {
       c = crc_table[(c ^ buf[n]) &amp; 0xff] ^ (c &gt;&gt; 8);
     }
     return c;
   }
   
   /* Return the CRC of the bytes buf[0..len-1]. */
   unsigned long crc(unsigned char *buf, int len)
   {
     return update_crc(0xffffffffL, buf, len) ^ 0xffffffffL;
   }
</PRE><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="E-Resources">Annex E</A></H1>
<P class="Annex">(informative)</P>
<H1 id="onlineresources" class="Annex">Online resources</H1>
<H2><A name="E-Intro">Introduction</A></H2>
<P>This annex gives the locations of some Internet resources for PNG software 
developers. By the nature of the Internet, the list is incomplete and subject to 
change.</P>
<H2><A name="E-Archive-sites">Archive sites</A></H2>
<P>This International Standard can be found at<A href="http://www.w3.org/TR/2003/REC-PNG-20031110/index.html"><CODE>http://www.w3.org/TR/2003/REC-PNG-20031110/index.html</CODE></A>.</P>
<H2><A name="E-icc-profile-specs">ICC profile specifications</A></H2>
<P>ICC profile specifications are available at: <A 
href="http://www.color.org/"><CODE>http://www.color.org/</CODE></A></P>
<H2><A name="E-PNG-home-page">PNG web site</A></H2>
<P>There is a World Wide Web site for PNG at <A href="http://www.libpng.org/pub/png/"><CODE>http://www.libpng.org/pub/png/</CODE></A>.
 This page is a central location for current information about PNG and 
PNG-related tools.</P>
<P>Additional documentation and portable C code for deflate, inflate, and an 
optimized implementation of the CRC algorithm are available from the zlib web 
site,<A href="http://www.zlib.org/"><CODE>http://www.zlib.org/</CODE></A>.</P>
<H2><A name="E-Sample-implementation">Sample implementation and test 
images</A></H2>
<P>A sample implementation in portable C, <STRONG>libpng</STRONG>, is available 
at <A 
href="http://www.libpng.org/pub/png/libpng.html"><CODE>http://www.libpng.org/pub/png/libpng.html</CODE></A>.
 Sample viewer and encoder applications of libpng are available at<A href="http://www.libpng.org/pub/png/book/sources.html"><CODE>http://www.libpng.org/pub/png/book/sources.html</CODE></A>
and are described in detail in <I>PNG: The Definitive Guide</I><A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-ROELOFS">[ROELOFS]</A>. 
Test images can also be accessed from the PNG web site.</P>
<H2><A name="E-Email">Electronic mail</A></H2>
<P>Queries concerning PNG developments may be addressed to <A href="mailto:png-group@w3.org"><TT>png-group@w3.org</TT></A>. 
<!-- ************Page Break******************* --></P><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="F-Relationship">Annex F</A></H1>
<P class="Annex">(informative)</P>
<H1 id="relationshiptofirstedition" class="Annex">Relationship to W3C PNG</H1>
<P>This International Standard is strongly based on W3C Recommendation PNG 
Specification Version 1.0 <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-PNG-1.0">[PNG-1.0]</A> 
which was reviewed by W3C members, approved as a W3C Recommendation, and 
published in October 1996 according to the established W3C process. Subsequent 
amendments to the PNG Specification have also been incorporated into this
 International Standard <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-PNG-1.0">[PNG-1.1]</A>, 
<A 
href="http://www.libpng.org/pub/png/spec/iso/index-object.html#G-PNG-1.0">[PNG-1.2]</A>.</P>
<P>A complete review of the document has been done by ISO/IEC/JTC 1/SC 24 in 
collaboration with W3C in order to transform this recommendation into an ISO/IEC 
international standard. A major design goal during this review was to avoid 
changes that will invalidate existing files, editors, or viewers that conform to
 W3C Recommendation PNG Specification Version 1.0.</P>
<P>The W3C PNG Recommendation was developed with major contribution from the 
following people.</P>
<H2><A name="F-Editor10">Editor (Version 1.0)</A></H2>
<P>Thomas Boutell, <SPAN class="email">boutell @ boutell.com</SPAN></P>
<H2><A name="F-Editor12">Editor (Versions 1.1 and 1.2)</A></H2>
<P>Glenn Randers-Pehrson, <SPAN class="email">randeg @ alum.rpi.edu</SPAN></P>
<H2><A name="F-ContribEditor10">Contributing Editor (Version 1.0)</A></H2>
<P>Tom Lane, <SPAN class="email">tgl @ sss.pgh.pa.us</SPAN></P>
<H2><A name="F-ContribEditor12">Contributing Editor (Versions 1.1 and 
1.2)</A></H2>
<P>Adam M. Costello, <SPAN class="email">png-spec.amc @ nicemice.net</SPAN></P>
<H2><A name="F-Authors">Authors (Versions 1.0, 1.1, and 1.2 combined)</A></H2>
<P><STRONG>Authors' names are presented in alphabetical order.</STRONG></P>
<UL>
  <LI><A href="http://www.alumni.caltech.edu/~madler/">Mark Adler</A>,<SPAN 
  class="email">madler @ alumni.caltech.edu</SPAN></LI>
  <LI><A href="http://www.boutell.com/boutell/">Thomas Boutell</A>,<SPAN class="email">boutell 
  @ boutell.com</SPAN></LI>
  <LI>John Bowler, <SPAN class="mail">jbowler @ acm.org</SPAN></LI>
  <LI><A href="http://www.df.lth.se/~cb/">Christian Brunschen</A>,<SPAN class="email">cb 
  @ brunschen.com</SPAN></LI>
  <LI><A href="http://www.nicemice.net/amc/">Adam M. Costello</A>, <SPAN class="email">png-spec.amc 
  @ nicemice.net</SPAN></LI>
  <LI><A href="http://www.piclab.com/">Lee Daniel Crocker</A>,<SPAN class="email">lee 
  @ piclab.com</SPAN></LI>
  <LI><A href="http://www-mddsp.enel.ucalgary.ca/People/adilger/">Andreas
   Dilger</A>, <SPAN class="email">adilger @ turbolabs.com</SPAN></LI>
  <LI><A href="http://www.fromme.com/">Oliver Fromme</A>, <SPAN 
  class="email">oliver @ fromme.com</SPAN></LI>
  <LI><A href="http://www.teaser.fr/~jlgailly/">Jean-loup Gailly</A>, <SPAN 
  class="email">jloup @ gzip.org</SPAN></LI>
  <LI>Chris Herborth, <SPAN class="email">chrish @ pobox.com</SPAN></LI>
  <LI>Alex Jakulin, <SPAN class="email">jakulin @ acm.org</SPAN></LI>
  <LI>Neal Kettler, <SPAN class="email">neal @ westwood.com</SPAN></LI>
  <LI>Tom Lane, <SPAN class="email">tgl @ sss.pgh.pa.us</SPAN></LI>
  <LI>Alexander Lehmann, <SPAN class="email">lehmann @ usa.net</SPAN></LI><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
  <LI><A href="http://www.w3.org/People/chris/">Chris Lilley</A>,<SPAN class="email">chris 
  @ w3.org</SPAN></LI>
  <LI>Dave Martindale, <SPAN class="email">davem @ cs.ubc.ca</SPAN></LI>
  <LI>Owen Mortensen, <SPAN class="email">ojm @ acm.org</SPAN></LI>
  <LI>Keith S. Pickens, <SPAN class="email">ksp @ rice.edu</SPAN></LI>
  <LI><A href="http://www.users.qwest.net/~lionlad/">Robert P. Poole</A>, <SPAN 
  class="email">tarquin @ alum.mit.edu</SPAN></LI>
  <LI>Glenn Randers-Pehrson, <SPAN class="email">randeg @ 
  alum.rpi.edu</SPAN></LI>
  <LI><A href="http://pobox.com/~newt/">Greg Roelofs</A>, <SPAN 
  class="email">newt @ pobox.com</SPAN></LI>
  <LI><A href="http://www.schaik.com/">Willem van Schaik</A>, <SPAN class="email">willem 
  @ schaik.com</SPAN></LI>
  <LI>Guy Schalnat, <SPAN class="email">gschal @ infinet.com</SPAN></LI>
  <LI>Paul Schmidt, <SPAN class="email">pschmidt @ photodex.com</SPAN></LI>
  <LI>Michael Stokes, <SPAN class="email">mistokes @ microsoft.com</SPAN></LI>
  <LI>Tim Wegner, <SPAN class="email">twegner @ phoenix.net</SPAN></LI>
  <LI>Jeremy Wohl, <SPAN class="email">jeremyw @ evantide.com</SPAN></LI></UL>
<H2><A name="F-ChangeList">List of changes between W3C Recommendation PNG 
Specification Version 1.0 and this International Standard</A></H2>
<H3><A name="F-EditorialChanges">Editorial changes</A></H3>
<P>The document has been reformatted according to the requirements of ISO.</P><!-- <ol start="1"> -->
<OL>
  <LI>A concepts clause has been introduced.</LI>
  <LI>Conformance for datastreams, encoders, decoders, and editors has been 
  defined in a conformance clause.</LI></OL>
<H3><A name="F-TechnicalChanges">Technical changes</A></H3><!-- <ol start="1"> -->
<OL>
  <LI>New chunk types introduced in PNG version 1.1 and 1.2 have been 
  incorporated (<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iCCP"><SPAN 
  class="chunk">iCCP</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
  class="chunk">iTXt</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sRGB"><SPAN 
  class="chunk">sRGB</SPAN></A>, <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A>). In the<A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11iTXt"><SPAN 
  class="chunk">iTXt</SPAN></A>chunk, the language tag has been updated from RFC 
  1766 to RFC 3066.</LI>
  <LI>In accord with version 1.1, the scope of the 31-bit limit on chunk lengths 
  and image dimensions has been extended to apply to all four-byte unsigned 
  integers. The value -2<SUP>31</SUP> is not allowed in signed integers.</LI>
  <LI>The redefinition of <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11gAMA"><SPAN 
  class="chunk">gAMA</SPAN></A> to be in terms of the desired display output 
  rather than the original scene, introduced in PNG version 1.1, has been 
  incorporated.</LI>
  <LI>The use of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11PLTE"><SPAN 
  class="chunk">PLTE</SPAN></A> and <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11hIST"><SPAN 
  class="chunk">hIST</SPAN></A> chunks in non-indexed-colour images has been 
  discouraged in favour of the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sPLT"><SPAN 
  class="chunk">sPLT</SPAN></A> chunk.</LI>
  <LI>Some recommendations for PNG encoders, decoders, and editors have been 
  strengthened to requirements. These changes do not affect the conformance of 
  PNG datastreams, and do not compromise interoperability.</LI>
  <LI>The sample depth of channels not mentioned in the <A href="http://www.libpng.org/pub/png/spec/iso/index-object.html#11sBIT"><SPAN 
  class="chunk">sBIT</SPAN></A> chunk has been clarified.</LI></OL><!-- ************Page Break******************* --><!-- ************Page Break******************* -->
<H1 class="Annex"><A name="G-References">Bibliography</A></H1>
<DL>
  <DT><A name="G-COLOUR-FAQ">[COLOUR-FAQ]</A></DT>
  <DD>Poynton, C., "Colour FAQ".<BR class="xhtml"><A href="http://www.poynton.com/ColorFAQ.html"><CODE>http://www.poynton.com/ColorFAQ.html</CODE></A></DD>
  <DT><A name="G-COLOUR-TUTORIAL">[COLOUR-TUTORIAL]</A></DT>
  <DD>PNG Group, "Colour tutorial".<BR class="xhtml"><A href="http://www.libpng.org/pub/png/spec/1.2/PNG-ColorAppendix.html"><CODE>http://www.libpng.org/pub/png/spec/1.2/PNG-ColorAppendix.html</CODE></A></DD>
  <DT><A name="G-GAMMA-TUTORIAL">[GAMMA-TUTORIAL]</A></DT>
  <DD>PNG Group, "Gamma tutorial".<BR class="xhtml"><A href="http://www.libpng.org/pub/png/spec/1.2/PNG-GammaAppendix.html"><CODE>http://www.libpng.org/pub/png/spec/1.2/PNG-GammaAppendix.html</CODE></A></DD>
  <DT><A name="G-GAMMA-FAQ">[GAMMA-FAQ]</A></DT>
  <DD>Poynton, C., "Gamma FAQ".<BR class="xhtml"><A href="http://www.poynton.com/Poynton-color.html">
  <CODE>http://www.poynton.com/Poynton-color.html</CODE></A></DD>
  <DT><A name="G-HALL">[HALL]</A></DT>
  <DD>Hall, Roy, <I>Illumination and Color in Computer Generated Imagery</I>. 
  Springer-Verlag, New York, 1989. ISBN 0-387-96774-5.</DD>
  <DT><A name="G-ICC">[ICC]</A></DT>
  <DD>The International Color Consortium.<BR class="xhtml"><A href="http://www.color.org/"><CODE>http://www.color.org/</CODE></A></DD>
  <DT><A name="G-ISO-3664">[ISO-3664]</A></DT>
  <DD>ISO 3664:2000, <I>Viewing conditions — Graphic technology and 
  photography</I>.</DD>
  <DT><A name="G-ITU-R-BT709">[ITU-R-BT709]</A></DT>
  <DD>International Telecommunications Union, <I>Basic Parameter Values for the 
  HDTV Standard for the Studio and for International Programme Exchange</I>, 
  ITU-R Recommendation BT.709 (formerly CCIR Rec. 709), 1990.</DD>
  <DT><A name="G-ITU-T-V42">[ITU-T-V42]</A></DT>
  <DD>International Telecommunications Union, <I>Error-correcting Procedures for 
  DCEs Using Asynchronous-to-Synchronous Conversion</I>, ITU-T Recommendation 
  V.42, 1994, Rev. 1.</DD>
  <DT><A name="G-KASSON">[KASSON]</A></DT>
  <DD>Kasson, J., and W. Plouffe, "An Analysis of Selected Computer Interchange 
  Color Spaces", <I>ACM Transactions on Graphics</I>, vol. 11, no. 4 , pp. 
  373-405, 1992.</DD>
  <DT><A name="G-LILLEY">[LILLEY]</A></DT>
  <DD>Lilley, C., F. Lin, W.T. Hewitt, and T.L.J. Howard, <I>Colour in Computer 
  Graphics</I>. CVCP, Sheffield, 1993. ISBN 1-85889-022-5.<BR class="xhtml"><!-- Also available from<br class="xhtml" />
 <a href=
"http://www.man.ac.uk/MVC/training/gravigs/colour/"><code>http://www.man.ac.uk/MVC/training/gravigs/colour/</code></a>
--></DD>
  <DT><A name="G-ROELOFS">[ROELOFS]</A></DT>
  <DD>Roelofs, G., <I>PNG: The Definitive Guide</I>, O'Reilly &amp; Associates 
  Inc, Sebastopol, CA, 1999. ISBN 1-56592-542-4. See also <A href="http://www.libpng.org/pub/png/pngbook.html"><CODE>http://www.libpng.org/pub/png/pngbook.html</CODE></A></DD>
  <DT><A name="G-PAETH">[PAETH]</A></DT>
  <DD>Paeth, A.W., "Image File Compression Made Easy", in<I>Graphics Gems 
  II</I>, James Arvo, editor. Academic Press, San Diego, 1991. ISBN 
  0-12-064480-0.</DD>
  <DT><A name="G-PNG-1.0">[PNG-1.0]</A></DT>
  <DD>W3C Recommendation, "PNG (Portable Network Graphics) Specification, 
  Version 1.0", 1996. Available in several formats from<BR class="xhtml"><A 
  href="http://www.w3.org/TR/REC-png-961001"><CODE>http://www.w3.org/TR/REC-png-961001</CODE></A>
  and from<BR class="xhtml"><A 
  href="http://www.libpng.org/pub/png/spec/1.0/"><CODE>http://www.libpng.org/pub/png/spec/1.0/</CODE></A></DD>
  <DT><A name="G-PNG-1.1">[PNG-1.1]</A></DT>
  <DD>PNG Development Group, "PNG (Portable Network Graphics) Specification, 
  Version 1.1", 1998. Available  from<BR class="xhtml"><A href="http://www.libpng.org/pub/png/spec/1.1/"><CODE>http://www.libpng.org/pub/png/spec/1.1/</CODE></A></DD>
  <DT><A name="G-PNG-1.2">[PNG-1.2]</A></DT>
  <DD>PNG Development Group, "PNG (Portable Network Graphics) Specification, 
  Version 1.2", 1999. Available from<BR class="xhtml"><A href="http://www.libpng.org/pub/png/spec/1.2/"><CODE>http://www.libpng.org/pub/png/spec/1.2/</CODE></A></DD>
  <DT><A name="G-PNG-EXTENSIONS">[PNG-REGISTER]</A></DT>
  <DD>PNG Development Group, "Register of PNG Public Chunks and Keywords".
   Available in several formats from:<BR class="xhtml"><A href="http://www.libpng.org/pub/png/spec/register/"><CODE>http://www.libpng.org/pub/png/spec/register/</CODE></A></DD>
  <DT><A name="G-POSTSCRIPT">[POSTSCRIPT]</A></DT>
  <DD>Adobe Systems Incorporated, <I>PostScript Language Reference Manual</I>, 
  2nd edition. Addison-Wesley, Reading, 1990. ISBN 0-201-18127-4.</DD>
  <DT><A name="G-POYNTON">[POYNTON]</A></DT>
  <DD>Poynton, Charles A., <I>A Technical Introduction to Digital Video</I>. 
  John Wiley and Sons, Inc., New York, 1996. ISBN 0-471-12253-X.</DD>
  <DT><A name="G-SMPTE-170M">[SMPTE-170M]</A></DT>
  <DD>Society of Motion Picture and Television Engineers,<I>Television — 
  Composite Analog Video Signal — NTSC for Studio Applications</I>, SMPTE-170M, 
  1994.</DD>
  <DT><A name="G-STONE">[STONE]</A></DT>
  <DD>Stone, M.C., W.B. Cowan, and J.C. Beatty, "Color gamut mapping and the 
  printing of digital images", <I>ACM Transactions on Graphics</I>, vol. 7, no. 
  3, pp. 249-292, 1988.</DD>
  <DT><A name="G-TIFF-6.0">[TIFF-6.0]</A></DT>
  <DD>TIFF<SUP>TM</SUP> Revision 6.0, Aldus Corporation, June 1992.</DD>
  <DT><A name="G-TRAVIS">[TRAVIS]</A></DT>
  <DD>Travis, David, <I>Effective Color Displays — Theory and Practice</I>. 
  Academic Press, London, 1991. ISBN 0-12-697690-2.</DD>
  <DT><A name="G-ZL">[ZL]</A></DT>
  <DD>J. Ziv and A. Lempel, "A Universal Algorithm for Sequential Data 
  Compression", <I>IEEE Transactions on Information Theory</I>, vol. IT-23, no. 
  3, pp. 337 - 343, 1977.</DD></DL>
<P>Additional documentation and portable C code for deflate, inflate, and an 
optimized implementation of the CRC algorithm are available from the zlib web 
site,<A 
href="http://www.zlib.org/"><CODE>http://www.zlib.org/</CODE></A>.</P></BODY></HTML>
